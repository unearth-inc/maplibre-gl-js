define(['./shared'], function (performance) { 'use strict';

var mapboxGlSupported = performance.createCommonjsModule(function (module) {
if ( module.exports) {
    module.exports = isSupported;
} else if (window) {
    window.mapboxgl = window.mapboxgl || {};
    window.mapboxgl.supported = isSupported;
    window.mapboxgl.notSupportedReason = notSupportedReason;
}
function isSupported(options) {
    return !notSupportedReason(options);
}
function notSupportedReason(options) {
    if (!isBrowser()) {
        return 'not a browser';
    }
    if (!isArraySupported()) {
        return 'insufficent Array support';
    }
    if (!isFunctionSupported()) {
        return 'insufficient Function support';
    }
    if (!isObjectSupported()) {
        return 'insufficient Object support';
    }
    if (!isJSONSupported()) {
        return 'insufficient JSON support';
    }
    if (!isWorkerSupported()) {
        return 'insufficient worker support';
    }
    if (!isUint8ClampedArraySupported()) {
        return 'insufficient Uint8ClampedArray support';
    }
    if (!isArrayBufferSupported()) {
        return 'insufficient ArrayBuffer support';
    }
    if (!isCanvasGetImageDataSupported()) {
        return 'insufficient Canvas/getImageData support';
    }
    if (!isWebGLSupportedCached(options && options.failIfMajorPerformanceCaveat)) {
        return 'insufficient WebGL support';
    }
}
function isBrowser() {
    return typeof window !== 'undefined' && typeof document !== 'undefined';
}
function isArraySupported() {
    return Array.prototype && Array.prototype.every && Array.prototype.filter && Array.prototype.forEach && Array.prototype.indexOf && Array.prototype.lastIndexOf && Array.prototype.map && Array.prototype.some && Array.prototype.reduce && Array.prototype.reduceRight && Array.isArray;
}
function isFunctionSupported() {
    return Function.prototype && Function.prototype.bind;
}
function isObjectSupported() {
    return Object.keys && Object.create && Object.getPrototypeOf && Object.getOwnPropertyNames && Object.isSealed && Object.isFrozen && Object.isExtensible && Object.getOwnPropertyDescriptor && Object.defineProperty && Object.defineProperties && Object.seal && Object.freeze && Object.preventExtensions;
}
function isJSONSupported() {
    return 'JSON' in window && 'parse' in JSON && 'stringify' in JSON;
}
function isWorkerSupported() {
    if (!('Worker' in window && 'Blob' in window && 'URL' in window)) {
        return false;
    }
    var blob = new Blob([''], { type: 'text/javascript' });
    var workerURL = URL.createObjectURL(blob);
    var supported;
    var worker;
    try {
        worker = new Worker(workerURL);
        supported = true;
    } catch (e) {
        supported = false;
    }
    if (worker) {
        worker.terminate();
    }
    URL.revokeObjectURL(workerURL);
    return supported;
}
function isUint8ClampedArraySupported() {
    return 'Uint8ClampedArray' in window;
}
function isArrayBufferSupported() {
    return ArrayBuffer.isView;
}
function isCanvasGetImageDataSupported() {
    var canvas = document.createElement('canvas');
    canvas.width = canvas.height = 1;
    var context = canvas.getContext('2d');
    if (!context) {
        return false;
    }
    var imageData = context.getImageData(0, 0, 1, 1);
    return imageData && imageData.width === canvas.width;
}
var isWebGLSupportedCache = {};
function isWebGLSupportedCached(failIfMajorPerformanceCaveat) {
    if (isWebGLSupportedCache[failIfMajorPerformanceCaveat] === undefined) {
        isWebGLSupportedCache[failIfMajorPerformanceCaveat] = isWebGLSupported(failIfMajorPerformanceCaveat);
    }
    return isWebGLSupportedCache[failIfMajorPerformanceCaveat];
}
isSupported.webGLContextAttributes = {
    antialias: false,
    alpha: true,
    stencil: true,
    depth: true
};
function getWebGLContext(failIfMajorPerformanceCaveat) {
    var canvas = document.createElement('canvas');
    var attributes = Object.create(isSupported.webGLContextAttributes);
    attributes.failIfMajorPerformanceCaveat = failIfMajorPerformanceCaveat;
    if (canvas.probablySupportsContext) {
        return canvas.probablySupportsContext('webgl', attributes) || canvas.probablySupportsContext('experimental-webgl', attributes);
    } else if (canvas.supportsContext) {
        return canvas.supportsContext('webgl', attributes) || canvas.supportsContext('experimental-webgl', attributes);
    } else {
        return canvas.getContext('webgl', attributes) || canvas.getContext('experimental-webgl', attributes);
    }
}
function isWebGLSupported(failIfMajorPerformanceCaveat) {
    var gl = getWebGLContext(failIfMajorPerformanceCaveat);
    if (!gl) {
        return false;
    }
    var shader = gl.createShader(gl.VERTEX_SHADER);
    if (!shader || gl.isContextLost()) {
        return false;
    }
    gl.shaderSource(shader, 'void main() {}');
    gl.compileShader(shader);
    return gl.getShaderParameter(shader, gl.COMPILE_STATUS) === true;
}
});

var DOM = {};
DOM.create = function (tagName, className, container) {
    var el = performance.window.document.createElement(tagName);
    if (className !== undefined) {
        el.className = className;
    }
    if (container) {
        container.appendChild(el);
    }
    return el;
};
DOM.createNS = function (namespaceURI, tagName) {
    var el = performance.window.document.createElementNS(namespaceURI, tagName);
    return el;
};
var docStyle = performance.window.document && performance.window.document.documentElement.style;
function testProp(props) {
    if (!docStyle) {
        return props[0];
    }
    for (var i = 0; i < props.length; i++) {
        if (props[i] in docStyle) {
            return props[i];
        }
    }
    return props[0];
}
var selectProp = testProp([
    'userSelect',
    'MozUserSelect',
    'WebkitUserSelect',
    'msUserSelect'
]);
var userSelect;
DOM.disableDrag = function () {
    if (docStyle && selectProp) {
        userSelect = docStyle[selectProp];
        docStyle[selectProp] = 'none';
    }
};
DOM.enableDrag = function () {
    if (docStyle && selectProp) {
        docStyle[selectProp] = userSelect;
    }
};
var transformProp = testProp([
    'transform',
    'WebkitTransform'
]);
DOM.setTransform = function (el, value) {
    el.style[transformProp] = value;
};
var passiveSupported = false;
try {
    var options$1 = Object.defineProperty({}, 'passive', {
        get: function get() {
            passiveSupported = true;
        }
    });
    performance.window.addEventListener('test', options$1, options$1);
    performance.window.removeEventListener('test', options$1, options$1);
} catch (err) {
    passiveSupported = false;
}
DOM.addEventListener = function (target, type, callback, options) {
    if (options === void 0)
        options = {};
    if ('passive' in options && passiveSupported) {
        target.addEventListener(type, callback, options);
    } else {
        target.addEventListener(type, callback, options.capture);
    }
};
DOM.removeEventListener = function (target, type, callback, options) {
    if (options === void 0)
        options = {};
    if ('passive' in options && passiveSupported) {
        target.removeEventListener(type, callback, options);
    } else {
        target.removeEventListener(type, callback, options.capture);
    }
};
var suppressClick = function (e) {
    e.preventDefault();
    e.stopPropagation();
    performance.window.removeEventListener('click', suppressClick, true);
};
DOM.suppressClick = function () {
    performance.window.addEventListener('click', suppressClick, true);
    performance.window.setTimeout(function () {
        performance.window.removeEventListener('click', suppressClick, true);
    }, 0);
};
DOM.mousePos = function (el, e) {
    var rect = el.getBoundingClientRect();
    return new performance.Point(e.clientX - rect.left - el.clientLeft, e.clientY - rect.top - el.clientTop);
};
DOM.touchPos = function (el, touches) {
    var rect = el.getBoundingClientRect(), points = [];
    for (var i = 0; i < touches.length; i++) {
        points.push(new performance.Point(touches[i].clientX - rect.left - el.clientLeft, touches[i].clientY - rect.top - el.clientTop));
    }
    return points;
};
DOM.mouseButton = function (e) {
    if (typeof performance.window.InstallTrigger !== 'undefined' && e.button === 2 && e.ctrlKey && performance.window.navigator.platform.toUpperCase().indexOf('MAC') >= 0) {
        return 0;
    }
    return e.button;
};
DOM.remove = function (node) {
    if (node.parentNode) {
        node.parentNode.removeChild(node);
    }
};

function loadSprite (baseURL, requestManager, callback) {
    var json, image, error;
    var format = performance.browser.devicePixelRatio > 1 ? '@2x' : '';
    var jsonRequest = performance.getJSON(requestManager.transformRequest(requestManager.normalizeSpriteURL(baseURL, format, '.json'), performance.ResourceType.SpriteJSON), function (err, data) {
        jsonRequest = null;
        if (!error) {
            error = err;
            json = data;
            maybeComplete();
        }
    });
    var imageRequest = performance.getImage(requestManager.transformRequest(requestManager.normalizeSpriteURL(baseURL, format, '.png'), performance.ResourceType.SpriteImage), function (err, img) {
        imageRequest = null;
        if (!error) {
            error = err;
            image = img;
            maybeComplete();
        }
    });
    function maybeComplete() {
        if (error) {
            callback(error);
        } else if (json && image) {
            var imageData = performance.browser.getImageData(image);
            var result = {};
            for (var id in json) {
                var ref = json[id];
                var width = ref.width;
                var height = ref.height;
                var x = ref.x;
                var y = ref.y;
                var sdf = ref.sdf;
                var pixelRatio = ref.pixelRatio;
                var stretchX = ref.stretchX;
                var stretchY = ref.stretchY;
                var content = ref.content;
                var data = new performance.RGBAImage({
                    width: width,
                    height: height
                });
                performance.RGBAImage.copy(imageData, data, {
                    x: x,
                    y: y
                }, {
                    x: 0,
                    y: 0
                }, {
                    width: width,
                    height: height
                });
                result[id] = {
                    data: data,
                    pixelRatio: pixelRatio,
                    sdf: sdf,
                    stretchX: stretchX,
                    stretchY: stretchY,
                    content: content
                };
            }
            callback(null, result);
        }
    }
    return {
        cancel: function cancel() {
            if (jsonRequest) {
                jsonRequest.cancel();
                jsonRequest = null;
            }
            if (imageRequest) {
                imageRequest.cancel();
                imageRequest = null;
            }
        }
    };
}

function renderStyleImage(image) {
    var userImage = image.userImage;
    if (userImage && userImage.render) {
        var updated = userImage.render();
        if (updated) {
            image.data.replace(new Uint8Array(userImage.data.buffer));
            return true;
        }
    }
    return false;
}

var padding = 1;
var ImageManager = function (Evented) {
    function ImageManager() {
        Evented.call(this);
        this.images = {};
        this.updatedImages = {};
        this.callbackDispatchedThisFrame = {};
        this.loaded = false;
        this.requestors = [];
        this.patterns = {};
        this.atlasImage = new performance.RGBAImage({
            width: 1,
            height: 1
        });
        this.dirty = true;
    }
    if (Evented)
        ImageManager.__proto__ = Evented;
    ImageManager.prototype = Object.create(Evented && Evented.prototype);
    ImageManager.prototype.constructor = ImageManager;
    ImageManager.prototype.isLoaded = function isLoaded() {
        return this.loaded;
    };
    ImageManager.prototype.setLoaded = function setLoaded(loaded) {
        if (this.loaded === loaded) {
            return;
        }
        this.loaded = loaded;
        if (loaded) {
            for (var i = 0, list = this.requestors; i < list.length; i += 1) {
                var ref = list[i];
                var ids = ref.ids;
                var callback = ref.callback;
                this._notify(ids, callback);
            }
            this.requestors = [];
        }
    };
    ImageManager.prototype.getImage = function getImage(id) {
        return this.images[id];
    };
    ImageManager.prototype.addImage = function addImage(id, image) {
        if (this._validate(id, image)) {
            this.images[id] = image;
        }
    };
    ImageManager.prototype._validate = function _validate(id, image) {
        var valid = true;
        if (!this._validateStretch(image.stretchX, image.data && image.data.width)) {
            this.fire(new performance.ErrorEvent(new Error('Image "' + id + '" has invalid "stretchX" value')));
            valid = false;
        }
        if (!this._validateStretch(image.stretchY, image.data && image.data.height)) {
            this.fire(new performance.ErrorEvent(new Error('Image "' + id + '" has invalid "stretchY" value')));
            valid = false;
        }
        if (!this._validateContent(image.content, image)) {
            this.fire(new performance.ErrorEvent(new Error('Image "' + id + '" has invalid "content" value')));
            valid = false;
        }
        return valid;
    };
    ImageManager.prototype._validateStretch = function _validateStretch(stretch, size) {
        if (!stretch) {
            return true;
        }
        var last = 0;
        for (var i = 0, list = stretch; i < list.length; i += 1) {
            var part = list[i];
            if (part[0] < last || part[1] < part[0] || size < part[1]) {
                return false;
            }
            last = part[1];
        }
        return true;
    };
    ImageManager.prototype._validateContent = function _validateContent(content, image) {
        if (!content) {
            return true;
        }
        if (content.length !== 4) {
            return false;
        }
        if (content[0] < 0 || image.data.width < content[0]) {
            return false;
        }
        if (content[1] < 0 || image.data.height < content[1]) {
            return false;
        }
        if (content[2] < 0 || image.data.width < content[2]) {
            return false;
        }
        if (content[3] < 0 || image.data.height < content[3]) {
            return false;
        }
        if (content[2] < content[0]) {
            return false;
        }
        if (content[3] < content[1]) {
            return false;
        }
        return true;
    };
    ImageManager.prototype.updateImage = function updateImage(id, image) {
        var oldImage = this.images[id];
        image.version = oldImage.version + 1;
        this.images[id] = image;
        this.updatedImages[id] = true;
    };
    ImageManager.prototype.removeImage = function removeImage(id) {
        var image = this.images[id];
        delete this.images[id];
        delete this.patterns[id];
        if (image.userImage && image.userImage.onRemove) {
            image.userImage.onRemove();
        }
    };
    ImageManager.prototype.listImages = function listImages() {
        return Object.keys(this.images);
    };
    ImageManager.prototype.getImages = function getImages(ids, callback) {
        var hasAllDependencies = true;
        if (!this.isLoaded()) {
            for (var i = 0, list = ids; i < list.length; i += 1) {
                var id = list[i];
                if (!this.images[id]) {
                    hasAllDependencies = false;
                }
            }
        }
        if (this.isLoaded() || hasAllDependencies) {
            this._notify(ids, callback);
        } else {
            this.requestors.push({
                ids: ids,
                callback: callback
            });
        }
    };
    ImageManager.prototype._notify = function _notify(ids, callback) {
        var response = {};
        for (var i = 0, list = ids; i < list.length; i += 1) {
            var id = list[i];
            if (!this.images[id]) {
                this.fire(new performance.Event('styleimagemissing', { id: id }));
            }
            var image = this.images[id];
            if (image) {
                response[id] = {
                    data: image.data.clone(),
                    pixelRatio: image.pixelRatio,
                    sdf: image.sdf,
                    version: image.version,
                    stretchX: image.stretchX,
                    stretchY: image.stretchY,
                    content: image.content,
                    hasRenderCallback: Boolean(image.userImage && image.userImage.render)
                };
            } else {
                performance.warnOnce('Image "' + id + '" could not be loaded. Please make sure you have added the image with map.addImage() or a "sprite" property in your style. You can provide missing images by listening for the "styleimagemissing" map event.');
            }
        }
        callback(null, response);
    };
    ImageManager.prototype.getPixelSize = function getPixelSize() {
        var ref = this.atlasImage;
        var width = ref.width;
        var height = ref.height;
        return {
            width: width,
            height: height
        };
    };
    ImageManager.prototype.getPattern = function getPattern(id) {
        var pattern = this.patterns[id];
        var image = this.getImage(id);
        if (!image) {
            return null;
        }
        if (pattern && pattern.position.version === image.version) {
            return pattern.position;
        }
        if (!pattern) {
            var w = image.data.width + padding * 2;
            var h = image.data.height + padding * 2;
            var bin = {
                w: w,
                h: h,
                x: 0,
                y: 0
            };
            var position = new performance.ImagePosition(bin, image);
            this.patterns[id] = {
                bin: bin,
                position: position
            };
        } else {
            pattern.position.version = image.version;
        }
        this._updatePatternAtlas();
        return this.patterns[id].position;
    };
    ImageManager.prototype.bind = function bind(context) {
        var gl = context.gl;
        if (!this.atlasTexture) {
            this.atlasTexture = new performance.Texture(context, this.atlasImage, gl.RGBA);
        } else if (this.dirty) {
            this.atlasTexture.update(this.atlasImage);
            this.dirty = false;
        }
        this.atlasTexture.bind(gl.LINEAR, gl.CLAMP_TO_EDGE);
    };
    ImageManager.prototype._updatePatternAtlas = function _updatePatternAtlas() {
        var bins = [];
        for (var id in this.patterns) {
            bins.push(this.patterns[id].bin);
        }
        var ref = performance.potpack(bins);
        var w = ref.w;
        var h = ref.h;
        var dst = this.atlasImage;
        dst.resize({
            width: w || 1,
            height: h || 1
        });
        for (var id$1 in this.patterns) {
            var ref$1 = this.patterns[id$1];
            var bin = ref$1.bin;
            var x = bin.x + padding;
            var y = bin.y + padding;
            var src = this.images[id$1].data;
            var w$1 = src.width;
            var h$1 = src.height;
            performance.RGBAImage.copy(src, dst, {
                x: 0,
                y: 0
            }, {
                x: x,
                y: y
            }, {
                width: w$1,
                height: h$1
            });
            performance.RGBAImage.copy(src, dst, {
                x: 0,
                y: h$1 - 1
            }, {
                x: x,
                y: y - 1
            }, {
                width: w$1,
                height: 1
            });
            performance.RGBAImage.copy(src, dst, {
                x: 0,
                y: 0
            }, {
                x: x,
                y: y + h$1
            }, {
                width: w$1,
                height: 1
            });
            performance.RGBAImage.copy(src, dst, {
                x: w$1 - 1,
                y: 0
            }, {
                x: x - 1,
                y: y
            }, {
                width: 1,
                height: h$1
            });
            performance.RGBAImage.copy(src, dst, {
                x: 0,
                y: 0
            }, {
                x: x + w$1,
                y: y
            }, {
                width: 1,
                height: h$1
            });
        }
        this.dirty = true;
    };
    ImageManager.prototype.beginFrame = function beginFrame() {
        this.callbackDispatchedThisFrame = {};
    };
    ImageManager.prototype.dispatchRenderCallbacks = function dispatchRenderCallbacks(ids) {
        for (var i = 0, list = ids; i < list.length; i += 1) {
            var id = list[i];
            if (this.callbackDispatchedThisFrame[id]) {
                continue;
            }
            this.callbackDispatchedThisFrame[id] = true;
            var image = this.images[id];
            var updated = renderStyleImage(image);
            if (updated) {
                this.updateImage(id, image);
            }
        }
    };
    return ImageManager;
}(performance.Evented);

function loadGlyphRange (fontstack, range, urlTemplate, requestManager, callback) {
    var begin = range * 256;
    var end = begin + 255;
    var request = requestManager.transformRequest(requestManager.normalizeGlyphsURL(urlTemplate).replace('{fontstack}', fontstack).replace('{range}', begin + '-' + end), performance.ResourceType.Glyphs);
    performance.getArrayBuffer(request, function (err, data) {
        if (err) {
            callback(err);
        } else if (data) {
            var glyphs = {};
            for (var i = 0, list = performance.parseGlyphPBF(data); i < list.length; i += 1) {
                var glyph = list[i];
                glyphs[glyph.id] = glyph;
            }
            callback(null, glyphs);
        }
    });
}

var tinySdf = TinySDF;
var default_1 = TinySDF;
var INF = 100000000000000000000;
function TinySDF(fontSize, buffer, radius, cutoff, fontFamily, fontWeight) {
    this.fontSize = fontSize || 24;
    this.buffer = buffer === undefined ? 3 : buffer;
    this.cutoff = cutoff || 0.25;
    this.fontFamily = fontFamily || 'sans-serif';
    this.fontWeight = fontWeight || 'normal';
    this.radius = radius || 8;
    var size = this.size = this.fontSize + this.buffer * 2;
    var gridSize = size + this.buffer * 2;
    this.canvas = document.createElement('canvas');
    this.canvas.width = this.canvas.height = size;
    this.ctx = this.canvas.getContext('2d');
    this.ctx.font = this.fontWeight + ' ' + this.fontSize + 'px ' + this.fontFamily;
    this.ctx.textAlign = 'left';
    this.ctx.fillStyle = 'black';
    this.gridOuter = new Float64Array(gridSize * gridSize);
    this.gridInner = new Float64Array(gridSize * gridSize);
    this.f = new Float64Array(gridSize);
    this.z = new Float64Array(gridSize + 1);
    this.v = new Uint16Array(gridSize);
    this.useMetrics = this.ctx.measureText('A').actualBoundingBoxLeft !== undefined;
    this.middle = Math.round(size / 2 * (navigator.userAgent.indexOf('Gecko/') >= 0 ? 1.2 : 1));
}
function prepareGrids(imgData, width, height, glyphWidth, glyphHeight, gridOuter, gridInner) {
    gridOuter.fill(INF, 0, width * height);
    gridInner.fill(0, 0, width * height);
    var offset = (width - glyphWidth) / 2;
    for (var y = 0; y < glyphHeight; y++) {
        for (var x = 0; x < glyphWidth; x++) {
            var j = (y + offset) * width + x + offset;
            var a = imgData.data[4 * (y * glyphWidth + x) + 3] / 255;
            if (a === 1) {
                gridOuter[j] = 0;
                gridInner[j] = INF;
            } else if (a === 0) {
                gridOuter[j] = INF;
                gridInner[j] = 0;
            } else {
                var b = Math.max(0, 0.5 - a);
                var c = Math.max(0, a - 0.5);
                gridOuter[j] = b * b;
                gridInner[j] = c * c;
            }
        }
    }
}
function extractAlpha(alphaChannel, width, height, gridOuter, gridInner, radius, cutoff) {
    for (var i = 0; i < width * height; i++) {
        var d = Math.sqrt(gridOuter[i]) - Math.sqrt(gridInner[i]);
        alphaChannel[i] = Math.round(255 - 255 * (d / radius + cutoff));
    }
}
TinySDF.prototype._draw = function (char, getMetrics) {
    var textMetrics = this.ctx.measureText(char);
    var advance = textMetrics.width;
    var doubleBuffer = 2 * this.buffer;
    var width, glyphWidth, height, glyphHeight, top;
    var imgTop, imgLeft, baselinePosition;
    if (getMetrics && this.useMetrics) {
        top = Math.floor(textMetrics.actualBoundingBoxAscent);
        baselinePosition = this.buffer + Math.ceil(textMetrics.actualBoundingBoxAscent);
        imgTop = this.buffer;
        imgLeft = this.buffer;
        glyphWidth = Math.min(this.size, Math.ceil(textMetrics.actualBoundingBoxRight - textMetrics.actualBoundingBoxLeft));
        glyphHeight = Math.min(this.size - imgTop, Math.ceil(textMetrics.actualBoundingBoxAscent + textMetrics.actualBoundingBoxDescent));
        width = glyphWidth + doubleBuffer;
        height = glyphHeight + doubleBuffer;
        this.ctx.textBaseline = 'alphabetic';
    } else {
        width = glyphWidth = this.size;
        height = glyphHeight = this.size;
        top = 19 * this.fontSize / 24;
        imgTop = imgLeft = 0;
        baselinePosition = this.middle;
        this.ctx.textBaseline = 'middle';
    }
    var imgData;
    if (glyphWidth && glyphHeight) {
        this.ctx.clearRect(imgLeft, imgTop, glyphWidth, glyphHeight);
        this.ctx.fillText(char, this.buffer, baselinePosition);
        imgData = this.ctx.getImageData(imgLeft, imgTop, glyphWidth, glyphHeight);
    }
    var alphaChannel = new Uint8ClampedArray(width * height);
    prepareGrids(imgData, width, height, glyphWidth, glyphHeight, this.gridOuter, this.gridInner);
    edt(this.gridOuter, width, height, this.f, this.v, this.z);
    edt(this.gridInner, width, height, this.f, this.v, this.z);
    extractAlpha(alphaChannel, width, height, this.gridOuter, this.gridInner, this.radius, this.cutoff);
    return {
        data: alphaChannel,
        metrics: {
            width: glyphWidth,
            height: glyphHeight,
            sdfWidth: width,
            sdfHeight: height,
            top: top,
            left: 0,
            advance: advance
        }
    };
};
TinySDF.prototype.draw = function (char) {
    return this._draw(char, false).data;
};
TinySDF.prototype.drawWithMetrics = function (char) {
    return this._draw(char, true);
};
function edt(data, width, height, f, v, z) {
    for (var x = 0; x < width; x++) {
        edt1d(data, x, width, height, f, v, z);
    }
    for (var y = 0; y < height; y++) {
        edt1d(data, y * width, 1, width, f, v, z);
    }
}
function edt1d(grid, offset, stride, length, f, v, z) {
    var q, k, s, r;
    v[0] = 0;
    z[0] = -INF;
    z[1] = INF;
    for (q = 0; q < length; q++) {
        f[q] = grid[offset + q * stride];
    }
    for (q = 1, k = 0, s = 0; q < length; q++) {
        do {
            r = v[k];
            s = (f[q] - f[r] + q * q - r * r) / (q - r) / 2;
        } while (s <= z[k] && --k > -1);
        k++;
        v[k] = q;
        z[k] = s;
        z[k + 1] = INF;
    }
    for (q = 0, k = 0; q < length; q++) {
        while (z[k + 1] < q) {
            k++;
        }
        r = v[k];
        grid[offset + q * stride] = f[r] + (q - r) * (q - r);
    }
}
tinySdf.default = default_1;

var GlyphManager = function GlyphManager(requestManager, localIdeographFontFamily) {
    this.requestManager = requestManager;
    this.localIdeographFontFamily = localIdeographFontFamily;
    this.entries = {};
};
GlyphManager.prototype.setURL = function setURL(url) {
    this.url = url;
};
GlyphManager.prototype.getGlyphs = function getGlyphs(glyphs, callback) {
    var this$1 = this;
    var all = [];
    for (var stack in glyphs) {
        for (var i = 0, list = glyphs[stack]; i < list.length; i += 1) {
            var id = list[i];
            all.push({
                stack: stack,
                id: id
            });
        }
    }
    performance.asyncAll(all, function (ref, callback) {
        var stack = ref.stack;
        var id = ref.id;
        var entry = this$1.entries[stack];
        if (!entry) {
            entry = this$1.entries[stack] = {
                glyphs: {},
                requests: {},
                ranges: {}
            };
        }
        var glyph = entry.glyphs[id];
        if (glyph !== undefined) {
            callback(null, {
                stack: stack,
                id: id,
                glyph: glyph
            });
            return;
        }
        glyph = this$1._tinySDF(entry, stack, id);
        if (glyph) {
            entry.glyphs[id] = glyph;
            callback(null, {
                stack: stack,
                id: id,
                glyph: glyph
            });
            return;
        }
        var range = Math.floor(id / 256);
        if (range * 256 > 65535) {
            callback(new Error('glyphs > 65535 not supported'));
            return;
        }
        if (entry.ranges[range]) {
            callback(null, {
                stack: stack,
                id: id,
                glyph: glyph
            });
            return;
        }
        var requests = entry.requests[range];
        if (!requests) {
            requests = entry.requests[range] = [];
            GlyphManager.loadGlyphRange(stack, range, this$1.url, this$1.requestManager, function (err, response) {
                if (response) {
                    for (var id in response) {
                        if (!this$1._doesCharSupportLocalGlyph(+id)) {
                            entry.glyphs[+id] = response[+id];
                        }
                    }
                    entry.ranges[range] = true;
                }
                for (var i = 0, list = requests; i < list.length; i += 1) {
                    var cb = list[i];
                    cb(err, response);
                }
                delete entry.requests[range];
            });
        }
        requests.push(function (err, result) {
            if (err) {
                callback(err);
            } else if (result) {
                callback(null, {
                    stack: stack,
                    id: id,
                    glyph: result[id] || null
                });
            }
        });
    }, function (err, glyphs) {
        if (err) {
            callback(err);
        } else if (glyphs) {
            var result = {};
            for (var i = 0, list = glyphs; i < list.length; i += 1) {
                var ref = list[i];
                var stack = ref.stack;
                var id = ref.id;
                var glyph = ref.glyph;
                (result[stack] || (result[stack] = {}))[id] = glyph && {
                    id: glyph.id,
                    bitmap: glyph.bitmap.clone(),
                    metrics: glyph.metrics
                };
            }
            callback(null, result);
        }
    });
};
GlyphManager.prototype._doesCharSupportLocalGlyph = function _doesCharSupportLocalGlyph(id) {
    return !!this.localIdeographFontFamily && (performance.isChar['CJK Unified Ideographs'](id) || performance.isChar['Hangul Syllables'](id) || performance.isChar['Hiragana'](id) || performance.isChar['Katakana'](id));
};
GlyphManager.prototype._tinySDF = function _tinySDF(entry, stack, id) {
    var family = this.localIdeographFontFamily;
    if (!family) {
        return;
    }
    if (!this._doesCharSupportLocalGlyph(id)) {
        return;
    }
    var tinySDF = entry.tinySDF;
    if (!tinySDF) {
        var fontWeight = '400';
        if (/bold/i.test(stack)) {
            fontWeight = '900';
        } else if (/medium/i.test(stack)) {
            fontWeight = '500';
        } else if (/light/i.test(stack)) {
            fontWeight = '200';
        }
        tinySDF = entry.tinySDF = new GlyphManager.TinySDF(24, 3, 8, 0.25, family, fontWeight);
    }
    return {
        id: id,
        bitmap: new performance.AlphaImage({
            width: 30,
            height: 30
        }, tinySDF.draw(String.fromCharCode(id))),
        metrics: {
            width: 24,
            height: 24,
            left: 0,
            top: -8,
            advance: 24
        }
    };
};
GlyphManager.loadGlyphRange = loadGlyphRange;
GlyphManager.TinySDF = tinySdf;

var LightPositionProperty = function LightPositionProperty() {
    this.specification = performance.styleSpec.light.position;
};
LightPositionProperty.prototype.possiblyEvaluate = function possiblyEvaluate(value, parameters) {
    return performance.sphericalToCartesian(value.expression.evaluate(parameters));
};
LightPositionProperty.prototype.interpolate = function interpolate$1(a, b, t) {
    return {
        x: performance.number(a.x, b.x, t),
        y: performance.number(a.y, b.y, t),
        z: performance.number(a.z, b.z, t)
    };
};
var properties = new performance.Properties({
    'anchor': new performance.DataConstantProperty(performance.styleSpec.light.anchor),
    'position': new LightPositionProperty(),
    'color': new performance.DataConstantProperty(performance.styleSpec.light.color),
    'intensity': new performance.DataConstantProperty(performance.styleSpec.light.intensity)
});
var TRANSITION_SUFFIX = '-transition';
var Light = function (Evented) {
    function Light(lightOptions) {
        Evented.call(this);
        this._transitionable = new performance.Transitionable(properties);
        this.setLight(lightOptions);
        this._transitioning = this._transitionable.untransitioned();
    }
    if (Evented)
        Light.__proto__ = Evented;
    Light.prototype = Object.create(Evented && Evented.prototype);
    Light.prototype.constructor = Light;
    Light.prototype.getLight = function getLight() {
        return this._transitionable.serialize();
    };
    Light.prototype.setLight = function setLight(light, options) {
        if (options === void 0)
            options = {};
        if (this._validate(performance.validateLight, light, options)) {
            return;
        }
        for (var name in light) {
            var value = light[name];
            if (performance.endsWith(name, TRANSITION_SUFFIX)) {
                this._transitionable.setTransition(name.slice(0, -TRANSITION_SUFFIX.length), value);
            } else {
                this._transitionable.setValue(name, value);
            }
        }
    };
    Light.prototype.updateTransitions = function updateTransitions(parameters) {
        this._transitioning = this._transitionable.transitioned(parameters, this._transitioning);
    };
    Light.prototype.hasTransition = function hasTransition() {
        return this._transitioning.hasTransition();
    };
    Light.prototype.recalculate = function recalculate(parameters) {
        this.properties = this._transitioning.possiblyEvaluate(parameters);
    };
    Light.prototype._validate = function _validate(validate, value, options) {
        if (options && options.validate === false) {
            return false;
        }
        return performance.emitValidationErrors(this, validate.call(performance.validateStyle, performance.extend({
            value: value,
            style: {
                glyphs: true,
                sprite: true
            },
            styleSpec: performance.styleSpec
        })));
    };
    return Light;
}(performance.Evented);

var LineAtlas = function LineAtlas(width, height) {
    this.width = width;
    this.height = height;
    this.nextRow = 0;
    this.data = new Uint8Array(this.width * this.height);
    this.dashEntry = {};
};
LineAtlas.prototype.getDash = function getDash(dasharray, round) {
    var key = dasharray.join(',') + String(round);
    if (!this.dashEntry[key]) {
        this.dashEntry[key] = this.addDash(dasharray, round);
    }
    return this.dashEntry[key];
};
LineAtlas.prototype.getDashRanges = function getDashRanges(dasharray, lineAtlasWidth, stretch) {
    var oddDashArray = dasharray.length % 2 === 1;
    var ranges = [];
    var left = oddDashArray ? -dasharray[dasharray.length - 1] * stretch : 0;
    var right = dasharray[0] * stretch;
    var isDash = true;
    ranges.push({
        left: left,
        right: right,
        isDash: isDash,
        zeroLength: dasharray[0] === 0
    });
    var currentDashLength = dasharray[0];
    for (var i = 1; i < dasharray.length; i++) {
        isDash = !isDash;
        var dashLength = dasharray[i];
        left = currentDashLength * stretch;
        currentDashLength += dashLength;
        right = currentDashLength * stretch;
        ranges.push({
            left: left,
            right: right,
            isDash: isDash,
            zeroLength: dashLength === 0
        });
    }
    return ranges;
};
LineAtlas.prototype.addRoundDash = function addRoundDash(ranges, stretch, n) {
    var halfStretch = stretch / 2;
    for (var y = -n; y <= n; y++) {
        var row = this.nextRow + n + y;
        var index = this.width * row;
        var currIndex = 0;
        var range = ranges[currIndex];
        for (var x = 0; x < this.width; x++) {
            if (x / range.right > 1) {
                range = ranges[++currIndex];
            }
            var distLeft = Math.abs(x - range.left);
            var distRight = Math.abs(x - range.right);
            var minDist = Math.min(distLeft, distRight);
            var signedDistance = void 0;
            var distMiddle = y / n * (halfStretch + 1);
            if (range.isDash) {
                var distEdge = halfStretch - Math.abs(distMiddle);
                signedDistance = Math.sqrt(minDist * minDist + distEdge * distEdge);
            } else {
                signedDistance = halfStretch - Math.sqrt(minDist * minDist + distMiddle * distMiddle);
            }
            this.data[index + x] = Math.max(0, Math.min(255, signedDistance + 128));
        }
    }
};
LineAtlas.prototype.addRegularDash = function addRegularDash(ranges) {
    for (var i = ranges.length - 1; i >= 0; --i) {
        var part = ranges[i];
        var next = ranges[i + 1];
        if (part.zeroLength) {
            ranges.splice(i, 1);
        } else if (next && next.isDash === part.isDash) {
            next.left = part.left;
            ranges.splice(i, 1);
        }
    }
    var first = ranges[0];
    var last = ranges[ranges.length - 1];
    if (first.isDash === last.isDash) {
        first.left = last.left - this.width;
        last.right = first.right + this.width;
    }
    var index = this.width * this.nextRow;
    var currIndex = 0;
    var range = ranges[currIndex];
    for (var x = 0; x < this.width; x++) {
        if (x / range.right > 1) {
            range = ranges[++currIndex];
        }
        var distLeft = Math.abs(x - range.left);
        var distRight = Math.abs(x - range.right);
        var minDist = Math.min(distLeft, distRight);
        var signedDistance = range.isDash ? minDist : -minDist;
        this.data[index + x] = Math.max(0, Math.min(255, signedDistance + 128));
    }
};
LineAtlas.prototype.addDash = function addDash(dasharray, round) {
    var n = round ? 7 : 0;
    var height = 2 * n + 1;
    if (this.nextRow + height > this.height) {
        performance.warnOnce('LineAtlas out of space');
        return null;
    }
    var length = 0;
    for (var i = 0; i < dasharray.length; i++) {
        length += dasharray[i];
    }
    if (length !== 0) {
        var stretch = this.width / length;
        var ranges = this.getDashRanges(dasharray, this.width, stretch);
        if (round) {
            this.addRoundDash(ranges, stretch, n);
        } else {
            this.addRegularDash(ranges);
        }
    }
    var dashEntry = {
        y: (this.nextRow + n + 0.5) / this.height,
        height: 2 * n / this.height,
        width: length
    };
    this.nextRow += height;
    this.dirty = true;
    return dashEntry;
};
LineAtlas.prototype.bind = function bind(context) {
    var gl = context.gl;
    if (!this.texture) {
        this.texture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, this.texture);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.ALPHA, this.width, this.height, 0, gl.ALPHA, gl.UNSIGNED_BYTE, this.data);
    } else {
        gl.bindTexture(gl.TEXTURE_2D, this.texture);
        if (this.dirty) {
            this.dirty = false;
            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, this.width, this.height, gl.ALPHA, gl.UNSIGNED_BYTE, this.data);
        }
    }
};

var Dispatcher = function Dispatcher(workerPool, parent) {
    this.workerPool = workerPool;
    this.actors = [];
    this.currentActor = 0;
    this.id = performance.uniqueId();
    var workers = this.workerPool.acquire(this.id);
    for (var i = 0; i < workers.length; i++) {
        var worker = workers[i];
        var actor = new Dispatcher.Actor(worker, parent, this.id);
        actor.name = 'Worker ' + i;
        this.actors.push(actor);
    }
};
Dispatcher.prototype.broadcast = function broadcast(type, data, cb) {
    cb = cb || function () {
    };
    performance.asyncAll(this.actors, function (actor, done) {
        actor.send(type, data, done);
    }, cb);
};
Dispatcher.prototype.getActor = function getActor() {
    this.currentActor = (this.currentActor + 1) % this.actors.length;
    return this.actors[this.currentActor];
};
Dispatcher.prototype.remove = function remove() {
    this.actors.forEach(function (actor) {
        actor.remove();
    });
    this.actors = [];
    this.workerPool.release(this.id);
};
Dispatcher.Actor = performance.Actor;

function loadTileJSON (options, requestManager, callback) {
    var loaded = function (err, tileJSON) {
        if (err) {
            return callback(err);
        } else if (tileJSON) {
            var result = performance.pick(performance.extend(tileJSON, options), [
                'tiles',
                'minzoom',
                'maxzoom',
                'attribution',
                'mapbox_logo',
                'bounds',
                'scheme',
                'tileSize',
                'encoding'
            ]);
            if (tileJSON.vector_layers) {
                result.vectorLayers = tileJSON.vector_layers;
                result.vectorLayerIds = result.vectorLayers.map(function (layer) {
                    return layer.id;
                });
            }
            result.tiles = requestManager.canonicalizeTileset(result, options.url);
            callback(null, result);
        }
    };
    if (options.url) {
        return performance.getJSON(requestManager.transformRequest(requestManager.normalizeSourceURL(options.url), performance.ResourceType.Source), loaded);
    } else {
        return performance.browser.frame(function () {
            return loaded(null, options);
        });
    }
}

var TileBounds = function TileBounds(bounds, minzoom, maxzoom) {
    this.bounds = performance.LngLatBounds.convert(this.validateBounds(bounds));
    this.minzoom = minzoom || 0;
    this.maxzoom = maxzoom || 24;
};
TileBounds.prototype.validateBounds = function validateBounds(bounds) {
    if (!Array.isArray(bounds) || bounds.length !== 4) {
        return [
            -180,
            -90,
            180,
            90
        ];
    }
    return [
        Math.max(-180, bounds[0]),
        Math.max(-90, bounds[1]),
        Math.min(180, bounds[2]),
        Math.min(90, bounds[3])
    ];
};
TileBounds.prototype.contains = function contains(tileID) {
    var worldSize = Math.pow(2, tileID.z);
    var level = {
        minX: Math.floor(performance.mercatorXfromLng(this.bounds.getWest()) * worldSize),
        minY: Math.floor(performance.mercatorYfromLat(this.bounds.getNorth()) * worldSize),
        maxX: Math.ceil(performance.mercatorXfromLng(this.bounds.getEast()) * worldSize),
        maxY: Math.ceil(performance.mercatorYfromLat(this.bounds.getSouth()) * worldSize)
    };
    var hit = tileID.x >= level.minX && tileID.x < level.maxX && tileID.y >= level.minY && tileID.y < level.maxY;
    return hit;
};

var VectorTileSource = function (Evented) {
    function VectorTileSource(id, options, dispatcher, eventedParent) {
        Evented.call(this);
        this.id = id;
        this.dispatcher = dispatcher;
        this.type = 'vector';
        this.minzoom = 0;
        this.maxzoom = 22;
        this.scheme = 'xyz';
        this.tileSize = 512;
        this.reparseOverscaled = true;
        this.isTileClipped = true;
        this._loaded = false;
        performance.extend(this, performance.pick(options, [
            'url',
            'scheme',
            'tileSize',
            'promoteId'
        ]));
        this._options = performance.extend({ type: 'vector' }, options);
        this._collectResourceTiming = options.collectResourceTiming;
        if (this.tileSize !== 512) {
            throw new Error('vector tile sources must have a tileSize of 512');
        }
        this.setEventedParent(eventedParent);
    }
    if (Evented)
        VectorTileSource.__proto__ = Evented;
    VectorTileSource.prototype = Object.create(Evented && Evented.prototype);
    VectorTileSource.prototype.constructor = VectorTileSource;
    VectorTileSource.prototype.load = function load() {
        var this$1 = this;
        this._loaded = false;
        this.fire(new performance.Event('dataloading', { dataType: 'source' }));
        this._tileJSONRequest = loadTileJSON(this._options, this.map._requestManager, function (err, tileJSON) {
            this$1._tileJSONRequest = null;
            this$1._loaded = true;
            if (err) {
                this$1.fire(new performance.ErrorEvent(err));
            } else if (tileJSON) {
                performance.extend(this$1, tileJSON);
                if (tileJSON.bounds) {
                    this$1.tileBounds = new TileBounds(tileJSON.bounds, this$1.minzoom, this$1.maxzoom);
                }
                performance.postTurnstileEvent(tileJSON.tiles, this$1.map._requestManager._customAccessToken);
                performance.postMapLoadEvent(tileJSON.tiles, this$1.map._getMapId(), this$1.map._requestManager._skuToken, this$1.map._requestManager._customAccessToken);
                this$1.fire(new performance.Event('data', {
                    dataType: 'source',
                    sourceDataType: 'metadata'
                }));
                this$1.fire(new performance.Event('data', {
                    dataType: 'source',
                    sourceDataType: 'content'
                }));
            }
        });
    };
    VectorTileSource.prototype.loaded = function loaded() {
        return this._loaded;
    };
    VectorTileSource.prototype.hasTile = function hasTile(tileID) {
        return !this.tileBounds || this.tileBounds.contains(tileID.canonical);
    };
    VectorTileSource.prototype.onAdd = function onAdd(map) {
        this.map = map;
        this.load();
    };
    VectorTileSource.prototype.setSourceProperty = function setSourceProperty(callback) {
        if (this._tileJSONRequest) {
            this._tileJSONRequest.cancel();
        }
        callback();
        var sourceCache = this.map.style.sourceCaches[this.id];
        sourceCache.clearTiles();
        this.load();
    };
    VectorTileSource.prototype.setTiles = function setTiles(tiles) {
        var this$1 = this;
        this.setSourceProperty(function () {
            this$1._options.tiles = tiles;
        });
        return this;
    };
    VectorTileSource.prototype.setUrl = function setUrl(url) {
        var this$1 = this;
        this.setSourceProperty(function () {
            this$1.url = url;
            this$1._options.url = url;
        });
        return this;
    };
    VectorTileSource.prototype.onRemove = function onRemove() {
        if (this._tileJSONRequest) {
            this._tileJSONRequest.cancel();
            this._tileJSONRequest = null;
        }
    };
    VectorTileSource.prototype.serialize = function serialize() {
        return performance.extend({}, this._options);
    };
    VectorTileSource.prototype.loadTile = function loadTile(tile, callback) {
        var url = this.map._requestManager.normalizeTileURL(tile.tileID.canonical.url(this.tiles, this.scheme));
        var params = {
            request: this.map._requestManager.transformRequest(url, performance.ResourceType.Tile),
            uid: tile.uid,
            tileID: tile.tileID,
            zoom: tile.tileID.overscaledZ,
            tileSize: this.tileSize * tile.tileID.overscaleFactor(),
            type: this.type,
            source: this.id,
            pixelRatio: performance.browser.devicePixelRatio,
            showCollisionBoxes: this.map.showCollisionBoxes,
            promoteId: this.promoteId
        };
        params.request.collectResourceTiming = this._collectResourceTiming;
        if (!tile.actor || tile.state === 'expired') {
            tile.actor = this.dispatcher.getActor();
            tile.request = tile.actor.send('loadTile', params, done.bind(this));
        } else if (tile.state === 'loading') {
            tile.reloadCallback = callback;
        } else {
            tile.request = tile.actor.send('reloadTile', params, done.bind(this));
        }
        function done(err, data) {
            delete tile.request;
            if (tile.aborted) {
                return callback(null);
            }
            if (err && err.status !== 404) {
                return callback(err);
            }
            if (data && data.resourceTiming) {
                tile.resourceTiming = data.resourceTiming;
            }
            if (this.map._refreshExpiredTiles && data) {
                tile.setExpiryData(data);
            }
            tile.loadVectorData(data, this.map.painter);
            performance.cacheEntryPossiblyAdded(this.dispatcher);
            callback(null);
            if (tile.reloadCallback) {
                this.loadTile(tile, tile.reloadCallback);
                tile.reloadCallback = null;
            }
        }
    };
    VectorTileSource.prototype.abortTile = function abortTile(tile) {
        if (tile.request) {
            tile.request.cancel();
            delete tile.request;
        }
        if (tile.actor) {
            tile.actor.send('abortTile', {
                uid: tile.uid,
                type: this.type,
                source: this.id
            }, undefined);
        }
    };
    VectorTileSource.prototype.unloadTile = function unloadTile(tile) {
        tile.unloadVectorData();
        if (tile.actor) {
            tile.actor.send('removeTile', {
                uid: tile.uid,
                type: this.type,
                source: this.id
            }, undefined);
        }
    };
    VectorTileSource.prototype.hasTransition = function hasTransition() {
        return false;
    };
    return VectorTileSource;
}(performance.Evented);

var RasterTileSource = function (Evented) {
    function RasterTileSource(id, options, dispatcher, eventedParent) {
        Evented.call(this);
        this.id = id;
        this.dispatcher = dispatcher;
        this.setEventedParent(eventedParent);
        this.type = 'raster';
        this.minzoom = 0;
        this.maxzoom = 22;
        this.roundZoom = true;
        this.scheme = 'xyz';
        this.tileSize = 512;
        this._loaded = false;
        this._options = performance.extend({ type: 'raster' }, options);
        performance.extend(this, performance.pick(options, [
            'url',
            'scheme',
            'tileSize'
        ]));
    }
    if (Evented)
        RasterTileSource.__proto__ = Evented;
    RasterTileSource.prototype = Object.create(Evented && Evented.prototype);
    RasterTileSource.prototype.constructor = RasterTileSource;
    RasterTileSource.prototype.load = function load() {
        var this$1 = this;
        this._loaded = false;
        this.fire(new performance.Event('dataloading', { dataType: 'source' }));
        this._tileJSONRequest = loadTileJSON(this._options, this.map._requestManager, function (err, tileJSON) {
            this$1._tileJSONRequest = null;
            this$1._loaded = true;
            if (err) {
                this$1.fire(new performance.ErrorEvent(err));
            } else if (tileJSON) {
                performance.extend(this$1, tileJSON);
                if (tileJSON.bounds) {
                    this$1.tileBounds = new TileBounds(tileJSON.bounds, this$1.minzoom, this$1.maxzoom);
                }
                performance.postTurnstileEvent(tileJSON.tiles);
                performance.postMapLoadEvent(tileJSON.tiles, this$1.map._getMapId(), this$1.map._requestManager._skuToken);
                this$1.fire(new performance.Event('data', {
                    dataType: 'source',
                    sourceDataType: 'metadata'
                }));
                this$1.fire(new performance.Event('data', {
                    dataType: 'source',
                    sourceDataType: 'content'
                }));
            }
        });
    };
    RasterTileSource.prototype.loaded = function loaded() {
        return this._loaded;
    };
    RasterTileSource.prototype.onAdd = function onAdd(map) {
        this.map = map;
        this.load();
    };
    RasterTileSource.prototype.onRemove = function onRemove() {
        if (this._tileJSONRequest) {
            this._tileJSONRequest.cancel();
            this._tileJSONRequest = null;
        }
    };
    RasterTileSource.prototype.serialize = function serialize() {
        return performance.extend({}, this._options);
    };
    RasterTileSource.prototype.hasTile = function hasTile(tileID) {
        return !this.tileBounds || this.tileBounds.contains(tileID.canonical);
    };
    RasterTileSource.prototype.loadTile = function loadTile(tile, callback) {
        var this$1 = this;
        var url = this.map._requestManager.normalizeTileURL(tile.tileID.canonical.url(this.tiles, this.scheme), this.tileSize);
        tile.request = performance.getImage(this.map._requestManager.transformRequest(url, performance.ResourceType.Tile), function (err, img) {
            delete tile.request;
            if (tile.aborted) {
                tile.state = 'unloaded';
                callback(null);
            } else if (err) {
                tile.state = 'errored';
                callback(err);
            } else if (img) {
                if (this$1.map._refreshExpiredTiles) {
                    tile.setExpiryData(img);
                }
                delete img.cacheControl;
                delete img.expires;
                var context = this$1.map.painter.context;
                var gl = context.gl;
                tile.texture = this$1.map.painter.getTileTexture(img.width);
                if (tile.texture) {
                    tile.texture.update(img, { useMipmap: true });
                } else {
                    tile.texture = new performance.Texture(context, img, gl.RGBA, { useMipmap: true });
                    tile.texture.bind(gl.LINEAR, gl.CLAMP_TO_EDGE, gl.LINEAR_MIPMAP_NEAREST);
                    if (context.extTextureFilterAnisotropic) {
                        gl.texParameterf(gl.TEXTURE_2D, context.extTextureFilterAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT, context.extTextureFilterAnisotropicMax);
                    }
                }
                tile.state = 'loaded';
                performance.cacheEntryPossiblyAdded(this$1.dispatcher);
                callback(null);
            }
        });
    };
    RasterTileSource.prototype.abortTile = function abortTile(tile, callback) {
        if (tile.request) {
            tile.request.cancel();
            delete tile.request;
        }
        callback();
    };
    RasterTileSource.prototype.unloadTile = function unloadTile(tile, callback) {
        if (tile.texture) {
            this.map.painter.saveTileTexture(tile.texture);
        }
        callback();
    };
    RasterTileSource.prototype.hasTransition = function hasTransition() {
        return false;
    };
    return RasterTileSource;
}(performance.Evented);

var RasterDEMTileSource = function (RasterTileSource) {
    function RasterDEMTileSource(id, options, dispatcher, eventedParent) {
        RasterTileSource.call(this, id, options, dispatcher, eventedParent);
        this.type = 'raster-dem';
        this.maxzoom = 22;
        this._options = performance.extend({ type: 'raster-dem' }, options);
        this.encoding = options.encoding || 'mapbox';
    }
    if (RasterTileSource)
        RasterDEMTileSource.__proto__ = RasterTileSource;
    RasterDEMTileSource.prototype = Object.create(RasterTileSource && RasterTileSource.prototype);
    RasterDEMTileSource.prototype.constructor = RasterDEMTileSource;
    RasterDEMTileSource.prototype.serialize = function serialize() {
        return {
            type: 'raster-dem',
            url: this.url,
            tileSize: this.tileSize,
            tiles: this.tiles,
            bounds: this.bounds,
            encoding: this.encoding
        };
    };
    RasterDEMTileSource.prototype.loadTile = function loadTile(tile, callback) {
        var url = this.map._requestManager.normalizeTileURL(tile.tileID.canonical.url(this.tiles, this.scheme), this.tileSize);
        tile.request = performance.getImage(this.map._requestManager.transformRequest(url, performance.ResourceType.Tile), imageLoaded.bind(this));
        tile.neighboringTiles = this._getNeighboringTiles(tile.tileID);
        function imageLoaded(err, img) {
            delete tile.request;
            if (tile.aborted) {
                tile.state = 'unloaded';
                callback(null);
            } else if (err) {
                tile.state = 'errored';
                callback(err);
            } else if (img) {
                if (this.map._refreshExpiredTiles) {
                    tile.setExpiryData(img);
                }
                delete img.cacheControl;
                delete img.expires;
                var transfer = performance.window.ImageBitmap && img instanceof performance.window.ImageBitmap && performance.offscreenCanvasSupported();
                var rawImageData = transfer ? img : performance.browser.getImageData(img, 1);
                var params = {
                    uid: tile.uid,
                    coord: tile.tileID,
                    source: this.id,
                    rawImageData: rawImageData,
                    encoding: this.encoding
                };
                if (!tile.actor || tile.state === 'expired') {
                    tile.actor = this.dispatcher.getActor();
                    tile.actor.send('loadDEMTile', params, done.bind(this));
                }
            }
        }
        function done(err, dem) {
            if (err) {
                tile.state = 'errored';
                callback(err);
            }
            if (dem) {
                tile.dem = dem;
                tile.needsHillshadePrepare = true;
                tile.state = 'loaded';
                callback(null);
            }
        }
    };
    RasterDEMTileSource.prototype._getNeighboringTiles = function _getNeighboringTiles(tileID) {
        var canonical = tileID.canonical;
        var dim = Math.pow(2, canonical.z);
        var px = (canonical.x - 1 + dim) % dim;
        var pxw = canonical.x === 0 ? tileID.wrap - 1 : tileID.wrap;
        var nx = (canonical.x + 1 + dim) % dim;
        var nxw = canonical.x + 1 === dim ? tileID.wrap + 1 : tileID.wrap;
        var neighboringTiles = {};
        neighboringTiles[new performance.OverscaledTileID(tileID.overscaledZ, pxw, canonical.z, px, canonical.y).key] = { backfilled: false };
        neighboringTiles[new performance.OverscaledTileID(tileID.overscaledZ, nxw, canonical.z, nx, canonical.y).key] = { backfilled: false };
        if (canonical.y > 0) {
            neighboringTiles[new performance.OverscaledTileID(tileID.overscaledZ, pxw, canonical.z, px, canonical.y - 1).key] = { backfilled: false };
            neighboringTiles[new performance.OverscaledTileID(tileID.overscaledZ, tileID.wrap, canonical.z, canonical.x, canonical.y - 1).key] = { backfilled: false };
            neighboringTiles[new performance.OverscaledTileID(tileID.overscaledZ, nxw, canonical.z, nx, canonical.y - 1).key] = { backfilled: false };
        }
        if (canonical.y + 1 < dim) {
            neighboringTiles[new performance.OverscaledTileID(tileID.overscaledZ, pxw, canonical.z, px, canonical.y + 1).key] = { backfilled: false };
            neighboringTiles[new performance.OverscaledTileID(tileID.overscaledZ, tileID.wrap, canonical.z, canonical.x, canonical.y + 1).key] = { backfilled: false };
            neighboringTiles[new performance.OverscaledTileID(tileID.overscaledZ, nxw, canonical.z, nx, canonical.y + 1).key] = { backfilled: false };
        }
        return neighboringTiles;
    };
    RasterDEMTileSource.prototype.unloadTile = function unloadTile(tile) {
        if (tile.demTexture) {
            this.map.painter.saveTileTexture(tile.demTexture);
        }
        if (tile.fbo) {
            tile.fbo.destroy();
            delete tile.fbo;
        }
        if (tile.dem) {
            delete tile.dem;
        }
        delete tile.neighboringTiles;
        tile.state = 'unloaded';
        if (tile.actor) {
            tile.actor.send('removeDEMTile', {
                uid: tile.uid,
                source: this.id
            });
        }
    };
    return RasterDEMTileSource;
}(RasterTileSource);

var GeoJSONSource = function (Evented) {
    function GeoJSONSource(id, options, dispatcher, eventedParent) {
        Evented.call(this);
        this.id = id;
        this.type = 'geojson';
        this.minzoom = 0;
        this.maxzoom = 18;
        this.tileSize = 512;
        this.isTileClipped = true;
        this.reparseOverscaled = true;
        this._removed = false;
        this._loaded = false;
        this.actor = dispatcher.getActor();
        this.setEventedParent(eventedParent);
        this._data = options.data;
        this._options = performance.extend({}, options);
        this._collectResourceTiming = options.collectResourceTiming;
        this._resourceTiming = [];
        if (options.maxzoom !== undefined) {
            this.maxzoom = options.maxzoom;
        }
        if (options.type) {
            this.type = options.type;
        }
        if (options.attribution) {
            this.attribution = options.attribution;
        }
        this.promoteId = options.promoteId;
        var scale = performance.EXTENT / this.tileSize;
        this.workerOptions = performance.extend({
            source: this.id,
            cluster: options.cluster || false,
            geojsonVtOptions: {
                buffer: (options.buffer !== undefined ? options.buffer : 128) * scale,
                tolerance: (options.tolerance !== undefined ? options.tolerance : 0.375) * scale,
                extent: performance.EXTENT,
                maxZoom: this.maxzoom,
                lineMetrics: options.lineMetrics || false,
                generateId: options.generateId || false
            },
            superclusterOptions: {
                maxZoom: options.clusterMaxZoom !== undefined ? Math.min(options.clusterMaxZoom, this.maxzoom - 1) : this.maxzoom - 1,
                minPoints: Math.max(2, options.clusterMinPoints || 2),
                extent: performance.EXTENT,
                radius: (options.clusterRadius || 50) * scale,
                log: false,
                generateId: options.generateId || false
            },
            clusterProperties: options.clusterProperties,
            filter: options.filter
        }, options.workerOptions);
    }
    if (Evented)
        GeoJSONSource.__proto__ = Evented;
    GeoJSONSource.prototype = Object.create(Evented && Evented.prototype);
    GeoJSONSource.prototype.constructor = GeoJSONSource;
    GeoJSONSource.prototype.load = function load() {
        var this$1 = this;
        this.fire(new performance.Event('dataloading', { dataType: 'source' }));
        this._updateWorkerData(function (err) {
            if (err) {
                this$1.fire(new performance.ErrorEvent(err));
                return;
            }
            var data = {
                dataType: 'source',
                sourceDataType: 'metadata'
            };
            if (this$1._collectResourceTiming && this$1._resourceTiming && this$1._resourceTiming.length > 0) {
                data.resourceTiming = this$1._resourceTiming;
                this$1._resourceTiming = [];
            }
            this$1.fire(new performance.Event('data', data));
        });
    };
    GeoJSONSource.prototype.onAdd = function onAdd(map) {
        this.map = map;
        this.load();
    };
    GeoJSONSource.prototype.setData = function setData(data) {
        var this$1 = this;
        this._data = data;
        this.fire(new performance.Event('dataloading', { dataType: 'source' }));
        this._updateWorkerData(function (err) {
            if (err) {
                this$1.fire(new performance.ErrorEvent(err));
                return;
            }
            var data = {
                dataType: 'source',
                sourceDataType: 'content'
            };
            if (this$1._collectResourceTiming && this$1._resourceTiming && this$1._resourceTiming.length > 0) {
                data.resourceTiming = this$1._resourceTiming;
                this$1._resourceTiming = [];
            }
            this$1.fire(new performance.Event('data', data));
        });
        return this;
    };
    GeoJSONSource.prototype.getClusterExpansionZoom = function getClusterExpansionZoom(clusterId, callback) {
        this.actor.send('geojson.getClusterExpansionZoom', {
            clusterId: clusterId,
            source: this.id
        }, callback);
        return this;
    };
    GeoJSONSource.prototype.getClusterChildren = function getClusterChildren(clusterId, callback) {
        this.actor.send('geojson.getClusterChildren', {
            clusterId: clusterId,
            source: this.id
        }, callback);
        return this;
    };
    GeoJSONSource.prototype.getClusterLeaves = function getClusterLeaves(clusterId, limit, offset, callback) {
        this.actor.send('geojson.getClusterLeaves', {
            source: this.id,
            clusterId: clusterId,
            limit: limit,
            offset: offset
        }, callback);
        return this;
    };
    GeoJSONSource.prototype._updateWorkerData = function _updateWorkerData(callback) {
        var this$1 = this;
        this._loaded = false;
        var options = performance.extend({}, this.workerOptions);
        var data = this._data;
        if (typeof data === 'string') {
            options.request = this.map._requestManager.transformRequest(performance.browser.resolveURL(data), performance.ResourceType.Source);
            options.request.collectResourceTiming = this._collectResourceTiming;
        } else {
            options.data = JSON.stringify(data);
        }
        this.actor.send(this.type + '.loadData', options, function (err, result) {
            if (this$1._removed || result && result.abandoned) {
                return;
            }
            this$1._loaded = true;
            if (result && result.resourceTiming && result.resourceTiming[this$1.id]) {
                this$1._resourceTiming = result.resourceTiming[this$1.id].slice(0);
            }
            this$1.actor.send(this$1.type + '.coalesce', { source: options.source }, null);
            callback(err);
        });
    };
    GeoJSONSource.prototype.loaded = function loaded() {
        return this._loaded;
    };
    GeoJSONSource.prototype.loadTile = function loadTile(tile, callback) {
        var this$1 = this;
        var message = !tile.actor ? 'loadTile' : 'reloadTile';
        tile.actor = this.actor;
        var params = {
            type: this.type,
            uid: tile.uid,
            tileID: tile.tileID,
            zoom: tile.tileID.overscaledZ,
            maxZoom: this.maxzoom,
            tileSize: this.tileSize,
            source: this.id,
            pixelRatio: performance.browser.devicePixelRatio,
            showCollisionBoxes: this.map.showCollisionBoxes,
            promoteId: this.promoteId
        };
        tile.request = this.actor.send(message, params, function (err, data) {
            delete tile.request;
            tile.unloadVectorData();
            if (tile.aborted) {
                return callback(null);
            }
            if (err) {
                return callback(err);
            }
            tile.loadVectorData(data, this$1.map.painter, message === 'reloadTile');
            return callback(null);
        });
    };
    GeoJSONSource.prototype.abortTile = function abortTile(tile) {
        if (tile.request) {
            tile.request.cancel();
            delete tile.request;
        }
        tile.aborted = true;
    };
    GeoJSONSource.prototype.unloadTile = function unloadTile(tile) {
        tile.unloadVectorData();
        this.actor.send('removeTile', {
            uid: tile.uid,
            type: this.type,
            source: this.id
        });
    };
    GeoJSONSource.prototype.onRemove = function onRemove() {
        this._removed = true;
        this.actor.send('removeSource', {
            type: this.type,
            source: this.id
        });
    };
    GeoJSONSource.prototype.serialize = function serialize() {
        return performance.extend({}, this._options, {
            type: this.type,
            data: this._data
        });
    };
    GeoJSONSource.prototype.hasTransition = function hasTransition() {
        return false;
    };
    return GeoJSONSource;
}(performance.Evented);

var rasterBoundsAttributes = performance.createLayout([
    {
        name: 'a_pos',
        type: 'Int16',
        components: 2
    },
    {
        name: 'a_texture_pos',
        type: 'Int16',
        components: 2
    }
]);

var ImageSource = function (Evented) {
    function ImageSource(id, options, dispatcher, eventedParent) {
        Evented.call(this);
        this.id = id;
        this.dispatcher = dispatcher;
        this.coordinates = options.coordinates;
        this.type = 'image';
        this.minzoom = 0;
        this.maxzoom = 22;
        this.tileSize = 512;
        this.tiles = {};
        this._loaded = false;
        this.setEventedParent(eventedParent);
        this.options = options;
    }
    if (Evented)
        ImageSource.__proto__ = Evented;
    ImageSource.prototype = Object.create(Evented && Evented.prototype);
    ImageSource.prototype.constructor = ImageSource;
    ImageSource.prototype.load = function load(newCoordinates, successCallback) {
        var this$1 = this;
        this._loaded = false;
        this.fire(new performance.Event('dataloading', { dataType: 'source' }));
        this.url = this.options.url;
        performance.getImage(this.map._requestManager.transformRequest(this.url, performance.ResourceType.Image), function (err, image) {
            this$1._loaded = true;
            if (err) {
                this$1.fire(new performance.ErrorEvent(err));
            } else if (image) {
                this$1.image = image;
                if (newCoordinates) {
                    this$1.coordinates = newCoordinates;
                }
                if (successCallback) {
                    successCallback();
                }
                this$1._finishLoading();
            }
        });
    };
    ImageSource.prototype.loaded = function loaded() {
        return this._loaded;
    };
    ImageSource.prototype.updateImage = function updateImage(options) {
        var this$1 = this;
        if (!this.image || !options.url) {
            return this;
        }
        this.options.url = options.url;
        this.load(options.coordinates, function () {
            this$1.texture = null;
        });
        return this;
    };
    ImageSource.prototype._finishLoading = function _finishLoading() {
        if (this.map) {
            this.setCoordinates(this.coordinates);
            this.fire(new performance.Event('data', {
                dataType: 'source',
                sourceDataType: 'metadata'
            }));
        }
    };
    ImageSource.prototype.onAdd = function onAdd(map) {
        this.map = map;
        this.load();
    };
    ImageSource.prototype.setCoordinates = function setCoordinates(coordinates) {
        var this$1 = this;
        this.coordinates = coordinates;
        var cornerCoords = coordinates.map(performance.MercatorCoordinate.fromLngLat);
        this.tileID = getCoordinatesCenterTileID(cornerCoords);
        this.minzoom = this.maxzoom = this.tileID.z;
        var tileCoords = cornerCoords.map(function (coord) {
            return this$1.tileID.getTilePoint(coord)._round();
        });
        this._boundsArray = new performance.StructArrayLayout4i8();
        this._boundsArray.emplaceBack(tileCoords[0].x, tileCoords[0].y, 0, 0);
        this._boundsArray.emplaceBack(tileCoords[1].x, tileCoords[1].y, performance.EXTENT, 0);
        this._boundsArray.emplaceBack(tileCoords[3].x, tileCoords[3].y, 0, performance.EXTENT);
        this._boundsArray.emplaceBack(tileCoords[2].x, tileCoords[2].y, performance.EXTENT, performance.EXTENT);
        if (this.boundsBuffer) {
            this.boundsBuffer.destroy();
            delete this.boundsBuffer;
        }
        this.fire(new performance.Event('data', {
            dataType: 'source',
            sourceDataType: 'content'
        }));
        return this;
    };
    ImageSource.prototype.prepare = function prepare() {
        if (Object.keys(this.tiles).length === 0 || !this.image) {
            return;
        }
        var context = this.map.painter.context;
        var gl = context.gl;
        if (!this.boundsBuffer) {
            this.boundsBuffer = context.createVertexBuffer(this._boundsArray, rasterBoundsAttributes.members);
        }
        if (!this.boundsSegments) {
            this.boundsSegments = performance.SegmentVector.simpleSegment(0, 0, 4, 2);
        }
        if (!this.texture) {
            this.texture = new performance.Texture(context, this.image, gl.RGBA);
            this.texture.bind(gl.LINEAR, gl.CLAMP_TO_EDGE);
        }
        for (var w in this.tiles) {
            var tile = this.tiles[w];
            if (tile.state !== 'loaded') {
                tile.state = 'loaded';
                tile.texture = this.texture;
            }
        }
    };
    ImageSource.prototype.loadTile = function loadTile(tile, callback) {
        if (this.tileID && this.tileID.equals(tile.tileID.canonical)) {
            this.tiles[String(tile.tileID.wrap)] = tile;
            tile.buckets = {};
            callback(null);
        } else {
            tile.state = 'errored';
            callback(null);
        }
    };
    ImageSource.prototype.serialize = function serialize() {
        return {
            type: 'image',
            url: this.options.url,
            coordinates: this.coordinates
        };
    };
    ImageSource.prototype.hasTransition = function hasTransition() {
        return false;
    };
    return ImageSource;
}(performance.Evented);
function getCoordinatesCenterTileID(coords) {
    var minX = Infinity;
    var minY = Infinity;
    var maxX = -Infinity;
    var maxY = -Infinity;
    for (var i = 0, list = coords; i < list.length; i += 1) {
        var coord = list[i];
        minX = Math.min(minX, coord.x);
        minY = Math.min(minY, coord.y);
        maxX = Math.max(maxX, coord.x);
        maxY = Math.max(maxY, coord.y);
    }
    var dx = maxX - minX;
    var dy = maxY - minY;
    var dMax = Math.max(dx, dy);
    var zoom = Math.max(0, Math.floor(-Math.log(dMax) / Math.LN2));
    var tilesAtZoom = Math.pow(2, zoom);
    return new performance.CanonicalTileID(zoom, Math.floor((minX + maxX) / 2 * tilesAtZoom), Math.floor((minY + maxY) / 2 * tilesAtZoom));
}

var VideoSource = function (ImageSource) {
    function VideoSource(id, options, dispatcher, eventedParent) {
        ImageSource.call(this, id, options, dispatcher, eventedParent);
        this.roundZoom = true;
        this.type = 'video';
        this.options = options;
    }
    if (ImageSource)
        VideoSource.__proto__ = ImageSource;
    VideoSource.prototype = Object.create(ImageSource && ImageSource.prototype);
    VideoSource.prototype.constructor = VideoSource;
    VideoSource.prototype.load = function load() {
        var this$1 = this;
        this._loaded = false;
        var options = this.options;
        this.urls = [];
        for (var i = 0, list = options.urls; i < list.length; i += 1) {
            var url = list[i];
            this.urls.push(this.map._requestManager.transformRequest(url, performance.ResourceType.Source).url);
        }
        performance.getVideo(this.urls, function (err, video) {
            this$1._loaded = true;
            if (err) {
                this$1.fire(new performance.ErrorEvent(err));
            } else if (video) {
                this$1.video = video;
                this$1.video.loop = true;
                this$1.video.addEventListener('playing', function () {
                    this$1.map.triggerRepaint();
                });
                if (this$1.map) {
                    this$1.video.play();
                }
                this$1._finishLoading();
            }
        });
    };
    VideoSource.prototype.pause = function pause() {
        if (this.video) {
            this.video.pause();
        }
    };
    VideoSource.prototype.play = function play() {
        if (this.video) {
            this.video.play();
        }
    };
    VideoSource.prototype.seek = function seek(seconds) {
        if (this.video) {
            var seekableRange = this.video.seekable;
            if (seconds < seekableRange.start(0) || seconds > seekableRange.end(0)) {
                this.fire(new performance.ErrorEvent(new performance.ValidationError('sources.' + this.id, null, 'Playback for this video can be set only between the ' + seekableRange.start(0) + ' and ' + seekableRange.end(0) + '-second mark.')));
            } else {
                this.video.currentTime = seconds;
            }
        }
    };
    VideoSource.prototype.getVideo = function getVideo() {
        return this.video;
    };
    VideoSource.prototype.onAdd = function onAdd(map) {
        if (this.map) {
            return;
        }
        this.map = map;
        this.load();
        if (this.video) {
            this.video.play();
            this.setCoordinates(this.coordinates);
        }
    };
    VideoSource.prototype.prepare = function prepare() {
        if (Object.keys(this.tiles).length === 0 || this.video.readyState < 2) {
            return;
        }
        var context = this.map.painter.context;
        var gl = context.gl;
        if (!this.boundsBuffer) {
            this.boundsBuffer = context.createVertexBuffer(this._boundsArray, rasterBoundsAttributes.members);
        }
        if (!this.boundsSegments) {
            this.boundsSegments = performance.SegmentVector.simpleSegment(0, 0, 4, 2);
        }
        if (!this.texture) {
            this.texture = new performance.Texture(context, this.video, gl.RGBA);
            this.texture.bind(gl.LINEAR, gl.CLAMP_TO_EDGE);
        } else if (!this.video.paused) {
            this.texture.bind(gl.LINEAR, gl.CLAMP_TO_EDGE);
            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, this.video);
        }
        for (var w in this.tiles) {
            var tile = this.tiles[w];
            if (tile.state !== 'loaded') {
                tile.state = 'loaded';
                tile.texture = this.texture;
            }
        }
    };
    VideoSource.prototype.serialize = function serialize() {
        return {
            type: 'video',
            urls: this.urls,
            coordinates: this.coordinates
        };
    };
    VideoSource.prototype.hasTransition = function hasTransition() {
        return this.video && !this.video.paused;
    };
    return VideoSource;
}(ImageSource);

var CanvasSource = function (ImageSource) {
    function CanvasSource(id, options, dispatcher, eventedParent) {
        ImageSource.call(this, id, options, dispatcher, eventedParent);
        if (!options.coordinates) {
            this.fire(new performance.ErrorEvent(new performance.ValidationError('sources.' + id, null, 'missing required property "coordinates"')));
        } else if (!Array.isArray(options.coordinates) || options.coordinates.length !== 4 || options.coordinates.some(function (c) {
                return !Array.isArray(c) || c.length !== 2 || c.some(function (l) {
                    return typeof l !== 'number';
                });
            })) {
            this.fire(new performance.ErrorEvent(new performance.ValidationError('sources.' + id, null, '"coordinates" property must be an array of 4 longitude/latitude array pairs')));
        }
        if (options.animate && typeof options.animate !== 'boolean') {
            this.fire(new performance.ErrorEvent(new performance.ValidationError('sources.' + id, null, 'optional "animate" property must be a boolean value')));
        }
        if (!options.canvas) {
            this.fire(new performance.ErrorEvent(new performance.ValidationError('sources.' + id, null, 'missing required property "canvas"')));
        } else if (typeof options.canvas !== 'string' && !(options.canvas instanceof performance.window.HTMLCanvasElement)) {
            this.fire(new performance.ErrorEvent(new performance.ValidationError('sources.' + id, null, '"canvas" must be either a string representing the ID of the canvas element from which to read, or an HTMLCanvasElement instance')));
        }
        this.options = options;
        this.animate = options.animate !== undefined ? options.animate : true;
    }
    if (ImageSource)
        CanvasSource.__proto__ = ImageSource;
    CanvasSource.prototype = Object.create(ImageSource && ImageSource.prototype);
    CanvasSource.prototype.constructor = CanvasSource;
    CanvasSource.prototype.load = function load() {
        this._loaded = true;
        if (!this.canvas) {
            this.canvas = this.options.canvas instanceof performance.window.HTMLCanvasElement ? this.options.canvas : performance.window.document.getElementById(this.options.canvas);
        }
        this.width = this.canvas.width;
        this.height = this.canvas.height;
        if (this._hasInvalidDimensions()) {
            this.fire(new performance.ErrorEvent(new Error('Canvas dimensions cannot be less than or equal to zero.')));
            return;
        }
        this.play = function () {
            this._playing = true;
            this.map.triggerRepaint();
        };
        this.pause = function () {
            if (this._playing) {
                this.prepare();
                this._playing = false;
            }
        };
        this._finishLoading();
    };
    CanvasSource.prototype.getCanvas = function getCanvas() {
        return this.canvas;
    };
    CanvasSource.prototype.onAdd = function onAdd(map) {
        this.map = map;
        this.load();
        if (this.canvas) {
            if (this.animate) {
                this.play();
            }
        }
    };
    CanvasSource.prototype.onRemove = function onRemove() {
        this.pause();
    };
    CanvasSource.prototype.prepare = function prepare() {
        var resize = false;
        if (this.canvas.width !== this.width) {
            this.width = this.canvas.width;
            resize = true;
        }
        if (this.canvas.height !== this.height) {
            this.height = this.canvas.height;
            resize = true;
        }
        if (this._hasInvalidDimensions()) {
            return;
        }
        if (Object.keys(this.tiles).length === 0) {
            return;
        }
        var context = this.map.painter.context;
        var gl = context.gl;
        if (!this.boundsBuffer) {
            this.boundsBuffer = context.createVertexBuffer(this._boundsArray, rasterBoundsAttributes.members);
        }
        if (!this.boundsSegments) {
            this.boundsSegments = performance.SegmentVector.simpleSegment(0, 0, 4, 2);
        }
        if (!this.texture) {
            this.texture = new performance.Texture(context, this.canvas, gl.RGBA, { premultiply: true });
        } else if (resize || this._playing) {
            this.texture.update(this.canvas, { premultiply: true });
        }
        for (var w in this.tiles) {
            var tile = this.tiles[w];
            if (tile.state !== 'loaded') {
                tile.state = 'loaded';
                tile.texture = this.texture;
            }
        }
    };
    CanvasSource.prototype.serialize = function serialize() {
        return {
            type: 'canvas',
            coordinates: this.coordinates
        };
    };
    CanvasSource.prototype.hasTransition = function hasTransition() {
        return this._playing;
    };
    CanvasSource.prototype._hasInvalidDimensions = function _hasInvalidDimensions() {
        for (var i = 0, list = [
                    this.canvas.width,
                    this.canvas.height
                ]; i < list.length; i += 1) {
            var x = list[i];
            if (isNaN(x) || x <= 0) {
                return true;
            }
        }
        return false;
    };
    return CanvasSource;
}(ImageSource);

var sourceTypes = {
    vector: VectorTileSource,
    raster: RasterTileSource,
    'raster-dem': RasterDEMTileSource,
    geojson: GeoJSONSource,
    video: VideoSource,
    image: ImageSource,
    canvas: CanvasSource
};
var create = function (id, specification, dispatcher, eventedParent) {
    var source = new sourceTypes[specification.type](id, specification, dispatcher, eventedParent);
    if (source.id !== id) {
        throw new Error('Expected Source id to be ' + id + ' instead of ' + source.id);
    }
    performance.bindAll([
        'load',
        'abort',
        'unload',
        'serialize',
        'prepare'
    ], source);
    return source;
};
var getType = function (name) {
    return sourceTypes[name];
};
var setType = function (name, type) {
    sourceTypes[name] = type;
};

function getPixelPosMatrix(transform, tileID) {
    var t = performance.identity([]);
    performance.translate(t, t, [
        1,
        1,
        0
    ]);
    performance.scale(t, t, [
        transform.width * 0.5,
        transform.height * 0.5,
        1
    ]);
    return performance.multiply(t, t, transform.calculatePosMatrix(tileID.toUnwrapped()));
}
function queryIncludes3DLayer(layers, styleLayers, sourceID) {
    if (layers) {
        for (var i = 0, list = layers; i < list.length; i += 1) {
            var layerID = list[i];
            var layer = styleLayers[layerID];
            if (layer && layer.source === sourceID && layer.type === 'fill-extrusion') {
                return true;
            }
        }
    } else {
        for (var key in styleLayers) {
            var layer$1 = styleLayers[key];
            if (layer$1.source === sourceID && layer$1.type === 'fill-extrusion') {
                return true;
            }
        }
    }
    return false;
}
function queryRenderedFeatures(sourceCache, styleLayers, serializedLayers, queryGeometry, params, transform) {
    var has3DLayer = queryIncludes3DLayer(params && params.layers, styleLayers, sourceCache.id);
    var maxPitchScaleFactor = transform.maxPitchScaleFactor();
    var tilesIn = sourceCache.tilesIn(queryGeometry, maxPitchScaleFactor, has3DLayer);
    tilesIn.sort(sortTilesIn);
    var renderedFeatureLayers = [];
    for (var i = 0, list = tilesIn; i < list.length; i += 1) {
        var tileIn = list[i];
        renderedFeatureLayers.push({
            wrappedTileID: tileIn.tileID.wrapped().key,
            queryResults: tileIn.tile.queryRenderedFeatures(styleLayers, serializedLayers, sourceCache._state, tileIn.queryGeometry, tileIn.cameraQueryGeometry, tileIn.scale, params, transform, maxPitchScaleFactor, getPixelPosMatrix(sourceCache.transform, tileIn.tileID))
        });
    }
    var result = mergeRenderedFeatureLayers(renderedFeatureLayers);
    for (var layerID in result) {
        result[layerID].forEach(function (featureWrapper) {
            var feature = featureWrapper.feature;
            var state = sourceCache.getFeatureState(feature.layer['source-layer'], feature.id);
            feature.source = feature.layer.source;
            if (feature.layer['source-layer']) {
                feature.sourceLayer = feature.layer['source-layer'];
            }
            feature.state = state;
        });
    }
    return result;
}
function queryRenderedSymbols(styleLayers, serializedLayers, sourceCaches, queryGeometry, params, collisionIndex, retainedQueryData) {
    var result = {};
    var renderedSymbols = collisionIndex.queryRenderedSymbols(queryGeometry);
    var bucketQueryData = [];
    for (var i = 0, list = Object.keys(renderedSymbols).map(Number); i < list.length; i += 1) {
        var bucketInstanceId = list[i];
        bucketQueryData.push(retainedQueryData[bucketInstanceId]);
    }
    bucketQueryData.sort(sortTilesIn);
    var loop = function () {
        var queryData = list$2[i$2];
        var bucketSymbols = queryData.featureIndex.lookupSymbolFeatures(renderedSymbols[queryData.bucketInstanceId], serializedLayers, queryData.bucketIndex, queryData.sourceLayerIndex, params.filter, params.layers, params.availableImages, styleLayers);
        for (var layerID in bucketSymbols) {
            var resultFeatures = result[layerID] = result[layerID] || [];
            var layerSymbols = bucketSymbols[layerID];
            layerSymbols.sort(function (a, b) {
                var featureSortOrder = queryData.featureSortOrder;
                if (featureSortOrder) {
                    var sortedA = featureSortOrder.indexOf(a.featureIndex);
                    var sortedB = featureSortOrder.indexOf(b.featureIndex);
                    return sortedB - sortedA;
                } else {
                    return b.featureIndex - a.featureIndex;
                }
            });
            for (var i$1 = 0, list$1 = layerSymbols; i$1 < list$1.length; i$1 += 1) {
                var symbolFeature = list$1[i$1];
                resultFeatures.push(symbolFeature);
            }
        }
    };
    for (var i$2 = 0, list$2 = bucketQueryData; i$2 < list$2.length; i$2 += 1)
        loop();
    var loop$1 = function (layerName) {
        result[layerName].forEach(function (featureWrapper) {
            var feature = featureWrapper.feature;
            var layer = styleLayers[layerName];
            var sourceCache = sourceCaches[layer.source];
            var state = sourceCache.getFeatureState(feature.layer['source-layer'], feature.id);
            feature.source = feature.layer.source;
            if (feature.layer['source-layer']) {
                feature.sourceLayer = feature.layer['source-layer'];
            }
            feature.state = state;
        });
    };
    for (var layerName in result)
        loop$1(layerName);
    return result;
}
function querySourceFeatures(sourceCache, params) {
    var tiles = sourceCache.getRenderableIds().map(function (id) {
        return sourceCache.getTileByID(id);
    });
    var result = [];
    var dataTiles = {};
    for (var i = 0; i < tiles.length; i++) {
        var tile = tiles[i];
        var dataID = tile.tileID.canonical.key;
        if (!dataTiles[dataID]) {
            dataTiles[dataID] = true;
            tile.querySourceFeatures(result, params);
        }
    }
    return result;
}
function sortTilesIn(a, b) {
    var idA = a.tileID;
    var idB = b.tileID;
    return idA.overscaledZ - idB.overscaledZ || idA.canonical.y - idB.canonical.y || idA.wrap - idB.wrap || idA.canonical.x - idB.canonical.x;
}
function mergeRenderedFeatureLayers(tiles) {
    var result = {};
    var wrappedIDLayerMap = {};
    for (var i$1 = 0, list$1 = tiles; i$1 < list$1.length; i$1 += 1) {
        var tile = list$1[i$1];
        var queryResults = tile.queryResults;
        var wrappedID = tile.wrappedTileID;
        var wrappedIDLayers = wrappedIDLayerMap[wrappedID] = wrappedIDLayerMap[wrappedID] || {};
        for (var layerID in queryResults) {
            var tileFeatures = queryResults[layerID];
            var wrappedIDFeatures = wrappedIDLayers[layerID] = wrappedIDLayers[layerID] || {};
            var resultFeatures = result[layerID] = result[layerID] || [];
            for (var i = 0, list = tileFeatures; i < list.length; i += 1) {
                var tileFeature = list[i];
                if (!wrappedIDFeatures[tileFeature.featureIndex]) {
                    wrappedIDFeatures[tileFeature.featureIndex] = true;
                    resultFeatures.push(tileFeature);
                }
            }
        }
    }
    return result;
}

var TileCache = function TileCache(max, onRemove) {
    this.max = max;
    this.onRemove = onRemove;
    this.reset();
};
TileCache.prototype.reset = function reset() {
    for (var key in this.data) {
        for (var i = 0, list = this.data[key]; i < list.length; i += 1) {
            var removedData = list[i];
            if (removedData.timeout) {
                clearTimeout(removedData.timeout);
            }
            this.onRemove(removedData.value);
        }
    }
    this.data = {};
    this.order = [];
    return this;
};
TileCache.prototype.add = function add(tileID, data, expiryTimeout) {
    var this$1 = this;
    var key = tileID.wrapped().key;
    if (this.data[key] === undefined) {
        this.data[key] = [];
    }
    var dataWrapper = {
        value: data,
        timeout: undefined
    };
    if (expiryTimeout !== undefined) {
        dataWrapper.timeout = setTimeout(function () {
            this$1.remove(tileID, dataWrapper);
        }, expiryTimeout);
    }
    this.data[key].push(dataWrapper);
    this.order.push(key);
    if (this.order.length > this.max) {
        var removedData = this._getAndRemoveByKey(this.order[0]);
        if (removedData) {
            this.onRemove(removedData);
        }
    }
    return this;
};
TileCache.prototype.has = function has(tileID) {
    return tileID.wrapped().key in this.data;
};
TileCache.prototype.getAndRemove = function getAndRemove(tileID) {
    if (!this.has(tileID)) {
        return null;
    }
    return this._getAndRemoveByKey(tileID.wrapped().key);
};
TileCache.prototype._getAndRemoveByKey = function _getAndRemoveByKey(key) {
    var data = this.data[key].shift();
    if (data.timeout) {
        clearTimeout(data.timeout);
    }
    if (this.data[key].length === 0) {
        delete this.data[key];
    }
    this.order.splice(this.order.indexOf(key), 1);
    return data.value;
};
TileCache.prototype.getByKey = function getByKey(key) {
    var data = this.data[key];
    return data ? data[0].value : null;
};
TileCache.prototype.get = function get(tileID) {
    if (!this.has(tileID)) {
        return null;
    }
    var data = this.data[tileID.wrapped().key][0];
    return data.value;
};
TileCache.prototype.remove = function remove(tileID, value) {
    if (!this.has(tileID)) {
        return this;
    }
    var key = tileID.wrapped().key;
    var dataIndex = value === undefined ? 0 : this.data[key].indexOf(value);
    var data = this.data[key][dataIndex];
    this.data[key].splice(dataIndex, 1);
    if (data.timeout) {
        clearTimeout(data.timeout);
    }
    if (this.data[key].length === 0) {
        delete this.data[key];
    }
    this.onRemove(data.value);
    this.order.splice(this.order.indexOf(key), 1);
    return this;
};
TileCache.prototype.setMaxSize = function setMaxSize(max) {
    this.max = max;
    while (this.order.length > this.max) {
        var removedData = this._getAndRemoveByKey(this.order[0]);
        if (removedData) {
            this.onRemove(removedData);
        }
    }
    return this;
};
TileCache.prototype.filter = function filter(filterFn) {
    var removed = [];
    for (var key in this.data) {
        for (var i = 0, list = this.data[key]; i < list.length; i += 1) {
            var entry = list[i];
            if (!filterFn(entry.value)) {
                removed.push(entry);
            }
        }
    }
    for (var i$1 = 0, list$1 = removed; i$1 < list$1.length; i$1 += 1) {
        var r = list$1[i$1];
        this.remove(r.value.tileID, r);
    }
};

var IndexBuffer = function IndexBuffer(context, array, dynamicDraw) {
    this.context = context;
    var gl = context.gl;
    this.buffer = gl.createBuffer();
    this.dynamicDraw = Boolean(dynamicDraw);
    this.context.unbindVAO();
    context.bindElementBuffer.set(this.buffer);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, array.arrayBuffer, this.dynamicDraw ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW);
    if (!this.dynamicDraw) {
        delete array.arrayBuffer;
    }
};
IndexBuffer.prototype.bind = function bind() {
    this.context.bindElementBuffer.set(this.buffer);
};
IndexBuffer.prototype.updateData = function updateData(array) {
    var gl = this.context.gl;
    this.context.unbindVAO();
    this.bind();
    gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, 0, array.arrayBuffer);
};
IndexBuffer.prototype.destroy = function destroy() {
    var gl = this.context.gl;
    if (this.buffer) {
        gl.deleteBuffer(this.buffer);
        delete this.buffer;
    }
};

var AttributeType = {
    Int8: 'BYTE',
    Uint8: 'UNSIGNED_BYTE',
    Int16: 'SHORT',
    Uint16: 'UNSIGNED_SHORT',
    Int32: 'INT',
    Uint32: 'UNSIGNED_INT',
    Float32: 'FLOAT'
};
var VertexBuffer = function VertexBuffer(context, array, attributes, dynamicDraw) {
    this.length = array.length;
    this.attributes = attributes;
    this.itemSize = array.bytesPerElement;
    this.dynamicDraw = dynamicDraw;
    this.context = context;
    var gl = context.gl;
    this.buffer = gl.createBuffer();
    context.bindVertexBuffer.set(this.buffer);
    gl.bufferData(gl.ARRAY_BUFFER, array.arrayBuffer, this.dynamicDraw ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW);
    if (!this.dynamicDraw) {
        delete array.arrayBuffer;
    }
};
VertexBuffer.prototype.bind = function bind() {
    this.context.bindVertexBuffer.set(this.buffer);
};
VertexBuffer.prototype.updateData = function updateData(array) {
    var gl = this.context.gl;
    this.bind();
    gl.bufferSubData(gl.ARRAY_BUFFER, 0, array.arrayBuffer);
};
VertexBuffer.prototype.enableAttributes = function enableAttributes(gl, program) {
    for (var j = 0; j < this.attributes.length; j++) {
        var member = this.attributes[j];
        var attribIndex = program.attributes[member.name];
        if (attribIndex !== undefined) {
            gl.enableVertexAttribArray(attribIndex);
        }
    }
};
VertexBuffer.prototype.setVertexAttribPointers = function setVertexAttribPointers(gl, program, vertexOffset) {
    for (var j = 0; j < this.attributes.length; j++) {
        var member = this.attributes[j];
        var attribIndex = program.attributes[member.name];
        if (attribIndex !== undefined) {
            gl.vertexAttribPointer(attribIndex, member.components, gl[AttributeType[member.type]], false, this.itemSize, member.offset + this.itemSize * (vertexOffset || 0));
        }
    }
};
VertexBuffer.prototype.destroy = function destroy() {
    var gl = this.context.gl;
    if (this.buffer) {
        gl.deleteBuffer(this.buffer);
        delete this.buffer;
    }
};

var BaseValue = function BaseValue(context) {
    this.gl = context.gl;
    this.default = this.getDefault();
    this.current = this.default;
    this.dirty = false;
};
BaseValue.prototype.get = function get() {
    return this.current;
};
BaseValue.prototype.set = function set(value) {
};
BaseValue.prototype.getDefault = function getDefault() {
    return this.default;
};
BaseValue.prototype.setDefault = function setDefault() {
    this.set(this.default);
};
var ClearColor = function (BaseValue) {
    function ClearColor() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        ClearColor.__proto__ = BaseValue;
    ClearColor.prototype = Object.create(BaseValue && BaseValue.prototype);
    ClearColor.prototype.constructor = ClearColor;
    ClearColor.prototype.getDefault = function getDefault() {
        return performance.Color.transparent;
    };
    ClearColor.prototype.set = function set(v) {
        var c = this.current;
        if (v.r === c.r && v.g === c.g && v.b === c.b && v.a === c.a && !this.dirty) {
            return;
        }
        this.gl.clearColor(v.r, v.g, v.b, v.a);
        this.current = v;
        this.dirty = false;
    };
    return ClearColor;
}(BaseValue);
var ClearDepth = function (BaseValue) {
    function ClearDepth() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        ClearDepth.__proto__ = BaseValue;
    ClearDepth.prototype = Object.create(BaseValue && BaseValue.prototype);
    ClearDepth.prototype.constructor = ClearDepth;
    ClearDepth.prototype.getDefault = function getDefault() {
        return 1;
    };
    ClearDepth.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        this.gl.clearDepth(v);
        this.current = v;
        this.dirty = false;
    };
    return ClearDepth;
}(BaseValue);
var ClearStencil = function (BaseValue) {
    function ClearStencil() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        ClearStencil.__proto__ = BaseValue;
    ClearStencil.prototype = Object.create(BaseValue && BaseValue.prototype);
    ClearStencil.prototype.constructor = ClearStencil;
    ClearStencil.prototype.getDefault = function getDefault() {
        return 0;
    };
    ClearStencil.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        this.gl.clearStencil(v);
        this.current = v;
        this.dirty = false;
    };
    return ClearStencil;
}(BaseValue);
var ColorMask = function (BaseValue) {
    function ColorMask() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        ColorMask.__proto__ = BaseValue;
    ColorMask.prototype = Object.create(BaseValue && BaseValue.prototype);
    ColorMask.prototype.constructor = ColorMask;
    ColorMask.prototype.getDefault = function getDefault() {
        return [
            true,
            true,
            true,
            true
        ];
    };
    ColorMask.prototype.set = function set(v) {
        var c = this.current;
        if (v[0] === c[0] && v[1] === c[1] && v[2] === c[2] && v[3] === c[3] && !this.dirty) {
            return;
        }
        this.gl.colorMask(v[0], v[1], v[2], v[3]);
        this.current = v;
        this.dirty = false;
    };
    return ColorMask;
}(BaseValue);
var DepthMask = function (BaseValue) {
    function DepthMask() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        DepthMask.__proto__ = BaseValue;
    DepthMask.prototype = Object.create(BaseValue && BaseValue.prototype);
    DepthMask.prototype.constructor = DepthMask;
    DepthMask.prototype.getDefault = function getDefault() {
        return true;
    };
    DepthMask.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        this.gl.depthMask(v);
        this.current = v;
        this.dirty = false;
    };
    return DepthMask;
}(BaseValue);
var StencilMask = function (BaseValue) {
    function StencilMask() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        StencilMask.__proto__ = BaseValue;
    StencilMask.prototype = Object.create(BaseValue && BaseValue.prototype);
    StencilMask.prototype.constructor = StencilMask;
    StencilMask.prototype.getDefault = function getDefault() {
        return 255;
    };
    StencilMask.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        this.gl.stencilMask(v);
        this.current = v;
        this.dirty = false;
    };
    return StencilMask;
}(BaseValue);
var StencilFunc = function (BaseValue) {
    function StencilFunc() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        StencilFunc.__proto__ = BaseValue;
    StencilFunc.prototype = Object.create(BaseValue && BaseValue.prototype);
    StencilFunc.prototype.constructor = StencilFunc;
    StencilFunc.prototype.getDefault = function getDefault() {
        return {
            func: this.gl.ALWAYS,
            ref: 0,
            mask: 255
        };
    };
    StencilFunc.prototype.set = function set(v) {
        var c = this.current;
        if (v.func === c.func && v.ref === c.ref && v.mask === c.mask && !this.dirty) {
            return;
        }
        this.gl.stencilFunc(v.func, v.ref, v.mask);
        this.current = v;
        this.dirty = false;
    };
    return StencilFunc;
}(BaseValue);
var StencilOp = function (BaseValue) {
    function StencilOp() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        StencilOp.__proto__ = BaseValue;
    StencilOp.prototype = Object.create(BaseValue && BaseValue.prototype);
    StencilOp.prototype.constructor = StencilOp;
    StencilOp.prototype.getDefault = function getDefault() {
        var gl = this.gl;
        return [
            gl.KEEP,
            gl.KEEP,
            gl.KEEP
        ];
    };
    StencilOp.prototype.set = function set(v) {
        var c = this.current;
        if (v[0] === c[0] && v[1] === c[1] && v[2] === c[2] && !this.dirty) {
            return;
        }
        this.gl.stencilOp(v[0], v[1], v[2]);
        this.current = v;
        this.dirty = false;
    };
    return StencilOp;
}(BaseValue);
var StencilTest = function (BaseValue) {
    function StencilTest() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        StencilTest.__proto__ = BaseValue;
    StencilTest.prototype = Object.create(BaseValue && BaseValue.prototype);
    StencilTest.prototype.constructor = StencilTest;
    StencilTest.prototype.getDefault = function getDefault() {
        return false;
    };
    StencilTest.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        var gl = this.gl;
        if (v) {
            gl.enable(gl.STENCIL_TEST);
        } else {
            gl.disable(gl.STENCIL_TEST);
        }
        this.current = v;
        this.dirty = false;
    };
    return StencilTest;
}(BaseValue);
var DepthRange = function (BaseValue) {
    function DepthRange() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        DepthRange.__proto__ = BaseValue;
    DepthRange.prototype = Object.create(BaseValue && BaseValue.prototype);
    DepthRange.prototype.constructor = DepthRange;
    DepthRange.prototype.getDefault = function getDefault() {
        return [
            0,
            1
        ];
    };
    DepthRange.prototype.set = function set(v) {
        var c = this.current;
        if (v[0] === c[0] && v[1] === c[1] && !this.dirty) {
            return;
        }
        this.gl.depthRange(v[0], v[1]);
        this.current = v;
        this.dirty = false;
    };
    return DepthRange;
}(BaseValue);
var DepthTest = function (BaseValue) {
    function DepthTest() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        DepthTest.__proto__ = BaseValue;
    DepthTest.prototype = Object.create(BaseValue && BaseValue.prototype);
    DepthTest.prototype.constructor = DepthTest;
    DepthTest.prototype.getDefault = function getDefault() {
        return false;
    };
    DepthTest.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        var gl = this.gl;
        if (v) {
            gl.enable(gl.DEPTH_TEST);
        } else {
            gl.disable(gl.DEPTH_TEST);
        }
        this.current = v;
        this.dirty = false;
    };
    return DepthTest;
}(BaseValue);
var DepthFunc = function (BaseValue) {
    function DepthFunc() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        DepthFunc.__proto__ = BaseValue;
    DepthFunc.prototype = Object.create(BaseValue && BaseValue.prototype);
    DepthFunc.prototype.constructor = DepthFunc;
    DepthFunc.prototype.getDefault = function getDefault() {
        return this.gl.LESS;
    };
    DepthFunc.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        this.gl.depthFunc(v);
        this.current = v;
        this.dirty = false;
    };
    return DepthFunc;
}(BaseValue);
var Blend = function (BaseValue) {
    function Blend() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        Blend.__proto__ = BaseValue;
    Blend.prototype = Object.create(BaseValue && BaseValue.prototype);
    Blend.prototype.constructor = Blend;
    Blend.prototype.getDefault = function getDefault() {
        return false;
    };
    Blend.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        var gl = this.gl;
        if (v) {
            gl.enable(gl.BLEND);
        } else {
            gl.disable(gl.BLEND);
        }
        this.current = v;
        this.dirty = false;
    };
    return Blend;
}(BaseValue);
var BlendFunc = function (BaseValue) {
    function BlendFunc() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        BlendFunc.__proto__ = BaseValue;
    BlendFunc.prototype = Object.create(BaseValue && BaseValue.prototype);
    BlendFunc.prototype.constructor = BlendFunc;
    BlendFunc.prototype.getDefault = function getDefault() {
        var gl = this.gl;
        return [
            gl.ONE,
            gl.ZERO
        ];
    };
    BlendFunc.prototype.set = function set(v) {
        var c = this.current;
        if (v[0] === c[0] && v[1] === c[1] && !this.dirty) {
            return;
        }
        this.gl.blendFunc(v[0], v[1]);
        this.current = v;
        this.dirty = false;
    };
    return BlendFunc;
}(BaseValue);
var BlendColor = function (BaseValue) {
    function BlendColor() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        BlendColor.__proto__ = BaseValue;
    BlendColor.prototype = Object.create(BaseValue && BaseValue.prototype);
    BlendColor.prototype.constructor = BlendColor;
    BlendColor.prototype.getDefault = function getDefault() {
        return performance.Color.transparent;
    };
    BlendColor.prototype.set = function set(v) {
        var c = this.current;
        if (v.r === c.r && v.g === c.g && v.b === c.b && v.a === c.a && !this.dirty) {
            return;
        }
        this.gl.blendColor(v.r, v.g, v.b, v.a);
        this.current = v;
        this.dirty = false;
    };
    return BlendColor;
}(BaseValue);
var BlendEquation = function (BaseValue) {
    function BlendEquation() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        BlendEquation.__proto__ = BaseValue;
    BlendEquation.prototype = Object.create(BaseValue && BaseValue.prototype);
    BlendEquation.prototype.constructor = BlendEquation;
    BlendEquation.prototype.getDefault = function getDefault() {
        return this.gl.FUNC_ADD;
    };
    BlendEquation.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        this.gl.blendEquation(v);
        this.current = v;
        this.dirty = false;
    };
    return BlendEquation;
}(BaseValue);
var CullFace = function (BaseValue) {
    function CullFace() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        CullFace.__proto__ = BaseValue;
    CullFace.prototype = Object.create(BaseValue && BaseValue.prototype);
    CullFace.prototype.constructor = CullFace;
    CullFace.prototype.getDefault = function getDefault() {
        return false;
    };
    CullFace.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        var gl = this.gl;
        if (v) {
            gl.enable(gl.CULL_FACE);
        } else {
            gl.disable(gl.CULL_FACE);
        }
        this.current = v;
        this.dirty = false;
    };
    return CullFace;
}(BaseValue);
var CullFaceSide = function (BaseValue) {
    function CullFaceSide() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        CullFaceSide.__proto__ = BaseValue;
    CullFaceSide.prototype = Object.create(BaseValue && BaseValue.prototype);
    CullFaceSide.prototype.constructor = CullFaceSide;
    CullFaceSide.prototype.getDefault = function getDefault() {
        return this.gl.BACK;
    };
    CullFaceSide.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        this.gl.cullFace(v);
        this.current = v;
        this.dirty = false;
    };
    return CullFaceSide;
}(BaseValue);
var FrontFace = function (BaseValue) {
    function FrontFace() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        FrontFace.__proto__ = BaseValue;
    FrontFace.prototype = Object.create(BaseValue && BaseValue.prototype);
    FrontFace.prototype.constructor = FrontFace;
    FrontFace.prototype.getDefault = function getDefault() {
        return this.gl.CCW;
    };
    FrontFace.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        this.gl.frontFace(v);
        this.current = v;
        this.dirty = false;
    };
    return FrontFace;
}(BaseValue);
var Program = function (BaseValue) {
    function Program() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        Program.__proto__ = BaseValue;
    Program.prototype = Object.create(BaseValue && BaseValue.prototype);
    Program.prototype.constructor = Program;
    Program.prototype.getDefault = function getDefault() {
        return null;
    };
    Program.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        this.gl.useProgram(v);
        this.current = v;
        this.dirty = false;
    };
    return Program;
}(BaseValue);
var ActiveTextureUnit = function (BaseValue) {
    function ActiveTextureUnit() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        ActiveTextureUnit.__proto__ = BaseValue;
    ActiveTextureUnit.prototype = Object.create(BaseValue && BaseValue.prototype);
    ActiveTextureUnit.prototype.constructor = ActiveTextureUnit;
    ActiveTextureUnit.prototype.getDefault = function getDefault() {
        return this.gl.TEXTURE0;
    };
    ActiveTextureUnit.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        this.gl.activeTexture(v);
        this.current = v;
        this.dirty = false;
    };
    return ActiveTextureUnit;
}(BaseValue);
var Viewport = function (BaseValue) {
    function Viewport() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        Viewport.__proto__ = BaseValue;
    Viewport.prototype = Object.create(BaseValue && BaseValue.prototype);
    Viewport.prototype.constructor = Viewport;
    Viewport.prototype.getDefault = function getDefault() {
        var gl = this.gl;
        return [
            0,
            0,
            gl.drawingBufferWidth,
            gl.drawingBufferHeight
        ];
    };
    Viewport.prototype.set = function set(v) {
        var c = this.current;
        if (v[0] === c[0] && v[1] === c[1] && v[2] === c[2] && v[3] === c[3] && !this.dirty) {
            return;
        }
        this.gl.viewport(v[0], v[1], v[2], v[3]);
        this.current = v;
        this.dirty = false;
    };
    return Viewport;
}(BaseValue);
var BindFramebuffer = function (BaseValue) {
    function BindFramebuffer() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        BindFramebuffer.__proto__ = BaseValue;
    BindFramebuffer.prototype = Object.create(BaseValue && BaseValue.prototype);
    BindFramebuffer.prototype.constructor = BindFramebuffer;
    BindFramebuffer.prototype.getDefault = function getDefault() {
        return null;
    };
    BindFramebuffer.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        var gl = this.gl;
        gl.bindFramebuffer(gl.FRAMEBUFFER, v);
        this.current = v;
        this.dirty = false;
    };
    return BindFramebuffer;
}(BaseValue);
var BindRenderbuffer = function (BaseValue) {
    function BindRenderbuffer() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        BindRenderbuffer.__proto__ = BaseValue;
    BindRenderbuffer.prototype = Object.create(BaseValue && BaseValue.prototype);
    BindRenderbuffer.prototype.constructor = BindRenderbuffer;
    BindRenderbuffer.prototype.getDefault = function getDefault() {
        return null;
    };
    BindRenderbuffer.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        var gl = this.gl;
        gl.bindRenderbuffer(gl.RENDERBUFFER, v);
        this.current = v;
        this.dirty = false;
    };
    return BindRenderbuffer;
}(BaseValue);
var BindTexture = function (BaseValue) {
    function BindTexture() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        BindTexture.__proto__ = BaseValue;
    BindTexture.prototype = Object.create(BaseValue && BaseValue.prototype);
    BindTexture.prototype.constructor = BindTexture;
    BindTexture.prototype.getDefault = function getDefault() {
        return null;
    };
    BindTexture.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        var gl = this.gl;
        gl.bindTexture(gl.TEXTURE_2D, v);
        this.current = v;
        this.dirty = false;
    };
    return BindTexture;
}(BaseValue);
var BindVertexBuffer = function (BaseValue) {
    function BindVertexBuffer() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        BindVertexBuffer.__proto__ = BaseValue;
    BindVertexBuffer.prototype = Object.create(BaseValue && BaseValue.prototype);
    BindVertexBuffer.prototype.constructor = BindVertexBuffer;
    BindVertexBuffer.prototype.getDefault = function getDefault() {
        return null;
    };
    BindVertexBuffer.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        var gl = this.gl;
        gl.bindBuffer(gl.ARRAY_BUFFER, v);
        this.current = v;
        this.dirty = false;
    };
    return BindVertexBuffer;
}(BaseValue);
var BindElementBuffer = function (BaseValue) {
    function BindElementBuffer() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        BindElementBuffer.__proto__ = BaseValue;
    BindElementBuffer.prototype = Object.create(BaseValue && BaseValue.prototype);
    BindElementBuffer.prototype.constructor = BindElementBuffer;
    BindElementBuffer.prototype.getDefault = function getDefault() {
        return null;
    };
    BindElementBuffer.prototype.set = function set(v) {
        var gl = this.gl;
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, v);
        this.current = v;
        this.dirty = false;
    };
    return BindElementBuffer;
}(BaseValue);
var BindVertexArrayOES = function (BaseValue) {
    function BindVertexArrayOES(context) {
        BaseValue.call(this, context);
        this.vao = context.extVertexArrayObject;
    }
    if (BaseValue)
        BindVertexArrayOES.__proto__ = BaseValue;
    BindVertexArrayOES.prototype = Object.create(BaseValue && BaseValue.prototype);
    BindVertexArrayOES.prototype.constructor = BindVertexArrayOES;
    BindVertexArrayOES.prototype.getDefault = function getDefault() {
        return null;
    };
    BindVertexArrayOES.prototype.set = function set(v) {
        if (!this.vao || v === this.current && !this.dirty) {
            return;
        }
        this.vao.bindVertexArrayOES(v);
        this.current = v;
        this.dirty = false;
    };
    return BindVertexArrayOES;
}(BaseValue);
var PixelStoreUnpack = function (BaseValue) {
    function PixelStoreUnpack() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        PixelStoreUnpack.__proto__ = BaseValue;
    PixelStoreUnpack.prototype = Object.create(BaseValue && BaseValue.prototype);
    PixelStoreUnpack.prototype.constructor = PixelStoreUnpack;
    PixelStoreUnpack.prototype.getDefault = function getDefault() {
        return 4;
    };
    PixelStoreUnpack.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        var gl = this.gl;
        gl.pixelStorei(gl.UNPACK_ALIGNMENT, v);
        this.current = v;
        this.dirty = false;
    };
    return PixelStoreUnpack;
}(BaseValue);
var PixelStoreUnpackPremultiplyAlpha = function (BaseValue) {
    function PixelStoreUnpackPremultiplyAlpha() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        PixelStoreUnpackPremultiplyAlpha.__proto__ = BaseValue;
    PixelStoreUnpackPremultiplyAlpha.prototype = Object.create(BaseValue && BaseValue.prototype);
    PixelStoreUnpackPremultiplyAlpha.prototype.constructor = PixelStoreUnpackPremultiplyAlpha;
    PixelStoreUnpackPremultiplyAlpha.prototype.getDefault = function getDefault() {
        return false;
    };
    PixelStoreUnpackPremultiplyAlpha.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        var gl = this.gl;
        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, v);
        this.current = v;
        this.dirty = false;
    };
    return PixelStoreUnpackPremultiplyAlpha;
}(BaseValue);
var PixelStoreUnpackFlipY = function (BaseValue) {
    function PixelStoreUnpackFlipY() {
        BaseValue.apply(this, arguments);
    }
    if (BaseValue)
        PixelStoreUnpackFlipY.__proto__ = BaseValue;
    PixelStoreUnpackFlipY.prototype = Object.create(BaseValue && BaseValue.prototype);
    PixelStoreUnpackFlipY.prototype.constructor = PixelStoreUnpackFlipY;
    PixelStoreUnpackFlipY.prototype.getDefault = function getDefault() {
        return false;
    };
    PixelStoreUnpackFlipY.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        var gl = this.gl;
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, v);
        this.current = v;
        this.dirty = false;
    };
    return PixelStoreUnpackFlipY;
}(BaseValue);
var FramebufferAttachment = function (BaseValue) {
    function FramebufferAttachment(context, parent) {
        BaseValue.call(this, context);
        this.context = context;
        this.parent = parent;
    }
    if (BaseValue)
        FramebufferAttachment.__proto__ = BaseValue;
    FramebufferAttachment.prototype = Object.create(BaseValue && BaseValue.prototype);
    FramebufferAttachment.prototype.constructor = FramebufferAttachment;
    FramebufferAttachment.prototype.getDefault = function getDefault() {
        return null;
    };
    return FramebufferAttachment;
}(BaseValue);
var ColorAttachment = function (FramebufferAttachment) {
    function ColorAttachment() {
        FramebufferAttachment.apply(this, arguments);
    }
    if (FramebufferAttachment)
        ColorAttachment.__proto__ = FramebufferAttachment;
    ColorAttachment.prototype = Object.create(FramebufferAttachment && FramebufferAttachment.prototype);
    ColorAttachment.prototype.constructor = ColorAttachment;
    ColorAttachment.prototype.setDirty = function setDirty() {
        this.dirty = true;
    };
    ColorAttachment.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        this.context.bindFramebuffer.set(this.parent);
        var gl = this.gl;
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, v, 0);
        this.current = v;
        this.dirty = false;
    };
    return ColorAttachment;
}(FramebufferAttachment);
var DepthAttachment = function (FramebufferAttachment) {
    function DepthAttachment() {
        FramebufferAttachment.apply(this, arguments);
    }
    if (FramebufferAttachment)
        DepthAttachment.__proto__ = FramebufferAttachment;
    DepthAttachment.prototype = Object.create(FramebufferAttachment && FramebufferAttachment.prototype);
    DepthAttachment.prototype.constructor = DepthAttachment;
    DepthAttachment.prototype.set = function set(v) {
        if (v === this.current && !this.dirty) {
            return;
        }
        this.context.bindFramebuffer.set(this.parent);
        var gl = this.gl;
        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, v);
        this.current = v;
        this.dirty = false;
    };
    return DepthAttachment;
}(FramebufferAttachment);

var Framebuffer = function Framebuffer(context, width, height, hasDepth) {
    this.context = context;
    this.width = width;
    this.height = height;
    var gl = context.gl;
    var fbo = this.framebuffer = gl.createFramebuffer();
    this.colorAttachment = new ColorAttachment(context, fbo);
    if (hasDepth) {
        this.depthAttachment = new DepthAttachment(context, fbo);
    }
};
Framebuffer.prototype.destroy = function destroy() {
    var gl = this.context.gl;
    var texture = this.colorAttachment.get();
    if (texture) {
        gl.deleteTexture(texture);
    }
    if (this.depthAttachment) {
        var renderbuffer = this.depthAttachment.get();
        if (renderbuffer) {
            gl.deleteRenderbuffer(renderbuffer);
        }
    }
    gl.deleteFramebuffer(this.framebuffer);
};

var ALWAYS = 519;
var DepthMode = function DepthMode(depthFunc, depthMask, depthRange) {
    this.func = depthFunc;
    this.mask = depthMask;
    this.range = depthRange;
};
DepthMode.ReadOnly = false;
DepthMode.ReadWrite = true;
DepthMode.disabled = new DepthMode(ALWAYS, DepthMode.ReadOnly, [
    0,
    1
]);

var ALWAYS$1 = 519;
var KEEP = 7680;
var StencilMode = function StencilMode(test, ref, mask, fail, depthFail, pass) {
    this.test = test;
    this.ref = ref;
    this.mask = mask;
    this.fail = fail;
    this.depthFail = depthFail;
    this.pass = pass;
};
StencilMode.disabled = new StencilMode({
    func: ALWAYS$1,
    mask: 0
}, 0, 0, KEEP, KEEP, KEEP);

var ZERO = 0;
var ONE = 1;
var ONE_MINUS_SRC_ALPHA = 771;
var ColorMode = function ColorMode(blendFunction, blendColor, mask) {
    this.blendFunction = blendFunction;
    this.blendColor = blendColor;
    this.mask = mask;
};
ColorMode.Replace = [
    ONE,
    ZERO
];
ColorMode.disabled = new ColorMode(ColorMode.Replace, performance.Color.transparent, [
    false,
    false,
    false,
    false
]);
ColorMode.unblended = new ColorMode(ColorMode.Replace, performance.Color.transparent, [
    true,
    true,
    true,
    true
]);
ColorMode.alphaBlended = new ColorMode([
    ONE,
    ONE_MINUS_SRC_ALPHA
], performance.Color.transparent, [
    true,
    true,
    true,
    true
]);

var BACK = 1029;
var CCW = 2305;
var CullFaceMode = function CullFaceMode(enable, mode, frontFace) {
    this.enable = enable;
    this.mode = mode;
    this.frontFace = frontFace;
};
CullFaceMode.disabled = new CullFaceMode(false, BACK, CCW);
CullFaceMode.backCCW = new CullFaceMode(true, BACK, CCW);

var Context = function Context(gl) {
    this.gl = gl;
    this.extVertexArrayObject = this.gl.getExtension('OES_vertex_array_object');
    this.clearColor = new ClearColor(this);
    this.clearDepth = new ClearDepth(this);
    this.clearStencil = new ClearStencil(this);
    this.colorMask = new ColorMask(this);
    this.depthMask = new DepthMask(this);
    this.stencilMask = new StencilMask(this);
    this.stencilFunc = new StencilFunc(this);
    this.stencilOp = new StencilOp(this);
    this.stencilTest = new StencilTest(this);
    this.depthRange = new DepthRange(this);
    this.depthTest = new DepthTest(this);
    this.depthFunc = new DepthFunc(this);
    this.blend = new Blend(this);
    this.blendFunc = new BlendFunc(this);
    this.blendColor = new BlendColor(this);
    this.blendEquation = new BlendEquation(this);
    this.cullFace = new CullFace(this);
    this.cullFaceSide = new CullFaceSide(this);
    this.frontFace = new FrontFace(this);
    this.program = new Program(this);
    this.activeTexture = new ActiveTextureUnit(this);
    this.viewport = new Viewport(this);
    this.bindFramebuffer = new BindFramebuffer(this);
    this.bindRenderbuffer = new BindRenderbuffer(this);
    this.bindTexture = new BindTexture(this);
    this.bindVertexBuffer = new BindVertexBuffer(this);
    this.bindElementBuffer = new BindElementBuffer(this);
    this.bindVertexArrayOES = this.extVertexArrayObject && new BindVertexArrayOES(this);
    this.pixelStoreUnpack = new PixelStoreUnpack(this);
    this.pixelStoreUnpackPremultiplyAlpha = new PixelStoreUnpackPremultiplyAlpha(this);
    this.pixelStoreUnpackFlipY = new PixelStoreUnpackFlipY(this);
    this.extTextureFilterAnisotropic = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
    if (this.extTextureFilterAnisotropic) {
        this.extTextureFilterAnisotropicMax = gl.getParameter(this.extTextureFilterAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
    }
    this.extTextureHalfFloat = gl.getExtension('OES_texture_half_float');
    if (this.extTextureHalfFloat) {
        gl.getExtension('OES_texture_half_float_linear');
        this.extRenderToTextureHalfFloat = gl.getExtension('EXT_color_buffer_half_float');
    }
    this.extTimerQuery = gl.getExtension('EXT_disjoint_timer_query');
    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
};
Context.prototype.setDefault = function setDefault() {
    this.unbindVAO();
    this.clearColor.setDefault();
    this.clearDepth.setDefault();
    this.clearStencil.setDefault();
    this.colorMask.setDefault();
    this.depthMask.setDefault();
    this.stencilMask.setDefault();
    this.stencilFunc.setDefault();
    this.stencilOp.setDefault();
    this.stencilTest.setDefault();
    this.depthRange.setDefault();
    this.depthTest.setDefault();
    this.depthFunc.setDefault();
    this.blend.setDefault();
    this.blendFunc.setDefault();
    this.blendColor.setDefault();
    this.blendEquation.setDefault();
    this.cullFace.setDefault();
    this.cullFaceSide.setDefault();
    this.frontFace.setDefault();
    this.program.setDefault();
    this.activeTexture.setDefault();
    this.bindFramebuffer.setDefault();
    this.pixelStoreUnpack.setDefault();
    this.pixelStoreUnpackPremultiplyAlpha.setDefault();
    this.pixelStoreUnpackFlipY.setDefault();
};
Context.prototype.setDirty = function setDirty() {
    this.clearColor.dirty = true;
    this.clearDepth.dirty = true;
    this.clearStencil.dirty = true;
    this.colorMask.dirty = true;
    this.depthMask.dirty = true;
    this.stencilMask.dirty = true;
    this.stencilFunc.dirty = true;
    this.stencilOp.dirty = true;
    this.stencilTest.dirty = true;
    this.depthRange.dirty = true;
    this.depthTest.dirty = true;
    this.depthFunc.dirty = true;
    this.blend.dirty = true;
    this.blendFunc.dirty = true;
    this.blendColor.dirty = true;
    this.blendEquation.dirty = true;
    this.cullFace.dirty = true;
    this.cullFaceSide.dirty = true;
    this.frontFace.dirty = true;
    this.program.dirty = true;
    this.activeTexture.dirty = true;
    this.viewport.dirty = true;
    this.bindFramebuffer.dirty = true;
    this.bindRenderbuffer.dirty = true;
    this.bindTexture.dirty = true;
    this.bindVertexBuffer.dirty = true;
    this.bindElementBuffer.dirty = true;
    if (this.extVertexArrayObject) {
        this.bindVertexArrayOES.dirty = true;
    }
    this.pixelStoreUnpack.dirty = true;
    this.pixelStoreUnpackPremultiplyAlpha.dirty = true;
    this.pixelStoreUnpackFlipY.dirty = true;
};
Context.prototype.createIndexBuffer = function createIndexBuffer(array, dynamicDraw) {
    return new IndexBuffer(this, array, dynamicDraw);
};
Context.prototype.createVertexBuffer = function createVertexBuffer(array, attributes, dynamicDraw) {
    return new VertexBuffer(this, array, attributes, dynamicDraw);
};
Context.prototype.createRenderbuffer = function createRenderbuffer(storageFormat, width, height) {
    var gl = this.gl;
    var rbo = gl.createRenderbuffer();
    this.bindRenderbuffer.set(rbo);
    gl.renderbufferStorage(gl.RENDERBUFFER, storageFormat, width, height);
    this.bindRenderbuffer.set(null);
    return rbo;
};
Context.prototype.createFramebuffer = function createFramebuffer(width, height, hasDepth) {
    return new Framebuffer(this, width, height, hasDepth);
};
Context.prototype.clear = function clear(ref) {
    var color = ref.color;
    var depth = ref.depth;
    var gl = this.gl;
    var mask = 0;
    if (color) {
        mask |= gl.COLOR_BUFFER_BIT;
        this.clearColor.set(color);
        this.colorMask.set([
            true,
            true,
            true,
            true
        ]);
    }
    if (typeof depth !== 'undefined') {
        mask |= gl.DEPTH_BUFFER_BIT;
        this.depthRange.set([
            0,
            1
        ]);
        this.clearDepth.set(depth);
        this.depthMask.set(true);
    }
    gl.clear(mask);
};
Context.prototype.setCullFace = function setCullFace(cullFaceMode) {
    if (cullFaceMode.enable === false) {
        this.cullFace.set(false);
    } else {
        this.cullFace.set(true);
        this.cullFaceSide.set(cullFaceMode.mode);
        this.frontFace.set(cullFaceMode.frontFace);
    }
};
Context.prototype.setDepthMode = function setDepthMode(depthMode) {
    if (depthMode.func === this.gl.ALWAYS && !depthMode.mask) {
        this.depthTest.set(false);
    } else {
        this.depthTest.set(true);
        this.depthFunc.set(depthMode.func);
        this.depthMask.set(depthMode.mask);
        this.depthRange.set(depthMode.range);
    }
};
Context.prototype.setStencilMode = function setStencilMode(stencilMode) {
    if (stencilMode.test.func === this.gl.ALWAYS && !stencilMode.mask) {
        this.stencilTest.set(false);
    } else {
        this.stencilTest.set(true);
        this.stencilMask.set(stencilMode.mask);
        this.stencilOp.set([
            stencilMode.fail,
            stencilMode.depthFail,
            stencilMode.pass
        ]);
        this.stencilFunc.set({
            func: stencilMode.test.func,
            ref: stencilMode.ref,
            mask: stencilMode.test.mask
        });
    }
};
Context.prototype.setColorMode = function setColorMode(colorMode) {
    if (performance.deepEqual(colorMode.blendFunction, ColorMode.Replace)) {
        this.blend.set(false);
    } else {
        this.blend.set(true);
        this.blendFunc.set(colorMode.blendFunction);
        this.blendColor.set(colorMode.blendColor);
    }
    this.colorMask.set(colorMode.mask);
};
Context.prototype.unbindVAO = function unbindVAO() {
    if (this.extVertexArrayObject) {
        this.bindVertexArrayOES.set(null);
    }
};

var SourceCache = function (Evented) {
    function SourceCache(id, options, dispatcher) {
        var this$1 = this;
        Evented.call(this);
        this.id = id;
        this.dispatcher = dispatcher;
        this.on('data', function (e) {
            if (e.dataType === 'source' && e.sourceDataType === 'metadata') {
                this$1._sourceLoaded = true;
            }
            if (this$1._sourceLoaded && !this$1._paused && e.dataType === 'source' && e.sourceDataType === 'content') {
                this$1.reload();
                if (this$1.transform) {
                    this$1.update(this$1.transform);
                }
            }
        });
        this.on('error', function () {
            this$1._sourceErrored = true;
        });
        this._source = create(id, options, dispatcher, this);
        this._tiles = {};
        this._cache = new TileCache(0, this._unloadTile.bind(this));
        this._timers = {};
        this._cacheTimers = {};
        this._maxTileCacheSize = null;
        this._loadedParentTiles = {};
        this._coveredTiles = {};
        this._state = new performance.SourceFeatureState();
    }
    if (Evented)
        SourceCache.__proto__ = Evented;
    SourceCache.prototype = Object.create(Evented && Evented.prototype);
    SourceCache.prototype.constructor = SourceCache;
    SourceCache.prototype.onAdd = function onAdd(map) {
        this.map = map;
        this._maxTileCacheSize = map ? map._maxTileCacheSize : null;
        if (this._source && this._source.onAdd) {
            this._source.onAdd(map);
        }
    };
    SourceCache.prototype.onRemove = function onRemove(map) {
        if (this._source && this._source.onRemove) {
            this._source.onRemove(map);
        }
    };
    SourceCache.prototype.loaded = function loaded() {
        if (this._sourceErrored) {
            return true;
        }
        if (!this._sourceLoaded) {
            return false;
        }
        if (!this._source.loaded()) {
            return false;
        }
        for (var t in this._tiles) {
            var tile = this._tiles[t];
            if (tile.state !== 'loaded' && tile.state !== 'errored') {
                return false;
            }
        }
        return true;
    };
    SourceCache.prototype.getSource = function getSource() {
        return this._source;
    };
    SourceCache.prototype.pause = function pause() {
        this._paused = true;
    };
    SourceCache.prototype.resume = function resume() {
        if (!this._paused) {
            return;
        }
        var shouldReload = this._shouldReloadOnResume;
        this._paused = false;
        this._shouldReloadOnResume = false;
        if (shouldReload) {
            this.reload();
        }
        if (this.transform) {
            this.update(this.transform);
        }
    };
    SourceCache.prototype._loadTile = function _loadTile(tile, callback) {
        return this._source.loadTile(tile, callback);
    };
    SourceCache.prototype._unloadTile = function _unloadTile(tile) {
        if (this._source.unloadTile) {
            return this._source.unloadTile(tile, function () {
            });
        }
    };
    SourceCache.prototype._abortTile = function _abortTile(tile) {
        if (this._source.abortTile) {
            return this._source.abortTile(tile, function () {
            });
        }
    };
    SourceCache.prototype.serialize = function serialize() {
        return this._source.serialize();
    };
    SourceCache.prototype.prepare = function prepare(context) {
        if (this._source.prepare) {
            this._source.prepare();
        }
        this._state.coalesceChanges(this._tiles, this.map ? this.map.painter : null);
        for (var i in this._tiles) {
            var tile = this._tiles[i];
            tile.upload(context);
            tile.prepare(this.map.style.imageManager);
        }
    };
    SourceCache.prototype.getIds = function getIds() {
        return performance.values(this._tiles).map(function (tile) {
            return tile.tileID;
        }).sort(compareTileId).map(function (id) {
            return id.key;
        });
    };
    SourceCache.prototype.getRenderableIds = function getRenderableIds(symbolLayer) {
        var this$1 = this;
        var renderables = [];
        for (var id in this._tiles) {
            if (this._isIdRenderable(id, symbolLayer)) {
                renderables.push(this._tiles[id]);
            }
        }
        if (symbolLayer) {
            return renderables.sort(function (a_, b_) {
                var a = a_.tileID;
                var b = b_.tileID;
                var rotatedA = new performance.Point(a.canonical.x, a.canonical.y)._rotate(this$1.transform.angle);
                var rotatedB = new performance.Point(b.canonical.x, b.canonical.y)._rotate(this$1.transform.angle);
                return a.overscaledZ - b.overscaledZ || rotatedB.y - rotatedA.y || rotatedB.x - rotatedA.x;
            }).map(function (tile) {
                return tile.tileID.key;
            });
        }
        return renderables.map(function (tile) {
            return tile.tileID;
        }).sort(compareTileId).map(function (id) {
            return id.key;
        });
    };
    SourceCache.prototype.hasRenderableParent = function hasRenderableParent(tileID) {
        var parentTile = this.findLoadedParent(tileID, 0);
        if (parentTile) {
            return this._isIdRenderable(parentTile.tileID.key);
        }
        return false;
    };
    SourceCache.prototype._isIdRenderable = function _isIdRenderable(id, symbolLayer) {
        return this._tiles[id] && this._tiles[id].hasData() && !this._coveredTiles[id] && (symbolLayer || !this._tiles[id].holdingForFade());
    };
    SourceCache.prototype.reload = function reload() {
        if (this._paused) {
            this._shouldReloadOnResume = true;
            return;
        }
        this._cache.reset();
        for (var i in this._tiles) {
            if (this._tiles[i].state !== 'errored') {
                this._reloadTile(i, 'reloading');
            }
        }
    };
    SourceCache.prototype._reloadTile = function _reloadTile(id, state) {
        var tile = this._tiles[id];
        if (!tile) {
            return;
        }
        if (tile.state !== 'loading') {
            tile.state = state;
        }
        this._loadTile(tile, this._tileLoaded.bind(this, tile, id, state));
    };
    SourceCache.prototype._tileLoaded = function _tileLoaded(tile, id, previousState, err) {
        if (err) {
            tile.state = 'errored';
            if (err.status !== 404) {
                this._source.fire(new performance.ErrorEvent(err, { tile: tile }));
            } else {
                this.update(this.transform);
            }
            return;
        }
        tile.timeAdded = performance.browser.now();
        if (previousState === 'expired') {
            tile.refreshedUponExpiration = true;
        }
        this._setTileReloadTimer(id, tile);
        if (this.getSource().type === 'raster-dem' && tile.dem) {
            this._backfillDEM(tile);
        }
        this._state.initializeTileState(tile, this.map ? this.map.painter : null);
        this._source.fire(new performance.Event('data', {
            dataType: 'source',
            tile: tile,
            coord: tile.tileID
        }));
    };
    SourceCache.prototype._backfillDEM = function _backfillDEM(tile) {
        var renderables = this.getRenderableIds();
        for (var i = 0; i < renderables.length; i++) {
            var borderId = renderables[i];
            if (tile.neighboringTiles && tile.neighboringTiles[borderId]) {
                var borderTile = this.getTileByID(borderId);
                fillBorder(tile, borderTile);
                fillBorder(borderTile, tile);
            }
        }
        function fillBorder(tile, borderTile) {
            tile.needsHillshadePrepare = true;
            var dx = borderTile.tileID.canonical.x - tile.tileID.canonical.x;
            var dy = borderTile.tileID.canonical.y - tile.tileID.canonical.y;
            var dim = Math.pow(2, tile.tileID.canonical.z);
            var borderId = borderTile.tileID.key;
            if (dx === 0 && dy === 0) {
                return;
            }
            if (Math.abs(dy) > 1) {
                return;
            }
            if (Math.abs(dx) > 1) {
                if (Math.abs(dx + dim) === 1) {
                    dx += dim;
                } else if (Math.abs(dx - dim) === 1) {
                    dx -= dim;
                }
            }
            if (!borderTile.dem || !tile.dem) {
                return;
            }
            tile.dem.backfillBorder(borderTile.dem, dx, dy);
            if (tile.neighboringTiles && tile.neighboringTiles[borderId]) {
                tile.neighboringTiles[borderId].backfilled = true;
            }
        }
    };
    SourceCache.prototype.getTile = function getTile(tileID) {
        return this.getTileByID(tileID.key);
    };
    SourceCache.prototype.getTileByID = function getTileByID(id) {
        return this._tiles[id];
    };
    SourceCache.prototype._retainLoadedChildren = function _retainLoadedChildren(idealTiles, zoom, maxCoveringZoom, retain) {
        for (var id in this._tiles) {
            var tile = this._tiles[id];
            if (retain[id] || !tile.hasData() || tile.tileID.overscaledZ <= zoom || tile.tileID.overscaledZ > maxCoveringZoom) {
                continue;
            }
            var topmostLoadedID = tile.tileID;
            while (tile && tile.tileID.overscaledZ > zoom + 1) {
                var parentID = tile.tileID.scaledTo(tile.tileID.overscaledZ - 1);
                tile = this._tiles[parentID.key];
                if (tile && tile.hasData()) {
                    topmostLoadedID = parentID;
                }
            }
            var tileID = topmostLoadedID;
            while (tileID.overscaledZ > zoom) {
                tileID = tileID.scaledTo(tileID.overscaledZ - 1);
                if (idealTiles[tileID.key]) {
                    retain[topmostLoadedID.key] = topmostLoadedID;
                    break;
                }
            }
        }
    };
    SourceCache.prototype.findLoadedParent = function findLoadedParent(tileID, minCoveringZoom) {
        if (tileID.key in this._loadedParentTiles) {
            var parent = this._loadedParentTiles[tileID.key];
            if (parent && parent.tileID.overscaledZ >= minCoveringZoom) {
                return parent;
            } else {
                return null;
            }
        }
        for (var z = tileID.overscaledZ - 1; z >= minCoveringZoom; z--) {
            var parentTileID = tileID.scaledTo(z);
            var tile = this._getLoadedTile(parentTileID);
            if (tile) {
                return tile;
            }
        }
    };
    SourceCache.prototype._getLoadedTile = function _getLoadedTile(tileID) {
        var tile = this._tiles[tileID.key];
        if (tile && tile.hasData()) {
            return tile;
        }
        var cachedTile = this._cache.getByKey(tileID.wrapped().key);
        return cachedTile;
    };
    SourceCache.prototype.updateCacheSize = function updateCacheSize(transform) {
        var widthInTiles = Math.ceil(transform.width / this._source.tileSize) + 1;
        var heightInTiles = Math.ceil(transform.height / this._source.tileSize) + 1;
        var approxTilesInView = widthInTiles * heightInTiles;
        var commonZoomRange = 5;
        var viewDependentMaxSize = Math.floor(approxTilesInView * commonZoomRange);
        var maxSize = typeof this._maxTileCacheSize === 'number' ? Math.min(this._maxTileCacheSize, viewDependentMaxSize) : viewDependentMaxSize;
        this._cache.setMaxSize(maxSize);
    };
    SourceCache.prototype.handleWrapJump = function handleWrapJump(lng) {
        var prevLng = this._prevLng === undefined ? lng : this._prevLng;
        var lngDifference = lng - prevLng;
        var worldDifference = lngDifference / 360;
        var wrapDelta = Math.round(worldDifference);
        this._prevLng = lng;
        if (wrapDelta) {
            var tiles = {};
            for (var key in this._tiles) {
                var tile = this._tiles[key];
                tile.tileID = tile.tileID.unwrapTo(tile.tileID.wrap + wrapDelta);
                tiles[tile.tileID.key] = tile;
            }
            this._tiles = tiles;
            for (var id in this._timers) {
                clearTimeout(this._timers[id]);
                delete this._timers[id];
            }
            for (var id$1 in this._tiles) {
                var tile$1 = this._tiles[id$1];
                this._setTileReloadTimer(id$1, tile$1);
            }
        }
    };
    SourceCache.prototype.update = function update(transform) {
        var this$1 = this;
        this.transform = transform;
        if (!this._sourceLoaded || this._paused) {
            return;
        }
        this.updateCacheSize(transform);
        this.handleWrapJump(this.transform.center.lng);
        this._coveredTiles = {};
        var idealTileIDs;
        if (!this.used) {
            idealTileIDs = [];
        } else if (this._source.tileID) {
            idealTileIDs = transform.getVisibleUnwrappedCoordinates(this._source.tileID).map(function (unwrapped) {
                return new performance.OverscaledTileID(unwrapped.canonical.z, unwrapped.wrap, unwrapped.canonical.z, unwrapped.canonical.x, unwrapped.canonical.y);
            });
        } else {
            idealTileIDs = transform.coveringTiles({
                tileSize: this._source.tileSize,
                minzoom: this._source.minzoom,
                maxzoom: this._source.maxzoom,
                roundZoom: this._source.roundZoom,
                reparseOverscaled: this._source.reparseOverscaled
            });
            if (this._source.hasTile) {
                idealTileIDs = idealTileIDs.filter(function (coord) {
                    return this$1._source.hasTile(coord);
                });
            }
        }
        var zoom = transform.coveringZoomLevel(this._source);
        var minCoveringZoom = Math.max(zoom - SourceCache.maxOverzooming, this._source.minzoom);
        var maxCoveringZoom = Math.max(zoom + SourceCache.maxUnderzooming, this._source.minzoom);
        var retain = this._updateRetainedTiles(idealTileIDs, zoom);
        if (isRasterType(this._source.type)) {
            var parentsForFading = {};
            var fadingTiles = {};
            var ids = Object.keys(retain);
            for (var i = 0, list = ids; i < list.length; i += 1) {
                var id = list[i];
                var tileID = retain[id];
                var tile = this._tiles[id];
                if (!tile || tile.fadeEndTime && tile.fadeEndTime <= performance.browser.now()) {
                    continue;
                }
                var parentTile = this.findLoadedParent(tileID, minCoveringZoom);
                if (parentTile) {
                    this._addTile(parentTile.tileID);
                    parentsForFading[parentTile.tileID.key] = parentTile.tileID;
                }
                fadingTiles[id] = tileID;
            }
            this._retainLoadedChildren(fadingTiles, zoom, maxCoveringZoom, retain);
            for (var id$1 in parentsForFading) {
                if (!retain[id$1]) {
                    this._coveredTiles[id$1] = true;
                    retain[id$1] = parentsForFading[id$1];
                }
            }
        }
        for (var retainedId in retain) {
            this._tiles[retainedId].clearFadeHold();
        }
        var remove = performance.keysDifference(this._tiles, retain);
        for (var i$1 = 0, list$1 = remove; i$1 < list$1.length; i$1 += 1) {
            var tileID$1 = list$1[i$1];
            var tile$1 = this._tiles[tileID$1];
            if (tile$1.hasSymbolBuckets && !tile$1.holdingForFade()) {
                tile$1.setHoldDuration(this.map._fadeDuration);
            } else if (!tile$1.hasSymbolBuckets || tile$1.symbolFadeFinished()) {
                this._removeTile(tileID$1);
            }
        }
        this._updateLoadedParentTileCache();
    };
    SourceCache.prototype.releaseSymbolFadeTiles = function releaseSymbolFadeTiles() {
        for (var id in this._tiles) {
            if (this._tiles[id].holdingForFade()) {
                this._removeTile(id);
            }
        }
    };
    SourceCache.prototype._updateRetainedTiles = function _updateRetainedTiles(idealTileIDs, zoom) {
        var retain = {};
        var checked = {};
        var minCoveringZoom = Math.max(zoom - SourceCache.maxOverzooming, this._source.minzoom);
        var maxCoveringZoom = Math.max(zoom + SourceCache.maxUnderzooming, this._source.minzoom);
        var missingTiles = {};
        for (var i = 0, list = idealTileIDs; i < list.length; i += 1) {
            var tileID = list[i];
            var tile = this._addTile(tileID);
            retain[tileID.key] = tileID;
            if (tile.hasData()) {
                continue;
            }
            if (zoom < this._source.maxzoom) {
                missingTiles[tileID.key] = tileID;
            }
        }
        this._retainLoadedChildren(missingTiles, zoom, maxCoveringZoom, retain);
        for (var i$1 = 0, list$1 = idealTileIDs; i$1 < list$1.length; i$1 += 1) {
            var tileID$1 = list$1[i$1];
            var tile$1 = this._tiles[tileID$1.key];
            if (tile$1.hasData()) {
                continue;
            }
            if (zoom + 1 > this._source.maxzoom) {
                var childCoord = tileID$1.children(this._source.maxzoom)[0];
                var childTile = this.getTile(childCoord);
                if (!!childTile && childTile.hasData()) {
                    retain[childCoord.key] = childCoord;
                    continue;
                }
            } else {
                var children = tileID$1.children(this._source.maxzoom);
                if (retain[children[0].key] && retain[children[1].key] && retain[children[2].key] && retain[children[3].key]) {
                    continue;
                }
            }
            var parentWasRequested = tile$1.wasRequested();
            for (var overscaledZ = tileID$1.overscaledZ - 1; overscaledZ >= minCoveringZoom; --overscaledZ) {
                var parentId = tileID$1.scaledTo(overscaledZ);
                if (checked[parentId.key]) {
                    break;
                }
                checked[parentId.key] = true;
                tile$1 = this.getTile(parentId);
                if (!tile$1 && parentWasRequested) {
                    tile$1 = this._addTile(parentId);
                }
                if (tile$1) {
                    retain[parentId.key] = parentId;
                    parentWasRequested = tile$1.wasRequested();
                    if (tile$1.hasData()) {
                        break;
                    }
                }
            }
        }
        return retain;
    };
    SourceCache.prototype._updateLoadedParentTileCache = function _updateLoadedParentTileCache() {
        this._loadedParentTiles = {};
        for (var tileKey in this._tiles) {
            var path = [];
            var parentTile = void 0;
            var currentId = this._tiles[tileKey].tileID;
            while (currentId.overscaledZ > 0) {
                if (currentId.key in this._loadedParentTiles) {
                    parentTile = this._loadedParentTiles[currentId.key];
                    break;
                }
                path.push(currentId.key);
                var parentId = currentId.scaledTo(currentId.overscaledZ - 1);
                parentTile = this._getLoadedTile(parentId);
                if (parentTile) {
                    break;
                }
                currentId = parentId;
            }
            for (var i = 0, list = path; i < list.length; i += 1) {
                var key = list[i];
                this._loadedParentTiles[key] = parentTile;
            }
        }
    };
    SourceCache.prototype._addTile = function _addTile(tileID) {
        var tile = this._tiles[tileID.key];
        if (tile) {
            return tile;
        }
        tile = this._cache.getAndRemove(tileID);
        if (tile) {
            this._setTileReloadTimer(tileID.key, tile);
            tile.tileID = tileID;
            this._state.initializeTileState(tile, this.map ? this.map.painter : null);
            if (this._cacheTimers[tileID.key]) {
                clearTimeout(this._cacheTimers[tileID.key]);
                delete this._cacheTimers[tileID.key];
                this._setTileReloadTimer(tileID.key, tile);
            }
        }
        var cached = Boolean(tile);
        if (!cached) {
            tile = new performance.Tile(tileID, this._source.tileSize * tileID.overscaleFactor());
            this._loadTile(tile, this._tileLoaded.bind(this, tile, tileID.key, tile.state));
        }
        if (!tile) {
            return null;
        }
        tile.uses++;
        this._tiles[tileID.key] = tile;
        if (!cached) {
            this._source.fire(new performance.Event('dataloading', {
                tile: tile,
                coord: tile.tileID,
                dataType: 'source'
            }));
        }
        return tile;
    };
    SourceCache.prototype._setTileReloadTimer = function _setTileReloadTimer(id, tile) {
        var this$1 = this;
        if (id in this._timers) {
            clearTimeout(this._timers[id]);
            delete this._timers[id];
        }
        var expiryTimeout = tile.getExpiryTimeout();
        if (expiryTimeout) {
            this._timers[id] = setTimeout(function () {
                this$1._reloadTile(id, 'expired');
                delete this$1._timers[id];
            }, expiryTimeout);
        }
    };
    SourceCache.prototype._removeTile = function _removeTile(id) {
        var tile = this._tiles[id];
        if (!tile) {
            return;
        }
        tile.uses--;
        delete this._tiles[id];
        if (this._timers[id]) {
            clearTimeout(this._timers[id]);
            delete this._timers[id];
        }
        if (tile.uses > 0) {
            return;
        }
        if (tile.hasData() && tile.state !== 'reloading') {
            this._cache.add(tile.tileID, tile, tile.getExpiryTimeout());
        } else {
            tile.aborted = true;
            this._abortTile(tile);
            this._unloadTile(tile);
        }
    };
    SourceCache.prototype.clearTiles = function clearTiles() {
        this._shouldReloadOnResume = false;
        this._paused = false;
        for (var id in this._tiles) {
            this._removeTile(id);
        }
        this._cache.reset();
    };
    SourceCache.prototype.tilesIn = function tilesIn(pointQueryGeometry, maxPitchScaleFactor, has3DLayer) {
        var this$1 = this;
        var tileResults = [];
        var transform = this.transform;
        if (!transform) {
            return tileResults;
        }
        var cameraPointQueryGeometry = has3DLayer ? transform.getCameraQueryGeometry(pointQueryGeometry) : pointQueryGeometry;
        var queryGeometry = pointQueryGeometry.map(function (p) {
            return transform.pointCoordinate(p);
        });
        var cameraQueryGeometry = cameraPointQueryGeometry.map(function (p) {
            return transform.pointCoordinate(p);
        });
        var ids = this.getIds();
        var minX = Infinity;
        var minY = Infinity;
        var maxX = -Infinity;
        var maxY = -Infinity;
        for (var i$1 = 0, list = cameraQueryGeometry; i$1 < list.length; i$1 += 1) {
            var p = list[i$1];
            minX = Math.min(minX, p.x);
            minY = Math.min(minY, p.y);
            maxX = Math.max(maxX, p.x);
            maxY = Math.max(maxY, p.y);
        }
        var loop = function (i) {
            var tile = this$1._tiles[ids[i]];
            if (tile.holdingForFade()) {
                return;
            }
            var tileID = tile.tileID;
            var scale = Math.pow(2, transform.zoom - tile.tileID.overscaledZ);
            var queryPadding = maxPitchScaleFactor * tile.queryPadding * performance.EXTENT / tile.tileSize / scale;
            var tileSpaceBounds = [
                tileID.getTilePoint(new performance.MercatorCoordinate(minX, minY)),
                tileID.getTilePoint(new performance.MercatorCoordinate(maxX, maxY))
            ];
            if (tileSpaceBounds[0].x - queryPadding < performance.EXTENT && tileSpaceBounds[0].y - queryPadding < performance.EXTENT && tileSpaceBounds[1].x + queryPadding >= 0 && tileSpaceBounds[1].y + queryPadding >= 0) {
                var tileSpaceQueryGeometry = queryGeometry.map(function (c) {
                    return tileID.getTilePoint(c);
                });
                var tileSpaceCameraQueryGeometry = cameraQueryGeometry.map(function (c) {
                    return tileID.getTilePoint(c);
                });
                tileResults.push({
                    tile: tile,
                    tileID: tileID,
                    queryGeometry: tileSpaceQueryGeometry,
                    cameraQueryGeometry: tileSpaceCameraQueryGeometry,
                    scale: scale
                });
            }
        };
        for (var i = 0; i < ids.length; i++)
            loop(i);
        return tileResults;
    };
    SourceCache.prototype.getVisibleCoordinates = function getVisibleCoordinates(symbolLayer) {
        var this$1 = this;
        var coords = this.getRenderableIds(symbolLayer).map(function (id) {
            return this$1._tiles[id].tileID;
        });
        for (var i = 0, list = coords; i < list.length; i += 1) {
            var coord = list[i];
            coord.posMatrix = this.transform.calculatePosMatrix(coord.toUnwrapped());
        }
        return coords;
    };
    SourceCache.prototype.hasTransition = function hasTransition() {
        if (this._source.hasTransition()) {
            return true;
        }
        if (isRasterType(this._source.type)) {
            for (var id in this._tiles) {
                var tile = this._tiles[id];
                if (tile.fadeEndTime !== undefined && tile.fadeEndTime >= performance.browser.now()) {
                    return true;
                }
            }
        }
        return false;
    };
    SourceCache.prototype.setFeatureState = function setFeatureState(sourceLayer, featureId, state) {
        sourceLayer = sourceLayer || '_geojsonTileLayer';
        this._state.updateState(sourceLayer, featureId, state);
    };
    SourceCache.prototype.removeFeatureState = function removeFeatureState(sourceLayer, featureId, key) {
        sourceLayer = sourceLayer || '_geojsonTileLayer';
        this._state.removeFeatureState(sourceLayer, featureId, key);
    };
    SourceCache.prototype.getFeatureState = function getFeatureState(sourceLayer, featureId) {
        sourceLayer = sourceLayer || '_geojsonTileLayer';
        return this._state.getState(sourceLayer, featureId);
    };
    SourceCache.prototype.setDependencies = function setDependencies(tileKey, namespace, dependencies) {
        var tile = this._tiles[tileKey];
        if (tile) {
            tile.setDependencies(namespace, dependencies);
        }
    };
    SourceCache.prototype.reloadTilesForDependencies = function reloadTilesForDependencies(namespaces, keys) {
        for (var id in this._tiles) {
            var tile = this._tiles[id];
            if (tile.hasDependency(namespaces, keys)) {
                this._reloadTile(id, 'reloading');
            }
        }
        this._cache.filter(function (tile) {
            return !tile.hasDependency(namespaces, keys);
        });
    };
    return SourceCache;
}(performance.Evented);
SourceCache.maxOverzooming = 10;
SourceCache.maxUnderzooming = 3;
function compareTileId(a, b) {
    var aWrap = Math.abs(a.wrap * 2) - +(a.wrap < 0);
    var bWrap = Math.abs(b.wrap * 2) - +(b.wrap < 0);
    return a.overscaledZ - b.overscaledZ || bWrap - aWrap || b.canonical.y - a.canonical.y || b.canonical.x - a.canonical.x;
}
function isRasterType(type) {
    return type === 'raster' || type === 'image' || type === 'video';
}

function WebWorker () {
    return new performance.window.Worker(exported.workerUrl);
}

var PRELOAD_POOL_ID = 'mapboxgl_preloaded_worker_pool';
var WorkerPool = function WorkerPool() {
    this.active = {};
};
WorkerPool.prototype.acquire = function acquire(mapId) {
    if (!this.workers) {
        this.workers = [];
        while (this.workers.length < WorkerPool.workerCount) {
            this.workers.push(new WebWorker());
        }
    }
    this.active[mapId] = true;
    return this.workers.slice();
};
WorkerPool.prototype.release = function release(mapId) {
    delete this.active[mapId];
    if (this.numActive() === 0) {
        this.workers.forEach(function (w) {
            w.terminate();
        });
        this.workers = null;
    }
};
WorkerPool.prototype.isPreloaded = function isPreloaded() {
    return !!this.active[PRELOAD_POOL_ID];
};
WorkerPool.prototype.numActive = function numActive() {
    return Object.keys(this.active).length;
};
var availableLogicalProcessors = Math.floor(performance.browser.hardwareConcurrency / 2);
WorkerPool.workerCount = Math.max(Math.min(availableLogicalProcessors, 6), 1);

var globalWorkerPool;
function getGlobalWorkerPool() {
    if (!globalWorkerPool) {
        globalWorkerPool = new WorkerPool();
    }
    return globalWorkerPool;
}
function prewarm() {
    var workerPool = getGlobalWorkerPool();
    workerPool.acquire(PRELOAD_POOL_ID);
}
function clearPrewarmedResources() {
    var pool = globalWorkerPool;
    if (pool) {
        if (pool.isPreloaded() && pool.numActive() === 1) {
            pool.release(PRELOAD_POOL_ID);
            globalWorkerPool = null;
        } else {
            console.warn('Could not clear WebWorkers since there are active Map instances that still reference it. The pre-warmed WebWorker pool can only be cleared when all map instances have been removed with map.remove()');
        }
    }
}

function deref(layer, parent) {
    var result = {};
    for (var k in layer) {
        if (k !== 'ref') {
            result[k] = layer[k];
        }
    }
    performance.refProperties.forEach(function (k) {
        if (k in parent) {
            result[k] = parent[k];
        }
    });
    return result;
}
function derefLayers(layers) {
    layers = layers.slice();
    var map = Object.create(null);
    for (var i = 0; i < layers.length; i++) {
        map[layers[i].id] = layers[i];
    }
    for (var i$1 = 0; i$1 < layers.length; i$1++) {
        if ('ref' in layers[i$1]) {
            layers[i$1] = deref(layers[i$1], map[layers[i$1].ref]);
        }
    }
    return layers;
}

function emptyStyle() {
    var style = {};
    var version = performance.styleSpec['$version'];
    for (var styleKey in performance.styleSpec['$root']) {
        var spec = performance.styleSpec['$root'][styleKey];
        if (spec.required) {
            var value = null;
            if (styleKey === 'version') {
                value = version;
            } else {
                if (spec.type === 'array') {
                    value = [];
                } else {
                    value = {};
                }
            }
            if (value != null) {
                style[styleKey] = value;
            }
        }
    }
    return style;
}

var operations = {
    setStyle: 'setStyle',
    addLayer: 'addLayer',
    removeLayer: 'removeLayer',
    setPaintProperty: 'setPaintProperty',
    setLayoutProperty: 'setLayoutProperty',
    setFilter: 'setFilter',
    addSource: 'addSource',
    removeSource: 'removeSource',
    setGeoJSONSourceData: 'setGeoJSONSourceData',
    setLayerZoomRange: 'setLayerZoomRange',
    setLayerProperty: 'setLayerProperty',
    setCenter: 'setCenter',
    setZoom: 'setZoom',
    setBearing: 'setBearing',
    setPitch: 'setPitch',
    setSprite: 'setSprite',
    setGlyphs: 'setGlyphs',
    setTransition: 'setTransition',
    setLight: 'setLight'
};
function addSource(sourceId, after, commands) {
    commands.push({
        command: operations.addSource,
        args: [
            sourceId,
            after[sourceId]
        ]
    });
}
function removeSource(sourceId, commands, sourcesRemoved) {
    commands.push({
        command: operations.removeSource,
        args: [sourceId]
    });
    sourcesRemoved[sourceId] = true;
}
function updateSource(sourceId, after, commands, sourcesRemoved) {
    removeSource(sourceId, commands, sourcesRemoved);
    addSource(sourceId, after, commands);
}
function canUpdateGeoJSON(before, after, sourceId) {
    var prop;
    for (prop in before[sourceId]) {
        if (!before[sourceId].hasOwnProperty(prop)) {
            continue;
        }
        if (prop !== 'data' && !performance.deepEqual(before[sourceId][prop], after[sourceId][prop])) {
            return false;
        }
    }
    for (prop in after[sourceId]) {
        if (!after[sourceId].hasOwnProperty(prop)) {
            continue;
        }
        if (prop !== 'data' && !performance.deepEqual(before[sourceId][prop], after[sourceId][prop])) {
            return false;
        }
    }
    return true;
}
function diffSources(before, after, commands, sourcesRemoved) {
    before = before || {};
    after = after || {};
    var sourceId;
    for (sourceId in before) {
        if (!before.hasOwnProperty(sourceId)) {
            continue;
        }
        if (!after.hasOwnProperty(sourceId)) {
            removeSource(sourceId, commands, sourcesRemoved);
        }
    }
    for (sourceId in after) {
        if (!after.hasOwnProperty(sourceId)) {
            continue;
        }
        if (!before.hasOwnProperty(sourceId)) {
            addSource(sourceId, after, commands);
        } else if (!performance.deepEqual(before[sourceId], after[sourceId])) {
            if (before[sourceId].type === 'geojson' && after[sourceId].type === 'geojson' && canUpdateGeoJSON(before, after, sourceId)) {
                commands.push({
                    command: operations.setGeoJSONSourceData,
                    args: [
                        sourceId,
                        after[sourceId].data
                    ]
                });
            } else {
                updateSource(sourceId, after, commands, sourcesRemoved);
            }
        }
    }
}
function diffLayerPropertyChanges(before, after, commands, layerId, klass, command) {
    before = before || {};
    after = after || {};
    var prop;
    for (prop in before) {
        if (!before.hasOwnProperty(prop)) {
            continue;
        }
        if (!performance.deepEqual(before[prop], after[prop])) {
            commands.push({
                command: command,
                args: [
                    layerId,
                    prop,
                    after[prop],
                    klass
                ]
            });
        }
    }
    for (prop in after) {
        if (!after.hasOwnProperty(prop) || before.hasOwnProperty(prop)) {
            continue;
        }
        if (!performance.deepEqual(before[prop], after[prop])) {
            commands.push({
                command: command,
                args: [
                    layerId,
                    prop,
                    after[prop],
                    klass
                ]
            });
        }
    }
}
function pluckId(layer) {
    return layer.id;
}
function indexById(group, layer) {
    group[layer.id] = layer;
    return group;
}
function diffLayers(before, after, commands) {
    before = before || [];
    after = after || [];
    var beforeOrder = before.map(pluckId);
    var afterOrder = after.map(pluckId);
    var beforeIndex = before.reduce(indexById, {});
    var afterIndex = after.reduce(indexById, {});
    var tracker = beforeOrder.slice();
    var clean = Object.create(null);
    var i, d, layerId, beforeLayer, afterLayer, insertBeforeLayerId, prop;
    for (i = 0, d = 0; i < beforeOrder.length; i++) {
        layerId = beforeOrder[i];
        if (!afterIndex.hasOwnProperty(layerId)) {
            commands.push({
                command: operations.removeLayer,
                args: [layerId]
            });
            tracker.splice(tracker.indexOf(layerId, d), 1);
        } else {
            d++;
        }
    }
    for (i = 0, d = 0; i < afterOrder.length; i++) {
        layerId = afterOrder[afterOrder.length - 1 - i];
        if (tracker[tracker.length - 1 - i] === layerId) {
            continue;
        }
        if (beforeIndex.hasOwnProperty(layerId)) {
            commands.push({
                command: operations.removeLayer,
                args: [layerId]
            });
            tracker.splice(tracker.lastIndexOf(layerId, tracker.length - d), 1);
        } else {
            d++;
        }
        insertBeforeLayerId = tracker[tracker.length - i];
        commands.push({
            command: operations.addLayer,
            args: [
                afterIndex[layerId],
                insertBeforeLayerId
            ]
        });
        tracker.splice(tracker.length - i, 0, layerId);
        clean[layerId] = true;
    }
    for (i = 0; i < afterOrder.length; i++) {
        layerId = afterOrder[i];
        beforeLayer = beforeIndex[layerId];
        afterLayer = afterIndex[layerId];
        if (clean[layerId] || performance.deepEqual(beforeLayer, afterLayer)) {
            continue;
        }
        if (!performance.deepEqual(beforeLayer.source, afterLayer.source) || !performance.deepEqual(beforeLayer['source-layer'], afterLayer['source-layer']) || !performance.deepEqual(beforeLayer.type, afterLayer.type)) {
            commands.push({
                command: operations.removeLayer,
                args: [layerId]
            });
            insertBeforeLayerId = tracker[tracker.lastIndexOf(layerId) + 1];
            commands.push({
                command: operations.addLayer,
                args: [
                    afterLayer,
                    insertBeforeLayerId
                ]
            });
            continue;
        }
        diffLayerPropertyChanges(beforeLayer.layout, afterLayer.layout, commands, layerId, null, operations.setLayoutProperty);
        diffLayerPropertyChanges(beforeLayer.paint, afterLayer.paint, commands, layerId, null, operations.setPaintProperty);
        if (!performance.deepEqual(beforeLayer.filter, afterLayer.filter)) {
            commands.push({
                command: operations.setFilter,
                args: [
                    layerId,
                    afterLayer.filter
                ]
            });
        }
        if (!performance.deepEqual(beforeLayer.minzoom, afterLayer.minzoom) || !performance.deepEqual(beforeLayer.maxzoom, afterLayer.maxzoom)) {
            commands.push({
                command: operations.setLayerZoomRange,
                args: [
                    layerId,
                    afterLayer.minzoom,
                    afterLayer.maxzoom
                ]
            });
        }
        for (prop in beforeLayer) {
            if (!beforeLayer.hasOwnProperty(prop)) {
                continue;
            }
            if (prop === 'layout' || prop === 'paint' || prop === 'filter' || prop === 'metadata' || prop === 'minzoom' || prop === 'maxzoom') {
                continue;
            }
            if (prop.indexOf('paint.') === 0) {
                diffLayerPropertyChanges(beforeLayer[prop], afterLayer[prop], commands, layerId, prop.slice(6), operations.setPaintProperty);
            } else if (!performance.deepEqual(beforeLayer[prop], afterLayer[prop])) {
                commands.push({
                    command: operations.setLayerProperty,
                    args: [
                        layerId,
                        prop,
                        afterLayer[prop]
                    ]
                });
            }
        }
        for (prop in afterLayer) {
            if (!afterLayer.hasOwnProperty(prop) || beforeLayer.hasOwnProperty(prop)) {
                continue;
            }
            if (prop === 'layout' || prop === 'paint' || prop === 'filter' || prop === 'metadata' || prop === 'minzoom' || prop === 'maxzoom') {
                continue;
            }
            if (prop.indexOf('paint.') === 0) {
                diffLayerPropertyChanges(beforeLayer[prop], afterLayer[prop], commands, layerId, prop.slice(6), operations.setPaintProperty);
            } else if (!performance.deepEqual(beforeLayer[prop], afterLayer[prop])) {
                commands.push({
                    command: operations.setLayerProperty,
                    args: [
                        layerId,
                        prop,
                        afterLayer[prop]
                    ]
                });
            }
        }
    }
}
function diffStyles(before, after) {
    if (!before) {
        return [{
                command: operations.setStyle,
                args: [after]
            }];
    }
    var commands = [];
    try {
        if (!performance.deepEqual(before.version, after.version)) {
            return [{
                    command: operations.setStyle,
                    args: [after]
                }];
        }
        if (!performance.deepEqual(before.center, after.center)) {
            commands.push({
                command: operations.setCenter,
                args: [after.center]
            });
        }
        if (!performance.deepEqual(before.zoom, after.zoom)) {
            commands.push({
                command: operations.setZoom,
                args: [after.zoom]
            });
        }
        if (!performance.deepEqual(before.bearing, after.bearing)) {
            commands.push({
                command: operations.setBearing,
                args: [after.bearing]
            });
        }
        if (!performance.deepEqual(before.pitch, after.pitch)) {
            commands.push({
                command: operations.setPitch,
                args: [after.pitch]
            });
        }
        if (!performance.deepEqual(before.sprite, after.sprite)) {
            commands.push({
                command: operations.setSprite,
                args: [after.sprite]
            });
        }
        if (!performance.deepEqual(before.glyphs, after.glyphs)) {
            commands.push({
                command: operations.setGlyphs,
                args: [after.glyphs]
            });
        }
        if (!performance.deepEqual(before.transition, after.transition)) {
            commands.push({
                command: operations.setTransition,
                args: [after.transition]
            });
        }
        if (!performance.deepEqual(before.light, after.light)) {
            commands.push({
                command: operations.setLight,
                args: [after.light]
            });
        }
        var sourcesRemoved = {};
        var removeOrAddSourceCommands = [];
        diffSources(before.sources, after.sources, removeOrAddSourceCommands, sourcesRemoved);
        var beforeLayers = [];
        if (before.layers) {
            before.layers.forEach(function (layer) {
                if (sourcesRemoved[layer.source]) {
                    commands.push({
                        command: operations.removeLayer,
                        args: [layer.id]
                    });
                } else {
                    beforeLayers.push(layer);
                }
            });
        }
        commands = commands.concat(removeOrAddSourceCommands);
        diffLayers(beforeLayers, after.layers, commands);
    } catch (e) {
        console.warn('Unable to compute style diff:', e);
        commands = [{
                command: operations.setStyle,
                args: [after]
            }];
    }
    return commands;
}

var PathInterpolator = function PathInterpolator(points_, padding_) {
    this.reset(points_, padding_);
};
PathInterpolator.prototype.reset = function reset(points_, padding_) {
    this.points = points_ || [];
    this._distances = [0];
    for (var i = 1; i < this.points.length; i++) {
        this._distances[i] = this._distances[i - 1] + this.points[i].dist(this.points[i - 1]);
    }
    this.length = this._distances[this._distances.length - 1];
    this.padding = Math.min(padding_ || 0, this.length * 0.5);
    this.paddedLength = this.length - this.padding * 2;
};
PathInterpolator.prototype.lerp = function lerp(t) {
    if (this.points.length === 1) {
        return this.points[0];
    }
    t = performance.clamp(t, 0, 1);
    var currentIndex = 1;
    var distOfCurrentIdx = this._distances[currentIndex];
    var distToTarget = t * this.paddedLength + this.padding;
    while (distOfCurrentIdx < distToTarget && currentIndex < this._distances.length) {
        distOfCurrentIdx = this._distances[++currentIndex];
    }
    var idxOfPrevPoint = currentIndex - 1;
    var distOfPrevIdx = this._distances[idxOfPrevPoint];
    var segmentLength = distOfCurrentIdx - distOfPrevIdx;
    var segmentT = segmentLength > 0 ? (distToTarget - distOfPrevIdx) / segmentLength : 0;
    return this.points[idxOfPrevPoint].mult(1 - segmentT).add(this.points[currentIndex].mult(segmentT));
};

var GridIndex = function GridIndex(width, height, cellSize) {
    var boxCells = this.boxCells = [];
    var circleCells = this.circleCells = [];
    this.xCellCount = Math.ceil(width / cellSize);
    this.yCellCount = Math.ceil(height / cellSize);
    for (var i = 0; i < this.xCellCount * this.yCellCount; i++) {
        boxCells.push([]);
        circleCells.push([]);
    }
    this.circleKeys = [];
    this.boxKeys = [];
    this.bboxes = [];
    this.circles = [];
    this.width = width;
    this.height = height;
    this.xScale = this.xCellCount / width;
    this.yScale = this.yCellCount / height;
    this.boxUid = 0;
    this.circleUid = 0;
};
GridIndex.prototype.keysLength = function keysLength() {
    return this.boxKeys.length + this.circleKeys.length;
};
GridIndex.prototype.insert = function insert(key, x1, y1, x2, y2) {
    this._forEachCell(x1, y1, x2, y2, this._insertBoxCell, this.boxUid++);
    this.boxKeys.push(key);
    this.bboxes.push(x1);
    this.bboxes.push(y1);
    this.bboxes.push(x2);
    this.bboxes.push(y2);
};
GridIndex.prototype.insertCircle = function insertCircle(key, x, y, radius) {
    this._forEachCell(x - radius, y - radius, x + radius, y + radius, this._insertCircleCell, this.circleUid++);
    this.circleKeys.push(key);
    this.circles.push(x);
    this.circles.push(y);
    this.circles.push(radius);
};
GridIndex.prototype._insertBoxCell = function _insertBoxCell(x1, y1, x2, y2, cellIndex, uid) {
    this.boxCells[cellIndex].push(uid);
};
GridIndex.prototype._insertCircleCell = function _insertCircleCell(x1, y1, x2, y2, cellIndex, uid) {
    this.circleCells[cellIndex].push(uid);
};
GridIndex.prototype._query = function _query(x1, y1, x2, y2, hitTest, predicate) {
    if (x2 < 0 || x1 > this.width || y2 < 0 || y1 > this.height) {
        return hitTest ? false : [];
    }
    var result = [];
    if (x1 <= 0 && y1 <= 0 && this.width <= x2 && this.height <= y2) {
        if (hitTest) {
            return true;
        }
        for (var boxUid = 0; boxUid < this.boxKeys.length; boxUid++) {
            result.push({
                key: this.boxKeys[boxUid],
                x1: this.bboxes[boxUid * 4],
                y1: this.bboxes[boxUid * 4 + 1],
                x2: this.bboxes[boxUid * 4 + 2],
                y2: this.bboxes[boxUid * 4 + 3]
            });
        }
        for (var circleUid = 0; circleUid < this.circleKeys.length; circleUid++) {
            var x = this.circles[circleUid * 3];
            var y = this.circles[circleUid * 3 + 1];
            var radius = this.circles[circleUid * 3 + 2];
            result.push({
                key: this.circleKeys[circleUid],
                x1: x - radius,
                y1: y - radius,
                x2: x + radius,
                y2: y + radius
            });
        }
        return predicate ? result.filter(predicate) : result;
    } else {
        var queryArgs = {
            hitTest: hitTest,
            seenUids: {
                box: {},
                circle: {}
            }
        };
        this._forEachCell(x1, y1, x2, y2, this._queryCell, result, queryArgs, predicate);
        return hitTest ? result.length > 0 : result;
    }
};
GridIndex.prototype._queryCircle = function _queryCircle(x, y, radius, hitTest, predicate) {
    var x1 = x - radius;
    var x2 = x + radius;
    var y1 = y - radius;
    var y2 = y + radius;
    if (x2 < 0 || x1 > this.width || y2 < 0 || y1 > this.height) {
        return hitTest ? false : [];
    }
    var result = [];
    var queryArgs = {
        hitTest: hitTest,
        circle: {
            x: x,
            y: y,
            radius: radius
        },
        seenUids: {
            box: {},
            circle: {}
        }
    };
    this._forEachCell(x1, y1, x2, y2, this._queryCellCircle, result, queryArgs, predicate);
    return hitTest ? result.length > 0 : result;
};
GridIndex.prototype.query = function query(x1, y1, x2, y2, predicate) {
    return this._query(x1, y1, x2, y2, false, predicate);
};
GridIndex.prototype.hitTest = function hitTest(x1, y1, x2, y2, predicate) {
    return this._query(x1, y1, x2, y2, true, predicate);
};
GridIndex.prototype.hitTestCircle = function hitTestCircle(x, y, radius, predicate) {
    return this._queryCircle(x, y, radius, true, predicate);
};
GridIndex.prototype._queryCell = function _queryCell(x1, y1, x2, y2, cellIndex, result, queryArgs, predicate) {
    var seenUids = queryArgs.seenUids;
    var boxCell = this.boxCells[cellIndex];
    if (boxCell !== null) {
        var bboxes = this.bboxes;
        for (var i = 0, list = boxCell; i < list.length; i += 1) {
            var boxUid = list[i];
            if (!seenUids.box[boxUid]) {
                seenUids.box[boxUid] = true;
                var offset = boxUid * 4;
                if (x1 <= bboxes[offset + 2] && y1 <= bboxes[offset + 3] && x2 >= bboxes[offset + 0] && y2 >= bboxes[offset + 1] && (!predicate || predicate(this.boxKeys[boxUid]))) {
                    if (queryArgs.hitTest) {
                        result.push(true);
                        return true;
                    } else {
                        result.push({
                            key: this.boxKeys[boxUid],
                            x1: bboxes[offset],
                            y1: bboxes[offset + 1],
                            x2: bboxes[offset + 2],
                            y2: bboxes[offset + 3]
                        });
                    }
                }
            }
        }
    }
    var circleCell = this.circleCells[cellIndex];
    if (circleCell !== null) {
        var circles = this.circles;
        for (var i$1 = 0, list$1 = circleCell; i$1 < list$1.length; i$1 += 1) {
            var circleUid = list$1[i$1];
            if (!seenUids.circle[circleUid]) {
                seenUids.circle[circleUid] = true;
                var offset$1 = circleUid * 3;
                if (this._circleAndRectCollide(circles[offset$1], circles[offset$1 + 1], circles[offset$1 + 2], x1, y1, x2, y2) && (!predicate || predicate(this.circleKeys[circleUid]))) {
                    if (queryArgs.hitTest) {
                        result.push(true);
                        return true;
                    } else {
                        var x = circles[offset$1];
                        var y = circles[offset$1 + 1];
                        var radius = circles[offset$1 + 2];
                        result.push({
                            key: this.circleKeys[circleUid],
                            x1: x - radius,
                            y1: y - radius,
                            x2: x + radius,
                            y2: y + radius
                        });
                    }
                }
            }
        }
    }
};
GridIndex.prototype._queryCellCircle = function _queryCellCircle(x1, y1, x2, y2, cellIndex, result, queryArgs, predicate) {
    var circle = queryArgs.circle;
    var seenUids = queryArgs.seenUids;
    var boxCell = this.boxCells[cellIndex];
    if (boxCell !== null) {
        var bboxes = this.bboxes;
        for (var i = 0, list = boxCell; i < list.length; i += 1) {
            var boxUid = list[i];
            if (!seenUids.box[boxUid]) {
                seenUids.box[boxUid] = true;
                var offset = boxUid * 4;
                if (this._circleAndRectCollide(circle.x, circle.y, circle.radius, bboxes[offset + 0], bboxes[offset + 1], bboxes[offset + 2], bboxes[offset + 3]) && (!predicate || predicate(this.boxKeys[boxUid]))) {
                    result.push(true);
                    return true;
                }
            }
        }
    }
    var circleCell = this.circleCells[cellIndex];
    if (circleCell !== null) {
        var circles = this.circles;
        for (var i$1 = 0, list$1 = circleCell; i$1 < list$1.length; i$1 += 1) {
            var circleUid = list$1[i$1];
            if (!seenUids.circle[circleUid]) {
                seenUids.circle[circleUid] = true;
                var offset$1 = circleUid * 3;
                if (this._circlesCollide(circles[offset$1], circles[offset$1 + 1], circles[offset$1 + 2], circle.x, circle.y, circle.radius) && (!predicate || predicate(this.circleKeys[circleUid]))) {
                    result.push(true);
                    return true;
                }
            }
        }
    }
};
GridIndex.prototype._forEachCell = function _forEachCell(x1, y1, x2, y2, fn, arg1, arg2, predicate) {
    var cx1 = this._convertToXCellCoord(x1);
    var cy1 = this._convertToYCellCoord(y1);
    var cx2 = this._convertToXCellCoord(x2);
    var cy2 = this._convertToYCellCoord(y2);
    for (var x = cx1; x <= cx2; x++) {
        for (var y = cy1; y <= cy2; y++) {
            var cellIndex = this.xCellCount * y + x;
            if (fn.call(this, x1, y1, x2, y2, cellIndex, arg1, arg2, predicate)) {
                return;
            }
        }
    }
};
GridIndex.prototype._convertToXCellCoord = function _convertToXCellCoord(x) {
    return Math.max(0, Math.min(this.xCellCount - 1, Math.floor(x * this.xScale)));
};
GridIndex.prototype._convertToYCellCoord = function _convertToYCellCoord(y) {
    return Math.max(0, Math.min(this.yCellCount - 1, Math.floor(y * this.yScale)));
};
GridIndex.prototype._circlesCollide = function _circlesCollide(x1, y1, r1, x2, y2, r2) {
    var dx = x2 - x1;
    var dy = y2 - y1;
    var bothRadii = r1 + r2;
    return bothRadii * bothRadii > dx * dx + dy * dy;
};
GridIndex.prototype._circleAndRectCollide = function _circleAndRectCollide(circleX, circleY, radius, x1, y1, x2, y2) {
    var halfRectWidth = (x2 - x1) / 2;
    var distX = Math.abs(circleX - (x1 + halfRectWidth));
    if (distX > halfRectWidth + radius) {
        return false;
    }
    var halfRectHeight = (y2 - y1) / 2;
    var distY = Math.abs(circleY - (y1 + halfRectHeight));
    if (distY > halfRectHeight + radius) {
        return false;
    }
    if (distX <= halfRectWidth || distY <= halfRectHeight) {
        return true;
    }
    var dx = distX - halfRectWidth;
    var dy = distY - halfRectHeight;
    return dx * dx + dy * dy <= radius * radius;
};

function getLabelPlaneMatrix(posMatrix, pitchWithMap, rotateWithMap, transform, pixelsToTileUnits) {
    var m = performance.create();
    if (pitchWithMap) {
        performance.scale(m, m, [
            1 / pixelsToTileUnits,
            1 / pixelsToTileUnits,
            1
        ]);
        if (!rotateWithMap) {
            performance.rotateZ(m, m, transform.angle);
        }
    } else {
        performance.multiply(m, transform.labelPlaneMatrix, posMatrix);
    }
    return m;
}
function getGlCoordMatrix(posMatrix, pitchWithMap, rotateWithMap, transform, pixelsToTileUnits) {
    if (pitchWithMap) {
        var m = performance.clone(posMatrix);
        performance.scale(m, m, [
            pixelsToTileUnits,
            pixelsToTileUnits,
            1
        ]);
        if (!rotateWithMap) {
            performance.rotateZ(m, m, -transform.angle);
        }
        return m;
    } else {
        return transform.glCoordMatrix;
    }
}
function project(point, matrix) {
    var pos = [
        point.x,
        point.y,
        0,
        1
    ];
    xyTransformMat4(pos, pos, matrix);
    var w = pos[3];
    return {
        point: new performance.Point(pos[0] / w, pos[1] / w),
        signedDistanceFromCamera: w
    };
}
function getPerspectiveRatio(cameraToCenterDistance, signedDistanceFromCamera) {
    return 0.5 + 0.5 * (cameraToCenterDistance / signedDistanceFromCamera);
}
function isVisible(anchorPos, clippingBuffer) {
    var x = anchorPos[0] / anchorPos[3];
    var y = anchorPos[1] / anchorPos[3];
    var inPaddedViewport = x >= -clippingBuffer[0] && x <= clippingBuffer[0] && y >= -clippingBuffer[1] && y <= clippingBuffer[1];
    return inPaddedViewport;
}
function updateLineLabels(bucket, posMatrix, painter, isText, labelPlaneMatrix, glCoordMatrix, pitchWithMap, keepUpright) {
    var sizeData = isText ? bucket.textSizeData : bucket.iconSizeData;
    var partiallyEvaluatedSize = performance.evaluateSizeForZoom(sizeData, painter.transform.zoom);
    var clippingBuffer = [
        256 / painter.width * 2 + 1,
        256 / painter.height * 2 + 1
    ];
    var dynamicLayoutVertexArray = isText ? bucket.text.dynamicLayoutVertexArray : bucket.icon.dynamicLayoutVertexArray;
    dynamicLayoutVertexArray.clear();
    var lineVertexArray = bucket.lineVertexArray;
    var placedSymbols = isText ? bucket.text.placedSymbolArray : bucket.icon.placedSymbolArray;
    var aspectRatio = painter.transform.width / painter.transform.height;
    var useVertical = false;
    for (var s = 0; s < placedSymbols.length; s++) {
        var symbol = placedSymbols.get(s);
        if (symbol.hidden || symbol.writingMode === performance.WritingMode.vertical && !useVertical) {
            hideGlyphs(symbol.numGlyphs, dynamicLayoutVertexArray);
            continue;
        }
        useVertical = false;
        var anchorPos = [
            symbol.anchorX,
            symbol.anchorY,
            0,
            1
        ];
        performance.transformMat4(anchorPos, anchorPos, posMatrix);
        if (!isVisible(anchorPos, clippingBuffer)) {
            hideGlyphs(symbol.numGlyphs, dynamicLayoutVertexArray);
            continue;
        }
        var cameraToAnchorDistance = anchorPos[3];
        var perspectiveRatio = getPerspectiveRatio(painter.transform.cameraToCenterDistance, cameraToAnchorDistance);
        var fontSize = performance.evaluateSizeForFeature(sizeData, partiallyEvaluatedSize, symbol);
        var pitchScaledFontSize = pitchWithMap ? fontSize / perspectiveRatio : fontSize * perspectiveRatio;
        var tileAnchorPoint = new performance.Point(symbol.anchorX, symbol.anchorY);
        var anchorPoint = project(tileAnchorPoint, labelPlaneMatrix).point;
        var projectionCache = {};
        var placeUnflipped = placeGlyphsAlongLine(symbol, pitchScaledFontSize, false, keepUpright, posMatrix, labelPlaneMatrix, glCoordMatrix, bucket.glyphOffsetArray, lineVertexArray, dynamicLayoutVertexArray, anchorPoint, tileAnchorPoint, projectionCache, aspectRatio);
        useVertical = placeUnflipped.useVertical;
        if (placeUnflipped.notEnoughRoom || useVertical || placeUnflipped.needsFlipping && placeGlyphsAlongLine(symbol, pitchScaledFontSize, true, keepUpright, posMatrix, labelPlaneMatrix, glCoordMatrix, bucket.glyphOffsetArray, lineVertexArray, dynamicLayoutVertexArray, anchorPoint, tileAnchorPoint, projectionCache, aspectRatio).notEnoughRoom) {
            hideGlyphs(symbol.numGlyphs, dynamicLayoutVertexArray);
        }
    }
    if (isText) {
        bucket.text.dynamicLayoutVertexBuffer.updateData(dynamicLayoutVertexArray);
    } else {
        bucket.icon.dynamicLayoutVertexBuffer.updateData(dynamicLayoutVertexArray);
    }
}
function placeFirstAndLastGlyph(fontScale, glyphOffsetArray, lineOffsetX, lineOffsetY, flip, anchorPoint, tileAnchorPoint, symbol, lineVertexArray, labelPlaneMatrix, projectionCache) {
    var glyphEndIndex = symbol.glyphStartIndex + symbol.numGlyphs;
    var lineStartIndex = symbol.lineStartIndex;
    var lineEndIndex = symbol.lineStartIndex + symbol.lineLength;
    var firstGlyphOffset = glyphOffsetArray.getoffsetX(symbol.glyphStartIndex);
    var lastGlyphOffset = glyphOffsetArray.getoffsetX(glyphEndIndex - 1);
    var firstPlacedGlyph = placeGlyphAlongLine(fontScale * firstGlyphOffset, lineOffsetX, lineOffsetY, flip, anchorPoint, tileAnchorPoint, symbol.segment, lineStartIndex, lineEndIndex, lineVertexArray, labelPlaneMatrix, projectionCache);
    if (!firstPlacedGlyph) {
        return null;
    }
    var lastPlacedGlyph = placeGlyphAlongLine(fontScale * lastGlyphOffset, lineOffsetX, lineOffsetY, flip, anchorPoint, tileAnchorPoint, symbol.segment, lineStartIndex, lineEndIndex, lineVertexArray, labelPlaneMatrix, projectionCache);
    if (!lastPlacedGlyph) {
        return null;
    }
    return {
        first: firstPlacedGlyph,
        last: lastPlacedGlyph
    };
}
function requiresOrientationChange(writingMode, firstPoint, lastPoint, aspectRatio) {
    if (writingMode === performance.WritingMode.horizontal) {
        var rise = Math.abs(lastPoint.y - firstPoint.y);
        var run = Math.abs(lastPoint.x - firstPoint.x) * aspectRatio;
        if (rise > run) {
            return { useVertical: true };
        }
    }
    if (writingMode === performance.WritingMode.vertical ? firstPoint.y < lastPoint.y : firstPoint.x > lastPoint.x) {
        return { needsFlipping: true };
    }
    return null;
}
function placeGlyphsAlongLine(symbol, fontSize, flip, keepUpright, posMatrix, labelPlaneMatrix, glCoordMatrix, glyphOffsetArray, lineVertexArray, dynamicLayoutVertexArray, anchorPoint, tileAnchorPoint, projectionCache, aspectRatio) {
    var fontScale = fontSize / 24;
    var lineOffsetX = symbol.lineOffsetX * fontScale;
    var lineOffsetY = symbol.lineOffsetY * fontScale;
    var placedGlyphs;
    if (symbol.numGlyphs > 1) {
        var glyphEndIndex = symbol.glyphStartIndex + symbol.numGlyphs;
        var lineStartIndex = symbol.lineStartIndex;
        var lineEndIndex = symbol.lineStartIndex + symbol.lineLength;
        var firstAndLastGlyph = placeFirstAndLastGlyph(fontScale, glyphOffsetArray, lineOffsetX, lineOffsetY, flip, anchorPoint, tileAnchorPoint, symbol, lineVertexArray, labelPlaneMatrix, projectionCache);
        if (!firstAndLastGlyph) {
            return { notEnoughRoom: true };
        }
        var firstPoint = project(firstAndLastGlyph.first.point, glCoordMatrix).point;
        var lastPoint = project(firstAndLastGlyph.last.point, glCoordMatrix).point;
        if (keepUpright && !flip) {
            var orientationChange = requiresOrientationChange(symbol.writingMode, firstPoint, lastPoint, aspectRatio);
            if (orientationChange) {
                return orientationChange;
            }
        }
        placedGlyphs = [firstAndLastGlyph.first];
        for (var glyphIndex = symbol.glyphStartIndex + 1; glyphIndex < glyphEndIndex - 1; glyphIndex++) {
            placedGlyphs.push(placeGlyphAlongLine(fontScale * glyphOffsetArray.getoffsetX(glyphIndex), lineOffsetX, lineOffsetY, flip, anchorPoint, tileAnchorPoint, symbol.segment, lineStartIndex, lineEndIndex, lineVertexArray, labelPlaneMatrix, projectionCache));
        }
        placedGlyphs.push(firstAndLastGlyph.last);
    } else {
        if (keepUpright && !flip) {
            var a = project(tileAnchorPoint, posMatrix).point;
            var tileVertexIndex = symbol.lineStartIndex + symbol.segment + 1;
            var tileSegmentEnd = new performance.Point(lineVertexArray.getx(tileVertexIndex), lineVertexArray.gety(tileVertexIndex));
            var projectedVertex = project(tileSegmentEnd, posMatrix);
            var b = projectedVertex.signedDistanceFromCamera > 0 ? projectedVertex.point : projectTruncatedLineSegment(tileAnchorPoint, tileSegmentEnd, a, 1, posMatrix);
            var orientationChange$1 = requiresOrientationChange(symbol.writingMode, a, b, aspectRatio);
            if (orientationChange$1) {
                return orientationChange$1;
            }
        }
        var singleGlyph = placeGlyphAlongLine(fontScale * glyphOffsetArray.getoffsetX(symbol.glyphStartIndex), lineOffsetX, lineOffsetY, flip, anchorPoint, tileAnchorPoint, symbol.segment, symbol.lineStartIndex, symbol.lineStartIndex + symbol.lineLength, lineVertexArray, labelPlaneMatrix, projectionCache);
        if (!singleGlyph) {
            return { notEnoughRoom: true };
        }
        placedGlyphs = [singleGlyph];
    }
    for (var i = 0, list = placedGlyphs; i < list.length; i += 1) {
        var glyph = list[i];
        performance.addDynamicAttributes(dynamicLayoutVertexArray, glyph.point, glyph.angle);
    }
    return {};
}
function projectTruncatedLineSegment(previousTilePoint, currentTilePoint, previousProjectedPoint, minimumLength, projectionMatrix) {
    var projectedUnitVertex = project(previousTilePoint.add(previousTilePoint.sub(currentTilePoint)._unit()), projectionMatrix).point;
    var projectedUnitSegment = previousProjectedPoint.sub(projectedUnitVertex);
    return previousProjectedPoint.add(projectedUnitSegment._mult(minimumLength / projectedUnitSegment.mag()));
}
function placeGlyphAlongLine(offsetX, lineOffsetX, lineOffsetY, flip, anchorPoint, tileAnchorPoint, anchorSegment, lineStartIndex, lineEndIndex, lineVertexArray, labelPlaneMatrix, projectionCache) {
    var combinedOffsetX = flip ? offsetX - lineOffsetX : offsetX + lineOffsetX;
    var dir = combinedOffsetX > 0 ? 1 : -1;
    var angle = 0;
    if (flip) {
        dir *= -1;
        angle = Math.PI;
    }
    if (dir < 0) {
        angle += Math.PI;
    }
    var currentIndex = dir > 0 ? lineStartIndex + anchorSegment : lineStartIndex + anchorSegment + 1;
    var current = anchorPoint;
    var prev = anchorPoint;
    var distanceToPrev = 0;
    var currentSegmentDistance = 0;
    var absOffsetX = Math.abs(combinedOffsetX);
    var pathVertices = [];
    while (distanceToPrev + currentSegmentDistance <= absOffsetX) {
        currentIndex += dir;
        if (currentIndex < lineStartIndex || currentIndex >= lineEndIndex) {
            return null;
        }
        prev = current;
        pathVertices.push(current);
        current = projectionCache[currentIndex];
        if (current === undefined) {
            var currentVertex = new performance.Point(lineVertexArray.getx(currentIndex), lineVertexArray.gety(currentIndex));
            var projection = project(currentVertex, labelPlaneMatrix);
            if (projection.signedDistanceFromCamera > 0) {
                current = projectionCache[currentIndex] = projection.point;
            } else {
                var previousLineVertexIndex = currentIndex - dir;
                var previousTilePoint = distanceToPrev === 0 ? tileAnchorPoint : new performance.Point(lineVertexArray.getx(previousLineVertexIndex), lineVertexArray.gety(previousLineVertexIndex));
                current = projectTruncatedLineSegment(previousTilePoint, currentVertex, prev, absOffsetX - distanceToPrev + 1, labelPlaneMatrix);
            }
        }
        distanceToPrev += currentSegmentDistance;
        currentSegmentDistance = prev.dist(current);
    }
    var segmentInterpolationT = (absOffsetX - distanceToPrev) / currentSegmentDistance;
    var prevToCurrent = current.sub(prev);
    var p = prevToCurrent.mult(segmentInterpolationT)._add(prev);
    p._add(prevToCurrent._unit()._perp()._mult(lineOffsetY * dir));
    var segmentAngle = angle + Math.atan2(current.y - prev.y, current.x - prev.x);
    pathVertices.push(p);
    return {
        point: p,
        angle: segmentAngle,
        path: pathVertices
    };
}
var hiddenGlyphAttributes = new Float32Array([
    -Infinity,
    -Infinity,
    0,
    -Infinity,
    -Infinity,
    0,
    -Infinity,
    -Infinity,
    0,
    -Infinity,
    -Infinity,
    0
]);
function hideGlyphs(num, dynamicLayoutVertexArray) {
    for (var i = 0; i < num; i++) {
        var offset = dynamicLayoutVertexArray.length;
        dynamicLayoutVertexArray.resize(offset + 4);
        dynamicLayoutVertexArray.float32.set(hiddenGlyphAttributes, offset * 3);
    }
}
function xyTransformMat4(out, a, m) {
    var x = a[0], y = a[1];
    out[0] = m[0] * x + m[4] * y + m[12];
    out[1] = m[1] * x + m[5] * y + m[13];
    out[3] = m[3] * x + m[7] * y + m[15];
    return out;
}

var viewportPadding = 100;
var CollisionIndex = function CollisionIndex(transform, grid, ignoredGrid) {
    if (grid === void 0)
        grid = new GridIndex(transform.width + 2 * viewportPadding, transform.height + 2 * viewportPadding, 25);
    if (ignoredGrid === void 0)
        ignoredGrid = new GridIndex(transform.width + 2 * viewportPadding, transform.height + 2 * viewportPadding, 25);
    this.transform = transform;
    this.grid = grid;
    this.ignoredGrid = ignoredGrid;
    this.pitchfactor = Math.cos(transform._pitch) * transform.cameraToCenterDistance;
    this.screenRightBoundary = transform.width + viewportPadding;
    this.screenBottomBoundary = transform.height + viewportPadding;
    this.gridRightBoundary = transform.width + 2 * viewportPadding;
    this.gridBottomBoundary = transform.height + 2 * viewportPadding;
};
CollisionIndex.prototype.placeCollisionBox = function placeCollisionBox(collisionBox, allowOverlap, textPixelRatio, posMatrix, collisionGroupPredicate) {
    var projectedPoint = this.projectAndGetPerspectiveRatio(posMatrix, collisionBox.anchorPointX, collisionBox.anchorPointY);
    var tileToViewport = textPixelRatio * projectedPoint.perspectiveRatio;
    var tlX = collisionBox.x1 * tileToViewport + projectedPoint.point.x;
    var tlY = collisionBox.y1 * tileToViewport + projectedPoint.point.y;
    var brX = collisionBox.x2 * tileToViewport + projectedPoint.point.x;
    var brY = collisionBox.y2 * tileToViewport + projectedPoint.point.y;
    if (!this.isInsideGrid(tlX, tlY, brX, brY) || !allowOverlap && this.grid.hitTest(tlX, tlY, brX, brY, collisionGroupPredicate)) {
        return {
            box: [],
            offscreen: false
        };
    }
    return {
        box: [
            tlX,
            tlY,
            brX,
            brY
        ],
        offscreen: this.isOffscreen(tlX, tlY, brX, brY)
    };
};
CollisionIndex.prototype.placeCollisionCircles = function placeCollisionCircles(allowOverlap, symbol, lineVertexArray, glyphOffsetArray, fontSize, posMatrix, labelPlaneMatrix, labelToScreenMatrix, showCollisionCircles, pitchWithMap, collisionGroupPredicate, circlePixelDiameter, textPixelPadding) {
    var placedCollisionCircles = [];
    var tileUnitAnchorPoint = new performance.Point(symbol.anchorX, symbol.anchorY);
    var screenAnchorPoint = project(tileUnitAnchorPoint, posMatrix);
    var perspectiveRatio = getPerspectiveRatio(this.transform.cameraToCenterDistance, screenAnchorPoint.signedDistanceFromCamera);
    var labelPlaneFontSize = pitchWithMap ? fontSize / perspectiveRatio : fontSize * perspectiveRatio;
    var labelPlaneFontScale = labelPlaneFontSize / performance.ONE_EM;
    var labelPlaneAnchorPoint = project(tileUnitAnchorPoint, labelPlaneMatrix).point;
    var projectionCache = {};
    var lineOffsetX = symbol.lineOffsetX * labelPlaneFontScale;
    var lineOffsetY = symbol.lineOffsetY * labelPlaneFontScale;
    var firstAndLastGlyph = placeFirstAndLastGlyph(labelPlaneFontScale, glyphOffsetArray, lineOffsetX, lineOffsetY, false, labelPlaneAnchorPoint, tileUnitAnchorPoint, symbol, lineVertexArray, labelPlaneMatrix, projectionCache);
    var collisionDetected = false;
    var inGrid = false;
    var entirelyOffscreen = true;
    if (firstAndLastGlyph) {
        var radius = circlePixelDiameter * 0.5 * perspectiveRatio + textPixelPadding;
        var screenPlaneMin = new performance.Point(-viewportPadding, -viewportPadding);
        var screenPlaneMax = new performance.Point(this.screenRightBoundary, this.screenBottomBoundary);
        var interpolator = new PathInterpolator();
        var first = firstAndLastGlyph.first;
        var last = firstAndLastGlyph.last;
        var projectedPath = [];
        for (var i = first.path.length - 1; i >= 1; i--) {
            projectedPath.push(first.path[i]);
        }
        for (var i$1 = 1; i$1 < last.path.length; i$1++) {
            projectedPath.push(last.path[i$1]);
        }
        var circleDist = radius * 2.5;
        if (labelToScreenMatrix) {
            var screenSpacePath = projectedPath.map(function (p) {
                return project(p, labelToScreenMatrix);
            });
            if (screenSpacePath.some(function (point) {
                    return point.signedDistanceFromCamera <= 0;
                })) {
                projectedPath = [];
            } else {
                projectedPath = screenSpacePath.map(function (p) {
                    return p.point;
                });
            }
        }
        var segments = [];
        if (projectedPath.length > 0) {
            var minPoint = projectedPath[0].clone();
            var maxPoint = projectedPath[0].clone();
            for (var i$2 = 1; i$2 < projectedPath.length; i$2++) {
                minPoint.x = Math.min(minPoint.x, projectedPath[i$2].x);
                minPoint.y = Math.min(minPoint.y, projectedPath[i$2].y);
                maxPoint.x = Math.max(maxPoint.x, projectedPath[i$2].x);
                maxPoint.y = Math.max(maxPoint.y, projectedPath[i$2].y);
            }
            if (minPoint.x >= screenPlaneMin.x && maxPoint.x <= screenPlaneMax.x && minPoint.y >= screenPlaneMin.y && maxPoint.y <= screenPlaneMax.y) {
                segments = [projectedPath];
            } else if (maxPoint.x < screenPlaneMin.x || minPoint.x > screenPlaneMax.x || maxPoint.y < screenPlaneMin.y || minPoint.y > screenPlaneMax.y) {
                segments = [];
            } else {
                segments = performance.clipLine([projectedPath], screenPlaneMin.x, screenPlaneMin.y, screenPlaneMax.x, screenPlaneMax.y);
            }
        }
        for (var i$4 = 0, list = segments; i$4 < list.length; i$4 += 1) {
            var seg = list[i$4];
            interpolator.reset(seg, radius * 0.25);
            var numCircles = 0;
            if (interpolator.length <= 0.5 * radius) {
                numCircles = 1;
            } else {
                numCircles = Math.ceil(interpolator.paddedLength / circleDist) + 1;
            }
            for (var i$3 = 0; i$3 < numCircles; i$3++) {
                var t = i$3 / Math.max(numCircles - 1, 1);
                var circlePosition = interpolator.lerp(t);
                var centerX = circlePosition.x + viewportPadding;
                var centerY = circlePosition.y + viewportPadding;
                placedCollisionCircles.push(centerX, centerY, radius, 0);
                var x1 = centerX - radius;
                var y1 = centerY - radius;
                var x2 = centerX + radius;
                var y2 = centerY + radius;
                entirelyOffscreen = entirelyOffscreen && this.isOffscreen(x1, y1, x2, y2);
                inGrid = inGrid || this.isInsideGrid(x1, y1, x2, y2);
                if (!allowOverlap) {
                    if (this.grid.hitTestCircle(centerX, centerY, radius, collisionGroupPredicate)) {
                        collisionDetected = true;
                        if (!showCollisionCircles) {
                            return {
                                circles: [],
                                offscreen: false,
                                collisionDetected: collisionDetected
                            };
                        }
                    }
                }
            }
        }
    }
    return {
        circles: !showCollisionCircles && collisionDetected || !inGrid ? [] : placedCollisionCircles,
        offscreen: entirelyOffscreen,
        collisionDetected: collisionDetected
    };
};
CollisionIndex.prototype.queryRenderedSymbols = function queryRenderedSymbols(viewportQueryGeometry) {
    if (viewportQueryGeometry.length === 0 || this.grid.keysLength() === 0 && this.ignoredGrid.keysLength() === 0) {
        return {};
    }
    var query = [];
    var minX = Infinity;
    var minY = Infinity;
    var maxX = -Infinity;
    var maxY = -Infinity;
    for (var i = 0, list = viewportQueryGeometry; i < list.length; i += 1) {
        var point = list[i];
        var gridPoint = new performance.Point(point.x + viewportPadding, point.y + viewportPadding);
        minX = Math.min(minX, gridPoint.x);
        minY = Math.min(minY, gridPoint.y);
        maxX = Math.max(maxX, gridPoint.x);
        maxY = Math.max(maxY, gridPoint.y);
        query.push(gridPoint);
    }
    var features = this.grid.query(minX, minY, maxX, maxY).concat(this.ignoredGrid.query(minX, minY, maxX, maxY));
    var seenFeatures = {};
    var result = {};
    for (var i$1 = 0, list$1 = features; i$1 < list$1.length; i$1 += 1) {
        var feature = list$1[i$1];
        var featureKey = feature.key;
        if (seenFeatures[featureKey.bucketInstanceId] === undefined) {
            seenFeatures[featureKey.bucketInstanceId] = {};
        }
        if (seenFeatures[featureKey.bucketInstanceId][featureKey.featureIndex]) {
            continue;
        }
        var bbox = [
            new performance.Point(feature.x1, feature.y1),
            new performance.Point(feature.x2, feature.y1),
            new performance.Point(feature.x2, feature.y2),
            new performance.Point(feature.x1, feature.y2)
        ];
        if (!performance.polygonIntersectsPolygon(query, bbox)) {
            continue;
        }
        seenFeatures[featureKey.bucketInstanceId][featureKey.featureIndex] = true;
        if (result[featureKey.bucketInstanceId] === undefined) {
            result[featureKey.bucketInstanceId] = [];
        }
        result[featureKey.bucketInstanceId].push(featureKey.featureIndex);
    }
    return result;
};
CollisionIndex.prototype.insertCollisionBox = function insertCollisionBox(collisionBox, ignorePlacement, bucketInstanceId, featureIndex, collisionGroupID) {
    var grid = ignorePlacement ? this.ignoredGrid : this.grid;
    var key = {
        bucketInstanceId: bucketInstanceId,
        featureIndex: featureIndex,
        collisionGroupID: collisionGroupID
    };
    grid.insert(key, collisionBox[0], collisionBox[1], collisionBox[2], collisionBox[3]);
};
CollisionIndex.prototype.insertCollisionCircles = function insertCollisionCircles(collisionCircles, ignorePlacement, bucketInstanceId, featureIndex, collisionGroupID) {
    var grid = ignorePlacement ? this.ignoredGrid : this.grid;
    var key = {
        bucketInstanceId: bucketInstanceId,
        featureIndex: featureIndex,
        collisionGroupID: collisionGroupID
    };
    for (var k = 0; k < collisionCircles.length; k += 4) {
        grid.insertCircle(key, collisionCircles[k], collisionCircles[k + 1], collisionCircles[k + 2]);
    }
};
CollisionIndex.prototype.projectAndGetPerspectiveRatio = function projectAndGetPerspectiveRatio(posMatrix, x, y) {
    var p = [
        x,
        y,
        0,
        1
    ];
    xyTransformMat4(p, p, posMatrix);
    var a = new performance.Point((p[0] / p[3] + 1) / 2 * this.transform.width + viewportPadding, (-p[1] / p[3] + 1) / 2 * this.transform.height + viewportPadding);
    return {
        point: a,
        perspectiveRatio: 0.5 + 0.5 * (this.transform.cameraToCenterDistance / p[3])
    };
};
CollisionIndex.prototype.isOffscreen = function isOffscreen(x1, y1, x2, y2) {
    return x2 < viewportPadding || x1 >= this.screenRightBoundary || y2 < viewportPadding || y1 > this.screenBottomBoundary;
};
CollisionIndex.prototype.isInsideGrid = function isInsideGrid(x1, y1, x2, y2) {
    return x2 >= 0 && x1 < this.gridRightBoundary && y2 >= 0 && y1 < this.gridBottomBoundary;
};
CollisionIndex.prototype.getViewportMatrix = function getViewportMatrix() {
    var m = performance.identity([]);
    performance.translate(m, m, [
        -viewportPadding,
        -viewportPadding,
        0
    ]);
    return m;
};

function pixelsToTileUnits (tile, pixelValue, z) {
    return pixelValue * (performance.EXTENT / (tile.tileSize * Math.pow(2, z - tile.tileID.overscaledZ)));
}

var OpacityState = function OpacityState(prevState, increment, placed, skipFade) {
    if (prevState) {
        this.opacity = Math.max(0, Math.min(1, prevState.opacity + (prevState.placed ? increment : -increment)));
    } else {
        this.opacity = skipFade && placed ? 1 : 0;
    }
    this.placed = placed;
};
OpacityState.prototype.isHidden = function isHidden() {
    return this.opacity === 0 && !this.placed;
};
var JointOpacityState = function JointOpacityState(prevState, increment, placedText, placedIcon, skipFade) {
    this.text = new OpacityState(prevState ? prevState.text : null, increment, placedText, skipFade);
    this.icon = new OpacityState(prevState ? prevState.icon : null, increment, placedIcon, skipFade);
};
JointOpacityState.prototype.isHidden = function isHidden() {
    return this.text.isHidden() && this.icon.isHidden();
};
var JointPlacement = function JointPlacement(text, icon, skipFade) {
    this.text = text;
    this.icon = icon;
    this.skipFade = skipFade;
};
var CollisionCircleArray = function CollisionCircleArray() {
    this.invProjMatrix = performance.create();
    this.viewportMatrix = performance.create();
    this.circles = [];
};
var RetainedQueryData = function RetainedQueryData(bucketInstanceId, featureIndex, sourceLayerIndex, bucketIndex, tileID) {
    this.bucketInstanceId = bucketInstanceId;
    this.featureIndex = featureIndex;
    this.sourceLayerIndex = sourceLayerIndex;
    this.bucketIndex = bucketIndex;
    this.tileID = tileID;
};
var CollisionGroups = function CollisionGroups(crossSourceCollisions) {
    this.crossSourceCollisions = crossSourceCollisions;
    this.maxGroupID = 0;
    this.collisionGroups = {};
};
CollisionGroups.prototype.get = function get(sourceID) {
    if (!this.crossSourceCollisions) {
        if (!this.collisionGroups[sourceID]) {
            var nextGroupID = ++this.maxGroupID;
            this.collisionGroups[sourceID] = {
                ID: nextGroupID,
                predicate: function (key) {
                    return key.collisionGroupID === nextGroupID;
                }
            };
        }
        return this.collisionGroups[sourceID];
    } else {
        return {
            ID: 0,
            predicate: null
        };
    }
};
function calculateVariableLayoutShift(anchor, width, height, textOffset, textBoxScale) {
    var ref = performance.getAnchorAlignment(anchor);
    var horizontalAlign = ref.horizontalAlign;
    var verticalAlign = ref.verticalAlign;
    var shiftX = -(horizontalAlign - 0.5) * width;
    var shiftY = -(verticalAlign - 0.5) * height;
    var offset = performance.evaluateVariableOffset(anchor, textOffset);
    return new performance.Point(shiftX + offset[0] * textBoxScale, shiftY + offset[1] * textBoxScale);
}
function shiftVariableCollisionBox(collisionBox, shiftX, shiftY, rotateWithMap, pitchWithMap, angle) {
    var x1 = collisionBox.x1;
    var x2 = collisionBox.x2;
    var y1 = collisionBox.y1;
    var y2 = collisionBox.y2;
    var anchorPointX = collisionBox.anchorPointX;
    var anchorPointY = collisionBox.anchorPointY;
    var rotatedOffset = new performance.Point(shiftX, shiftY);
    if (rotateWithMap) {
        rotatedOffset._rotate(pitchWithMap ? angle : -angle);
    }
    return {
        x1: x1 + rotatedOffset.x,
        y1: y1 + rotatedOffset.y,
        x2: x2 + rotatedOffset.x,
        y2: y2 + rotatedOffset.y,
        anchorPointX: anchorPointX,
        anchorPointY: anchorPointY
    };
}
var Placement = function Placement(transform, fadeDuration, crossSourceCollisions, prevPlacement) {
    this.transform = transform.clone();
    this.collisionIndex = new CollisionIndex(this.transform);
    this.placements = {};
    this.opacities = {};
    this.variableOffsets = {};
    this.stale = false;
    this.commitTime = 0;
    this.fadeDuration = fadeDuration;
    this.retainedQueryData = {};
    this.collisionGroups = new CollisionGroups(crossSourceCollisions);
    this.collisionCircleArrays = {};
    this.prevPlacement = prevPlacement;
    if (prevPlacement) {
        prevPlacement.prevPlacement = undefined;
    }
    this.placedOrientations = {};
};
Placement.prototype.getBucketParts = function getBucketParts(results, styleLayer, tile, sortAcrossTiles) {
    var symbolBucket = tile.getBucket(styleLayer);
    var bucketFeatureIndex = tile.latestFeatureIndex;
    if (!symbolBucket || !bucketFeatureIndex || styleLayer.id !== symbolBucket.layerIds[0]) {
        return;
    }
    var collisionBoxArray = tile.collisionBoxArray;
    var layout = symbolBucket.layers[0].layout;
    var scale = Math.pow(2, this.transform.zoom - tile.tileID.overscaledZ);
    var textPixelRatio = tile.tileSize / performance.EXTENT;
    var posMatrix = this.transform.calculatePosMatrix(tile.tileID.toUnwrapped());
    var pitchWithMap = layout.get('text-pitch-alignment') === 'map';
    var rotateWithMap = layout.get('text-rotation-alignment') === 'map';
    var pixelsToTiles = pixelsToTileUnits(tile, 1, this.transform.zoom);
    var textLabelPlaneMatrix = getLabelPlaneMatrix(posMatrix, pitchWithMap, rotateWithMap, this.transform, pixelsToTiles);
    var labelToScreenMatrix = null;
    if (pitchWithMap) {
        var glMatrix = getGlCoordMatrix(posMatrix, pitchWithMap, rotateWithMap, this.transform, pixelsToTiles);
        labelToScreenMatrix = performance.multiply([], this.transform.labelPlaneMatrix, glMatrix);
    }
    this.retainedQueryData[symbolBucket.bucketInstanceId] = new RetainedQueryData(symbolBucket.bucketInstanceId, bucketFeatureIndex, symbolBucket.sourceLayerIndex, symbolBucket.index, tile.tileID);
    var parameters = {
        bucket: symbolBucket,
        layout: layout,
        posMatrix: posMatrix,
        textLabelPlaneMatrix: textLabelPlaneMatrix,
        labelToScreenMatrix: labelToScreenMatrix,
        scale: scale,
        textPixelRatio: textPixelRatio,
        holdingForFade: tile.holdingForFade(),
        collisionBoxArray: collisionBoxArray,
        partiallyEvaluatedTextSize: performance.evaluateSizeForZoom(symbolBucket.textSizeData, this.transform.zoom),
        collisionGroup: this.collisionGroups.get(symbolBucket.sourceID)
    };
    if (sortAcrossTiles) {
        for (var i = 0, list = symbolBucket.sortKeyRanges; i < list.length; i += 1) {
            var range = list[i];
            var sortKey = range.sortKey;
            var symbolInstanceStart = range.symbolInstanceStart;
            var symbolInstanceEnd = range.symbolInstanceEnd;
            results.push({
                sortKey: sortKey,
                symbolInstanceStart: symbolInstanceStart,
                symbolInstanceEnd: symbolInstanceEnd,
                parameters: parameters
            });
        }
    } else {
        results.push({
            symbolInstanceStart: 0,
            symbolInstanceEnd: symbolBucket.symbolInstances.length,
            parameters: parameters
        });
    }
};
Placement.prototype.attemptAnchorPlacement = function attemptAnchorPlacement(anchor, textBox, width, height, textBoxScale, rotateWithMap, pitchWithMap, textPixelRatio, posMatrix, collisionGroup, textAllowOverlap, symbolInstance, bucket, orientation, iconBox) {
    var textOffset = [
        symbolInstance.textOffset0,
        symbolInstance.textOffset1
    ];
    var shift = calculateVariableLayoutShift(anchor, width, height, textOffset, textBoxScale);
    var placedGlyphBoxes = this.collisionIndex.placeCollisionBox(shiftVariableCollisionBox(textBox, shift.x, shift.y, rotateWithMap, pitchWithMap, this.transform.angle), textAllowOverlap, textPixelRatio, posMatrix, collisionGroup.predicate);
    if (iconBox) {
        var placedIconBoxes = this.collisionIndex.placeCollisionBox(shiftVariableCollisionBox(iconBox, shift.x, shift.y, rotateWithMap, pitchWithMap, this.transform.angle), textAllowOverlap, textPixelRatio, posMatrix, collisionGroup.predicate);
        if (placedIconBoxes.box.length === 0) {
            return;
        }
    }
    if (placedGlyphBoxes.box.length > 0) {
        var prevAnchor;
        if (this.prevPlacement && this.prevPlacement.variableOffsets[symbolInstance.crossTileID] && this.prevPlacement.placements[symbolInstance.crossTileID] && this.prevPlacement.placements[symbolInstance.crossTileID].text) {
            prevAnchor = this.prevPlacement.variableOffsets[symbolInstance.crossTileID].anchor;
        }
        this.variableOffsets[symbolInstance.crossTileID] = {
            textOffset: textOffset,
            width: width,
            height: height,
            anchor: anchor,
            textBoxScale: textBoxScale,
            prevAnchor: prevAnchor
        };
        this.markUsedJustification(bucket, anchor, symbolInstance, orientation);
        if (bucket.allowVerticalPlacement) {
            this.markUsedOrientation(bucket, orientation, symbolInstance);
            this.placedOrientations[symbolInstance.crossTileID] = orientation;
        }
        return {
            shift: shift,
            placedGlyphBoxes: placedGlyphBoxes
        };
    }
};
Placement.prototype.placeLayerBucketPart = function placeLayerBucketPart(bucketPart, seenCrossTileIDs, showCollisionBoxes) {
    var this$1 = this;
    var ref = bucketPart.parameters;
    var bucket = ref.bucket;
    var layout = ref.layout;
    var posMatrix = ref.posMatrix;
    var textLabelPlaneMatrix = ref.textLabelPlaneMatrix;
    var labelToScreenMatrix = ref.labelToScreenMatrix;
    var textPixelRatio = ref.textPixelRatio;
    var holdingForFade = ref.holdingForFade;
    var collisionBoxArray = ref.collisionBoxArray;
    var partiallyEvaluatedTextSize = ref.partiallyEvaluatedTextSize;
    var collisionGroup = ref.collisionGroup;
    var textOptional = layout.get('text-optional');
    var iconOptional = layout.get('icon-optional');
    var textAllowOverlap = layout.get('text-allow-overlap');
    var iconAllowOverlap = layout.get('icon-allow-overlap');
    var rotateWithMap = layout.get('text-rotation-alignment') === 'map';
    var pitchWithMap = layout.get('text-pitch-alignment') === 'map';
    var hasIconTextFit = layout.get('icon-text-fit') !== 'none';
    var zOrderByViewportY = layout.get('symbol-z-order') === 'viewport-y';
    var alwaysShowText = textAllowOverlap && (iconAllowOverlap || !bucket.hasIconData() || iconOptional);
    var alwaysShowIcon = iconAllowOverlap && (textAllowOverlap || !bucket.hasTextData() || textOptional);
    if (!bucket.collisionArrays && collisionBoxArray) {
        bucket.deserializeCollisionBoxes(collisionBoxArray);
    }
    var placeSymbol = function (symbolInstance, collisionArrays) {
        if (seenCrossTileIDs[symbolInstance.crossTileID]) {
            return;
        }
        if (holdingForFade) {
            this$1.placements[symbolInstance.crossTileID] = new JointPlacement(false, false, false);
            return;
        }
        var placeText = false;
        var placeIcon = false;
        var offscreen = true;
        var shift = null;
        var placed = {
            box: null,
            offscreen: null
        };
        var placedVerticalText = {
            box: null,
            offscreen: null
        };
        var placedGlyphBoxes = null;
        var placedGlyphCircles = null;
        var placedIconBoxes = null;
        var textFeatureIndex = 0;
        var verticalTextFeatureIndex = 0;
        var iconFeatureIndex = 0;
        if (collisionArrays.textFeatureIndex) {
            textFeatureIndex = collisionArrays.textFeatureIndex;
        } else if (symbolInstance.useRuntimeCollisionCircles) {
            textFeatureIndex = symbolInstance.featureIndex;
        }
        if (collisionArrays.verticalTextFeatureIndex) {
            verticalTextFeatureIndex = collisionArrays.verticalTextFeatureIndex;
        }
        var textBox = collisionArrays.textBox;
        if (textBox) {
            var updatePreviousOrientationIfNotPlaced = function (isPlaced) {
                var previousOrientation = performance.WritingMode.horizontal;
                if (bucket.allowVerticalPlacement && !isPlaced && this$1.prevPlacement) {
                    var prevPlacedOrientation = this$1.prevPlacement.placedOrientations[symbolInstance.crossTileID];
                    if (prevPlacedOrientation) {
                        this$1.placedOrientations[symbolInstance.crossTileID] = prevPlacedOrientation;
                        previousOrientation = prevPlacedOrientation;
                        this$1.markUsedOrientation(bucket, previousOrientation, symbolInstance);
                    }
                }
                return previousOrientation;
            };
            var placeTextForPlacementModes = function (placeHorizontalFn, placeVerticalFn) {
                if (bucket.allowVerticalPlacement && symbolInstance.numVerticalGlyphVertices > 0 && collisionArrays.verticalTextBox) {
                    for (var i = 0, list = bucket.writingModes; i < list.length; i += 1) {
                        var placementMode = list[i];
                        if (placementMode === performance.WritingMode.vertical) {
                            placed = placeVerticalFn();
                            placedVerticalText = placed;
                        } else {
                            placed = placeHorizontalFn();
                        }
                        if (placed && placed.box && placed.box.length) {
                            break;
                        }
                    }
                } else {
                    placed = placeHorizontalFn();
                }
            };
            if (!layout.get('text-variable-anchor')) {
                var placeBox = function (collisionTextBox, orientation) {
                    var placedFeature = this$1.collisionIndex.placeCollisionBox(collisionTextBox, textAllowOverlap, textPixelRatio, posMatrix, collisionGroup.predicate);
                    if (placedFeature && placedFeature.box && placedFeature.box.length) {
                        this$1.markUsedOrientation(bucket, orientation, symbolInstance);
                        this$1.placedOrientations[symbolInstance.crossTileID] = orientation;
                    }
                    return placedFeature;
                };
                var placeHorizontal = function () {
                    return placeBox(textBox, performance.WritingMode.horizontal);
                };
                var placeVertical = function () {
                    var verticalTextBox = collisionArrays.verticalTextBox;
                    if (bucket.allowVerticalPlacement && symbolInstance.numVerticalGlyphVertices > 0 && verticalTextBox) {
                        return placeBox(verticalTextBox, performance.WritingMode.vertical);
                    }
                    return {
                        box: null,
                        offscreen: null
                    };
                };
                placeTextForPlacementModes(placeHorizontal, placeVertical);
                updatePreviousOrientationIfNotPlaced(placed && placed.box && placed.box.length);
            } else {
                var anchors = layout.get('text-variable-anchor');
                if (this$1.prevPlacement && this$1.prevPlacement.variableOffsets[symbolInstance.crossTileID]) {
                    var prevOffsets = this$1.prevPlacement.variableOffsets[symbolInstance.crossTileID];
                    if (anchors.indexOf(prevOffsets.anchor) > 0) {
                        anchors = anchors.filter(function (anchor) {
                            return anchor !== prevOffsets.anchor;
                        });
                        anchors.unshift(prevOffsets.anchor);
                    }
                }
                var placeBoxForVariableAnchors = function (collisionTextBox, collisionIconBox, orientation) {
                    var width = collisionTextBox.x2 - collisionTextBox.x1;
                    var height = collisionTextBox.y2 - collisionTextBox.y1;
                    var textBoxScale = symbolInstance.textBoxScale;
                    var variableIconBox = hasIconTextFit && !iconAllowOverlap ? collisionIconBox : null;
                    var placedBox = {
                        box: [],
                        offscreen: false
                    };
                    var placementAttempts = textAllowOverlap ? anchors.length * 2 : anchors.length;
                    for (var i = 0; i < placementAttempts; ++i) {
                        var anchor = anchors[i % anchors.length];
                        var allowOverlap = i >= anchors.length;
                        var result = this$1.attemptAnchorPlacement(anchor, collisionTextBox, width, height, textBoxScale, rotateWithMap, pitchWithMap, textPixelRatio, posMatrix, collisionGroup, allowOverlap, symbolInstance, bucket, orientation, variableIconBox);
                        if (result) {
                            placedBox = result.placedGlyphBoxes;
                            if (placedBox && placedBox.box && placedBox.box.length) {
                                placeText = true;
                                shift = result.shift;
                                break;
                            }
                        }
                    }
                    return placedBox;
                };
                var placeHorizontal$1 = function () {
                    return placeBoxForVariableAnchors(textBox, collisionArrays.iconBox, performance.WritingMode.horizontal);
                };
                var placeVertical$1 = function () {
                    var verticalTextBox = collisionArrays.verticalTextBox;
                    var wasPlaced = placed && placed.box && placed.box.length;
                    if (bucket.allowVerticalPlacement && !wasPlaced && symbolInstance.numVerticalGlyphVertices > 0 && verticalTextBox) {
                        return placeBoxForVariableAnchors(verticalTextBox, collisionArrays.verticalIconBox, performance.WritingMode.vertical);
                    }
                    return {
                        box: null,
                        offscreen: null
                    };
                };
                placeTextForPlacementModes(placeHorizontal$1, placeVertical$1);
                if (placed) {
                    placeText = placed.box;
                    offscreen = placed.offscreen;
                }
                var prevOrientation = updatePreviousOrientationIfNotPlaced(placed && placed.box);
                if (!placeText && this$1.prevPlacement) {
                    var prevOffset = this$1.prevPlacement.variableOffsets[symbolInstance.crossTileID];
                    if (prevOffset) {
                        this$1.variableOffsets[symbolInstance.crossTileID] = prevOffset;
                        this$1.markUsedJustification(bucket, prevOffset.anchor, symbolInstance, prevOrientation);
                    }
                }
            }
        }
        placedGlyphBoxes = placed;
        placeText = placedGlyphBoxes && placedGlyphBoxes.box && placedGlyphBoxes.box.length > 0;
        offscreen = placedGlyphBoxes && placedGlyphBoxes.offscreen;
        if (symbolInstance.useRuntimeCollisionCircles) {
            var placedSymbol = bucket.text.placedSymbolArray.get(symbolInstance.centerJustifiedTextSymbolIndex);
            var fontSize = performance.evaluateSizeForFeature(bucket.textSizeData, partiallyEvaluatedTextSize, placedSymbol);
            var textPixelPadding = layout.get('text-padding');
            var circlePixelDiameter = symbolInstance.collisionCircleDiameter;
            placedGlyphCircles = this$1.collisionIndex.placeCollisionCircles(textAllowOverlap, placedSymbol, bucket.lineVertexArray, bucket.glyphOffsetArray, fontSize, posMatrix, textLabelPlaneMatrix, labelToScreenMatrix, showCollisionBoxes, pitchWithMap, collisionGroup.predicate, circlePixelDiameter, textPixelPadding);
            placeText = textAllowOverlap || placedGlyphCircles.circles.length > 0 && !placedGlyphCircles.collisionDetected;
            offscreen = offscreen && placedGlyphCircles.offscreen;
        }
        if (collisionArrays.iconFeatureIndex) {
            iconFeatureIndex = collisionArrays.iconFeatureIndex;
        }
        if (collisionArrays.iconBox) {
            var placeIconFeature = function (iconBox) {
                var shiftedIconBox = hasIconTextFit && shift ? shiftVariableCollisionBox(iconBox, shift.x, shift.y, rotateWithMap, pitchWithMap, this$1.transform.angle) : iconBox;
                return this$1.collisionIndex.placeCollisionBox(shiftedIconBox, iconAllowOverlap, textPixelRatio, posMatrix, collisionGroup.predicate);
            };
            if (placedVerticalText && placedVerticalText.box && placedVerticalText.box.length && collisionArrays.verticalIconBox) {
                placedIconBoxes = placeIconFeature(collisionArrays.verticalIconBox);
                placeIcon = placedIconBoxes.box.length > 0;
            } else {
                placedIconBoxes = placeIconFeature(collisionArrays.iconBox);
                placeIcon = placedIconBoxes.box.length > 0;
            }
            offscreen = offscreen && placedIconBoxes.offscreen;
        }
        var iconWithoutText = textOptional || symbolInstance.numHorizontalGlyphVertices === 0 && symbolInstance.numVerticalGlyphVertices === 0;
        var textWithoutIcon = iconOptional || symbolInstance.numIconVertices === 0;
        if (!iconWithoutText && !textWithoutIcon) {
            placeIcon = placeText = placeIcon && placeText;
        } else if (!textWithoutIcon) {
            placeText = placeIcon && placeText;
        } else if (!iconWithoutText) {
            placeIcon = placeIcon && placeText;
        }
        if (placeText && placedGlyphBoxes && placedGlyphBoxes.box) {
            if (placedVerticalText && placedVerticalText.box && verticalTextFeatureIndex) {
                this$1.collisionIndex.insertCollisionBox(placedGlyphBoxes.box, layout.get('text-ignore-placement'), bucket.bucketInstanceId, verticalTextFeatureIndex, collisionGroup.ID);
            } else {
                this$1.collisionIndex.insertCollisionBox(placedGlyphBoxes.box, layout.get('text-ignore-placement'), bucket.bucketInstanceId, textFeatureIndex, collisionGroup.ID);
            }
        }
        if (placeIcon && placedIconBoxes) {
            this$1.collisionIndex.insertCollisionBox(placedIconBoxes.box, layout.get('icon-ignore-placement'), bucket.bucketInstanceId, iconFeatureIndex, collisionGroup.ID);
        }
        if (placedGlyphCircles) {
            if (placeText) {
                this$1.collisionIndex.insertCollisionCircles(placedGlyphCircles.circles, layout.get('text-ignore-placement'), bucket.bucketInstanceId, textFeatureIndex, collisionGroup.ID);
            }
            if (showCollisionBoxes) {
                var id = bucket.bucketInstanceId;
                var circleArray = this$1.collisionCircleArrays[id];
                if (circleArray === undefined) {
                    circleArray = this$1.collisionCircleArrays[id] = new CollisionCircleArray();
                }
                for (var i = 0; i < placedGlyphCircles.circles.length; i += 4) {
                    circleArray.circles.push(placedGlyphCircles.circles[i + 0]);
                    circleArray.circles.push(placedGlyphCircles.circles[i + 1]);
                    circleArray.circles.push(placedGlyphCircles.circles[i + 2]);
                    circleArray.circles.push(placedGlyphCircles.collisionDetected ? 1 : 0);
                }
            }
        }
        this$1.placements[symbolInstance.crossTileID] = new JointPlacement(placeText || alwaysShowText, placeIcon || alwaysShowIcon, offscreen || bucket.justReloaded);
        seenCrossTileIDs[symbolInstance.crossTileID] = true;
    };
    if (zOrderByViewportY) {
        var symbolIndexes = bucket.getSortedSymbolIndexes(this.transform.angle);
        for (var i = symbolIndexes.length - 1; i >= 0; --i) {
            var symbolIndex = symbolIndexes[i];
            placeSymbol(bucket.symbolInstances.get(symbolIndex), bucket.collisionArrays[symbolIndex]);
        }
    } else {
        for (var i$1 = bucketPart.symbolInstanceStart; i$1 < bucketPart.symbolInstanceEnd; i$1++) {
            placeSymbol(bucket.symbolInstances.get(i$1), bucket.collisionArrays[i$1]);
        }
    }
    if (showCollisionBoxes && bucket.bucketInstanceId in this.collisionCircleArrays) {
        var circleArray = this.collisionCircleArrays[bucket.bucketInstanceId];
        performance.invert(circleArray.invProjMatrix, posMatrix);
        circleArray.viewportMatrix = this.collisionIndex.getViewportMatrix();
    }
    bucket.justReloaded = false;
};
Placement.prototype.markUsedJustification = function markUsedJustification(bucket, placedAnchor, symbolInstance, orientation) {
    var justifications = {
        'left': symbolInstance.leftJustifiedTextSymbolIndex,
        'center': symbolInstance.centerJustifiedTextSymbolIndex,
        'right': symbolInstance.rightJustifiedTextSymbolIndex
    };
    var autoIndex;
    if (orientation === performance.WritingMode.vertical) {
        autoIndex = symbolInstance.verticalPlacedTextSymbolIndex;
    } else {
        autoIndex = justifications[performance.getAnchorJustification(placedAnchor)];
    }
    var indexes = [
        symbolInstance.leftJustifiedTextSymbolIndex,
        symbolInstance.centerJustifiedTextSymbolIndex,
        symbolInstance.rightJustifiedTextSymbolIndex,
        symbolInstance.verticalPlacedTextSymbolIndex
    ];
    for (var i = 0, list = indexes; i < list.length; i += 1) {
        var index = list[i];
        if (index >= 0) {
            if (autoIndex >= 0 && index !== autoIndex) {
                bucket.text.placedSymbolArray.get(index).crossTileID = 0;
            } else {
                bucket.text.placedSymbolArray.get(index).crossTileID = symbolInstance.crossTileID;
            }
        }
    }
};
Placement.prototype.markUsedOrientation = function markUsedOrientation(bucket, orientation, symbolInstance) {
    var horizontal = orientation === performance.WritingMode.horizontal || orientation === performance.WritingMode.horizontalOnly ? orientation : 0;
    var vertical = orientation === performance.WritingMode.vertical ? orientation : 0;
    var horizontalIndexes = [
        symbolInstance.leftJustifiedTextSymbolIndex,
        symbolInstance.centerJustifiedTextSymbolIndex,
        symbolInstance.rightJustifiedTextSymbolIndex
    ];
    for (var i = 0, list = horizontalIndexes; i < list.length; i += 1) {
        var index = list[i];
        bucket.text.placedSymbolArray.get(index).placedOrientation = horizontal;
    }
    if (symbolInstance.verticalPlacedTextSymbolIndex) {
        bucket.text.placedSymbolArray.get(symbolInstance.verticalPlacedTextSymbolIndex).placedOrientation = vertical;
    }
};
Placement.prototype.commit = function commit(now) {
    this.commitTime = now;
    this.zoomAtLastRecencyCheck = this.transform.zoom;
    var prevPlacement = this.prevPlacement;
    var placementChanged = false;
    this.prevZoomAdjustment = prevPlacement ? prevPlacement.zoomAdjustment(this.transform.zoom) : 0;
    var increment = prevPlacement ? prevPlacement.symbolFadeChange(now) : 1;
    var prevOpacities = prevPlacement ? prevPlacement.opacities : {};
    var prevOffsets = prevPlacement ? prevPlacement.variableOffsets : {};
    var prevOrientations = prevPlacement ? prevPlacement.placedOrientations : {};
    for (var crossTileID in this.placements) {
        var jointPlacement = this.placements[crossTileID];
        var prevOpacity = prevOpacities[crossTileID];
        if (prevOpacity) {
            this.opacities[crossTileID] = new JointOpacityState(prevOpacity, increment, jointPlacement.text, jointPlacement.icon);
            placementChanged = placementChanged || jointPlacement.text !== prevOpacity.text.placed || jointPlacement.icon !== prevOpacity.icon.placed;
        } else {
            this.opacities[crossTileID] = new JointOpacityState(null, increment, jointPlacement.text, jointPlacement.icon, jointPlacement.skipFade);
            placementChanged = placementChanged || jointPlacement.text || jointPlacement.icon;
        }
    }
    for (var crossTileID$1 in prevOpacities) {
        var prevOpacity$1 = prevOpacities[crossTileID$1];
        if (!this.opacities[crossTileID$1]) {
            var jointOpacity = new JointOpacityState(prevOpacity$1, increment, false, false);
            if (!jointOpacity.isHidden()) {
                this.opacities[crossTileID$1] = jointOpacity;
                placementChanged = placementChanged || prevOpacity$1.text.placed || prevOpacity$1.icon.placed;
            }
        }
    }
    for (var crossTileID$2 in prevOffsets) {
        if (!this.variableOffsets[crossTileID$2] && this.opacities[crossTileID$2] && !this.opacities[crossTileID$2].isHidden()) {
            this.variableOffsets[crossTileID$2] = prevOffsets[crossTileID$2];
        }
    }
    for (var crossTileID$3 in prevOrientations) {
        if (!this.placedOrientations[crossTileID$3] && this.opacities[crossTileID$3] && !this.opacities[crossTileID$3].isHidden()) {
            this.placedOrientations[crossTileID$3] = prevOrientations[crossTileID$3];
        }
    }
    if (placementChanged) {
        this.lastPlacementChangeTime = now;
    } else if (typeof this.lastPlacementChangeTime !== 'number') {
        this.lastPlacementChangeTime = prevPlacement ? prevPlacement.lastPlacementChangeTime : now;
    }
};
Placement.prototype.updateLayerOpacities = function updateLayerOpacities(styleLayer, tiles) {
    var seenCrossTileIDs = {};
    for (var i = 0, list = tiles; i < list.length; i += 1) {
        var tile = list[i];
        var symbolBucket = tile.getBucket(styleLayer);
        if (symbolBucket && tile.latestFeatureIndex && styleLayer.id === symbolBucket.layerIds[0]) {
            this.updateBucketOpacities(symbolBucket, seenCrossTileIDs, tile.collisionBoxArray);
        }
    }
};
Placement.prototype.updateBucketOpacities = function updateBucketOpacities(bucket, seenCrossTileIDs, collisionBoxArray) {
    var this$1 = this;
    if (bucket.hasTextData()) {
        bucket.text.opacityVertexArray.clear();
    }
    if (bucket.hasIconData()) {
        bucket.icon.opacityVertexArray.clear();
    }
    if (bucket.hasIconCollisionBoxData()) {
        bucket.iconCollisionBox.collisionVertexArray.clear();
    }
    if (bucket.hasTextCollisionBoxData()) {
        bucket.textCollisionBox.collisionVertexArray.clear();
    }
    var layout = bucket.layers[0].layout;
    var duplicateOpacityState = new JointOpacityState(null, 0, false, false, true);
    var textAllowOverlap = layout.get('text-allow-overlap');
    var iconAllowOverlap = layout.get('icon-allow-overlap');
    var variablePlacement = layout.get('text-variable-anchor');
    var rotateWithMap = layout.get('text-rotation-alignment') === 'map';
    var pitchWithMap = layout.get('text-pitch-alignment') === 'map';
    var hasIconTextFit = layout.get('icon-text-fit') !== 'none';
    var defaultOpacityState = new JointOpacityState(null, 0, textAllowOverlap && (iconAllowOverlap || !bucket.hasIconData() || layout.get('icon-optional')), iconAllowOverlap && (textAllowOverlap || !bucket.hasTextData() || layout.get('text-optional')), true);
    if (!bucket.collisionArrays && collisionBoxArray && (bucket.hasIconCollisionBoxData() || bucket.hasTextCollisionBoxData())) {
        bucket.deserializeCollisionBoxes(collisionBoxArray);
    }
    var addOpacities = function (iconOrText, numVertices, opacity) {
        for (var i = 0; i < numVertices / 4; i++) {
            iconOrText.opacityVertexArray.emplaceBack(opacity);
        }
    };
    var loop = function (s) {
        var symbolInstance = bucket.symbolInstances.get(s);
        var numHorizontalGlyphVertices = symbolInstance.numHorizontalGlyphVertices;
        var numVerticalGlyphVertices = symbolInstance.numVerticalGlyphVertices;
        var crossTileID = symbolInstance.crossTileID;
        var isDuplicate = seenCrossTileIDs[crossTileID];
        var opacityState = this$1.opacities[crossTileID];
        if (isDuplicate) {
            opacityState = duplicateOpacityState;
        } else if (!opacityState) {
            opacityState = defaultOpacityState;
            this$1.opacities[crossTileID] = opacityState;
        }
        seenCrossTileIDs[crossTileID] = true;
        var hasText = numHorizontalGlyphVertices > 0 || numVerticalGlyphVertices > 0;
        var hasIcon = symbolInstance.numIconVertices > 0;
        var placedOrientation = this$1.placedOrientations[symbolInstance.crossTileID];
        var horizontalHidden = placedOrientation === performance.WritingMode.vertical;
        var verticalHidden = placedOrientation === performance.WritingMode.horizontal || placedOrientation === performance.WritingMode.horizontalOnly;
        if (hasText) {
            var packedOpacity = packOpacity(opacityState.text);
            var horizontalOpacity = horizontalHidden ? PACKED_HIDDEN_OPACITY : packedOpacity;
            addOpacities(bucket.text, numHorizontalGlyphVertices, horizontalOpacity);
            var verticalOpacity = verticalHidden ? PACKED_HIDDEN_OPACITY : packedOpacity;
            addOpacities(bucket.text, numVerticalGlyphVertices, verticalOpacity);
            var symbolHidden = opacityState.text.isHidden();
            [
                symbolInstance.rightJustifiedTextSymbolIndex,
                symbolInstance.centerJustifiedTextSymbolIndex,
                symbolInstance.leftJustifiedTextSymbolIndex
            ].forEach(function (index) {
                if (index >= 0) {
                    bucket.text.placedSymbolArray.get(index).hidden = symbolHidden || horizontalHidden ? 1 : 0;
                }
            });
            if (symbolInstance.verticalPlacedTextSymbolIndex >= 0) {
                bucket.text.placedSymbolArray.get(symbolInstance.verticalPlacedTextSymbolIndex).hidden = symbolHidden || verticalHidden ? 1 : 0;
            }
            var prevOffset = this$1.variableOffsets[symbolInstance.crossTileID];
            if (prevOffset) {
                this$1.markUsedJustification(bucket, prevOffset.anchor, symbolInstance, placedOrientation);
            }
            var prevOrientation = this$1.placedOrientations[symbolInstance.crossTileID];
            if (prevOrientation) {
                this$1.markUsedJustification(bucket, 'left', symbolInstance, prevOrientation);
                this$1.markUsedOrientation(bucket, prevOrientation, symbolInstance);
            }
        }
        if (hasIcon) {
            var packedOpacity$1 = packOpacity(opacityState.icon);
            var useHorizontal = !(hasIconTextFit && symbolInstance.verticalPlacedIconSymbolIndex && horizontalHidden);
            if (symbolInstance.placedIconSymbolIndex >= 0) {
                var horizontalOpacity$1 = useHorizontal ? packedOpacity$1 : PACKED_HIDDEN_OPACITY;
                addOpacities(bucket.icon, symbolInstance.numIconVertices, horizontalOpacity$1);
                bucket.icon.placedSymbolArray.get(symbolInstance.placedIconSymbolIndex).hidden = opacityState.icon.isHidden();
            }
            if (symbolInstance.verticalPlacedIconSymbolIndex >= 0) {
                var verticalOpacity$1 = !useHorizontal ? packedOpacity$1 : PACKED_HIDDEN_OPACITY;
                addOpacities(bucket.icon, symbolInstance.numVerticalIconVertices, verticalOpacity$1);
                bucket.icon.placedSymbolArray.get(symbolInstance.verticalPlacedIconSymbolIndex).hidden = opacityState.icon.isHidden();
            }
        }
        if (bucket.hasIconCollisionBoxData() || bucket.hasTextCollisionBoxData()) {
            var collisionArrays = bucket.collisionArrays[s];
            if (collisionArrays) {
                var shift = new performance.Point(0, 0);
                if (collisionArrays.textBox || collisionArrays.verticalTextBox) {
                    var used = true;
                    if (variablePlacement) {
                        var variableOffset = this$1.variableOffsets[crossTileID];
                        if (variableOffset) {
                            shift = calculateVariableLayoutShift(variableOffset.anchor, variableOffset.width, variableOffset.height, variableOffset.textOffset, variableOffset.textBoxScale);
                            if (rotateWithMap) {
                                shift._rotate(pitchWithMap ? this$1.transform.angle : -this$1.transform.angle);
                            }
                        } else {
                            used = false;
                        }
                    }
                    if (collisionArrays.textBox) {
                        updateCollisionVertices(bucket.textCollisionBox.collisionVertexArray, opacityState.text.placed, !used || horizontalHidden, shift.x, shift.y);
                    }
                    if (collisionArrays.verticalTextBox) {
                        updateCollisionVertices(bucket.textCollisionBox.collisionVertexArray, opacityState.text.placed, !used || verticalHidden, shift.x, shift.y);
                    }
                }
                var verticalIconUsed = Boolean(!verticalHidden && collisionArrays.verticalIconBox);
                if (collisionArrays.iconBox) {
                    updateCollisionVertices(bucket.iconCollisionBox.collisionVertexArray, opacityState.icon.placed, verticalIconUsed, hasIconTextFit ? shift.x : 0, hasIconTextFit ? shift.y : 0);
                }
                if (collisionArrays.verticalIconBox) {
                    updateCollisionVertices(bucket.iconCollisionBox.collisionVertexArray, opacityState.icon.placed, !verticalIconUsed, hasIconTextFit ? shift.x : 0, hasIconTextFit ? shift.y : 0);
                }
            }
        }
    };
    for (var s = 0; s < bucket.symbolInstances.length; s++)
        loop(s);
    bucket.sortFeatures(this.transform.angle);
    if (this.retainedQueryData[bucket.bucketInstanceId]) {
        this.retainedQueryData[bucket.bucketInstanceId].featureSortOrder = bucket.featureSortOrder;
    }
    if (bucket.hasTextData() && bucket.text.opacityVertexBuffer) {
        bucket.text.opacityVertexBuffer.updateData(bucket.text.opacityVertexArray);
    }
    if (bucket.hasIconData() && bucket.icon.opacityVertexBuffer) {
        bucket.icon.opacityVertexBuffer.updateData(bucket.icon.opacityVertexArray);
    }
    if (bucket.hasIconCollisionBoxData() && bucket.iconCollisionBox.collisionVertexBuffer) {
        bucket.iconCollisionBox.collisionVertexBuffer.updateData(bucket.iconCollisionBox.collisionVertexArray);
    }
    if (bucket.hasTextCollisionBoxData() && bucket.textCollisionBox.collisionVertexBuffer) {
        bucket.textCollisionBox.collisionVertexBuffer.updateData(bucket.textCollisionBox.collisionVertexArray);
    }
    if (bucket.bucketInstanceId in this.collisionCircleArrays) {
        var instance = this.collisionCircleArrays[bucket.bucketInstanceId];
        bucket.placementInvProjMatrix = instance.invProjMatrix;
        bucket.placementViewportMatrix = instance.viewportMatrix;
        bucket.collisionCircleArray = instance.circles;
        delete this.collisionCircleArrays[bucket.bucketInstanceId];
    }
};
Placement.prototype.symbolFadeChange = function symbolFadeChange(now) {
    return this.fadeDuration === 0 ? 1 : (now - this.commitTime) / this.fadeDuration + this.prevZoomAdjustment;
};
Placement.prototype.zoomAdjustment = function zoomAdjustment(zoom) {
    return Math.max(0, (this.transform.zoom - zoom) / 1.5);
};
Placement.prototype.hasTransitions = function hasTransitions(now) {
    return this.stale || now - this.lastPlacementChangeTime < this.fadeDuration;
};
Placement.prototype.stillRecent = function stillRecent(now, zoom) {
    var durationAdjustment = this.zoomAtLastRecencyCheck === zoom ? 1 - this.zoomAdjustment(zoom) : 1;
    this.zoomAtLastRecencyCheck = zoom;
    return this.commitTime + this.fadeDuration * durationAdjustment > now;
};
Placement.prototype.setStale = function setStale() {
    this.stale = true;
};
function updateCollisionVertices(collisionVertexArray, placed, notUsed, shiftX, shiftY) {
    collisionVertexArray.emplaceBack(placed ? 1 : 0, notUsed ? 1 : 0, shiftX || 0, shiftY || 0);
    collisionVertexArray.emplaceBack(placed ? 1 : 0, notUsed ? 1 : 0, shiftX || 0, shiftY || 0);
    collisionVertexArray.emplaceBack(placed ? 1 : 0, notUsed ? 1 : 0, shiftX || 0, shiftY || 0);
    collisionVertexArray.emplaceBack(placed ? 1 : 0, notUsed ? 1 : 0, shiftX || 0, shiftY || 0);
}
var shift25 = Math.pow(2, 25);
var shift24 = Math.pow(2, 24);
var shift17 = Math.pow(2, 17);
var shift16 = Math.pow(2, 16);
var shift9 = Math.pow(2, 9);
var shift8 = Math.pow(2, 8);
var shift1 = Math.pow(2, 1);
function packOpacity(opacityState) {
    if (opacityState.opacity === 0 && !opacityState.placed) {
        return 0;
    } else if (opacityState.opacity === 1 && opacityState.placed) {
        return 4294967295;
    }
    var targetBit = opacityState.placed ? 1 : 0;
    var opacityBits = Math.floor(opacityState.opacity * 127);
    return opacityBits * shift25 + targetBit * shift24 + opacityBits * shift17 + targetBit * shift16 + opacityBits * shift9 + targetBit * shift8 + opacityBits * shift1 + targetBit;
}
var PACKED_HIDDEN_OPACITY = 0;

var LayerPlacement = function LayerPlacement(styleLayer) {
    this._sortAcrossTiles = styleLayer.layout.get('symbol-z-order') !== 'viewport-y' && styleLayer.layout.get('symbol-sort-key').constantOr(1) !== undefined;
    this._currentTileIndex = 0;
    this._currentPartIndex = 0;
    this._seenCrossTileIDs = {};
    this._bucketParts = [];
};
LayerPlacement.prototype.continuePlacement = function continuePlacement(tiles, placement, showCollisionBoxes, styleLayer, shouldPausePlacement) {
    var bucketParts = this._bucketParts;
    while (this._currentTileIndex < tiles.length) {
        var tile = tiles[this._currentTileIndex];
        placement.getBucketParts(bucketParts, styleLayer, tile, this._sortAcrossTiles);
        this._currentTileIndex++;
        if (shouldPausePlacement()) {
            return true;
        }
    }
    if (this._sortAcrossTiles) {
        this._sortAcrossTiles = false;
        bucketParts.sort(function (a, b) {
            return a.sortKey - b.sortKey;
        });
    }
    while (this._currentPartIndex < bucketParts.length) {
        var bucketPart = bucketParts[this._currentPartIndex];
        placement.placeLayerBucketPart(bucketPart, this._seenCrossTileIDs, showCollisionBoxes);
        this._currentPartIndex++;
        if (shouldPausePlacement()) {
            return true;
        }
    }
    return false;
};
var PauseablePlacement = function PauseablePlacement(transform, order, forceFullPlacement, showCollisionBoxes, fadeDuration, crossSourceCollisions, prevPlacement) {
    this.placement = new Placement(transform, fadeDuration, crossSourceCollisions, prevPlacement);
    this._currentPlacementIndex = order.length - 1;
    this._forceFullPlacement = forceFullPlacement;
    this._showCollisionBoxes = showCollisionBoxes;
    this._done = false;
};
PauseablePlacement.prototype.isDone = function isDone() {
    return this._done;
};
PauseablePlacement.prototype.continuePlacement = function continuePlacement(order, layers, layerTiles) {
    var this$1 = this;
    var startTime = performance.browser.now();
    var shouldPausePlacement = function () {
        var elapsedTime = performance.browser.now() - startTime;
        return this$1._forceFullPlacement ? false : elapsedTime > 2;
    };
    while (this._currentPlacementIndex >= 0) {
        var layerId = order[this._currentPlacementIndex];
        var layer = layers[layerId];
        var placementZoom = this.placement.collisionIndex.transform.zoom;
        if (layer.type === 'symbol' && (!layer.minzoom || layer.minzoom <= placementZoom) && (!layer.maxzoom || layer.maxzoom > placementZoom)) {
            if (!this._inProgressLayer) {
                this._inProgressLayer = new LayerPlacement(layer);
            }
            var pausePlacement = this._inProgressLayer.continuePlacement(layerTiles[layer.source], this.placement, this._showCollisionBoxes, layer, shouldPausePlacement);
            if (pausePlacement) {
                return;
            }
            delete this._inProgressLayer;
        }
        this._currentPlacementIndex--;
    }
    this._done = true;
};
PauseablePlacement.prototype.commit = function commit(now) {
    this.placement.commit(now);
    return this.placement;
};

var roundingFactor = 512 / performance.EXTENT / 2;
var TileLayerIndex = function TileLayerIndex(tileID, symbolInstances, bucketInstanceId) {
    this.tileID = tileID;
    this.indexedSymbolInstances = {};
    this.bucketInstanceId = bucketInstanceId;
    for (var i = 0; i < symbolInstances.length; i++) {
        var symbolInstance = symbolInstances.get(i);
        var key = symbolInstance.key;
        if (!this.indexedSymbolInstances[key]) {
            this.indexedSymbolInstances[key] = [];
        }
        this.indexedSymbolInstances[key].push({
            crossTileID: symbolInstance.crossTileID,
            coord: this.getScaledCoordinates(symbolInstance, tileID)
        });
    }
};
TileLayerIndex.prototype.getScaledCoordinates = function getScaledCoordinates(symbolInstance, childTileID) {
    var zDifference = childTileID.canonical.z - this.tileID.canonical.z;
    var scale = roundingFactor / Math.pow(2, zDifference);
    return {
        x: Math.floor((childTileID.canonical.x * performance.EXTENT + symbolInstance.anchorX) * scale),
        y: Math.floor((childTileID.canonical.y * performance.EXTENT + symbolInstance.anchorY) * scale)
    };
};
TileLayerIndex.prototype.findMatches = function findMatches(symbolInstances, newTileID, zoomCrossTileIDs) {
    var tolerance = this.tileID.canonical.z < newTileID.canonical.z ? 1 : Math.pow(2, this.tileID.canonical.z - newTileID.canonical.z);
    for (var i = 0; i < symbolInstances.length; i++) {
        var symbolInstance = symbolInstances.get(i);
        if (symbolInstance.crossTileID) {
            continue;
        }
        var indexedInstances = this.indexedSymbolInstances[symbolInstance.key];
        if (!indexedInstances) {
            continue;
        }
        var scaledSymbolCoord = this.getScaledCoordinates(symbolInstance, newTileID);
        for (var i$1 = 0, list = indexedInstances; i$1 < list.length; i$1 += 1) {
            var thisTileSymbol = list[i$1];
            if (Math.abs(thisTileSymbol.coord.x - scaledSymbolCoord.x) <= tolerance && Math.abs(thisTileSymbol.coord.y - scaledSymbolCoord.y) <= tolerance && !zoomCrossTileIDs[thisTileSymbol.crossTileID]) {
                zoomCrossTileIDs[thisTileSymbol.crossTileID] = true;
                symbolInstance.crossTileID = thisTileSymbol.crossTileID;
                break;
            }
        }
    }
};
var CrossTileIDs = function CrossTileIDs() {
    this.maxCrossTileID = 0;
};
CrossTileIDs.prototype.generate = function generate() {
    return ++this.maxCrossTileID;
};
var CrossTileSymbolLayerIndex = function CrossTileSymbolLayerIndex() {
    this.indexes = {};
    this.usedCrossTileIDs = {};
    this.lng = 0;
};
CrossTileSymbolLayerIndex.prototype.handleWrapJump = function handleWrapJump(lng) {
    var wrapDelta = Math.round((lng - this.lng) / 360);
    if (wrapDelta !== 0) {
        for (var zoom in this.indexes) {
            var zoomIndexes = this.indexes[zoom];
            var newZoomIndex = {};
            for (var key in zoomIndexes) {
                var index = zoomIndexes[key];
                index.tileID = index.tileID.unwrapTo(index.tileID.wrap + wrapDelta);
                newZoomIndex[index.tileID.key] = index;
            }
            this.indexes[zoom] = newZoomIndex;
        }
    }
    this.lng = lng;
};
CrossTileSymbolLayerIndex.prototype.addBucket = function addBucket(tileID, bucket, crossTileIDs) {
    if (this.indexes[tileID.overscaledZ] && this.indexes[tileID.overscaledZ][tileID.key]) {
        if (this.indexes[tileID.overscaledZ][tileID.key].bucketInstanceId === bucket.bucketInstanceId) {
            return false;
        } else {
            this.removeBucketCrossTileIDs(tileID.overscaledZ, this.indexes[tileID.overscaledZ][tileID.key]);
        }
    }
    for (var i = 0; i < bucket.symbolInstances.length; i++) {
        var symbolInstance = bucket.symbolInstances.get(i);
        symbolInstance.crossTileID = 0;
    }
    if (!this.usedCrossTileIDs[tileID.overscaledZ]) {
        this.usedCrossTileIDs[tileID.overscaledZ] = {};
    }
    var zoomCrossTileIDs = this.usedCrossTileIDs[tileID.overscaledZ];
    for (var zoom in this.indexes) {
        var zoomIndexes = this.indexes[zoom];
        if (Number(zoom) > tileID.overscaledZ) {
            for (var id in zoomIndexes) {
                var childIndex = zoomIndexes[id];
                if (childIndex.tileID.isChildOf(tileID)) {
                    childIndex.findMatches(bucket.symbolInstances, tileID, zoomCrossTileIDs);
                }
            }
        } else {
            var parentCoord = tileID.scaledTo(Number(zoom));
            var parentIndex = zoomIndexes[parentCoord.key];
            if (parentIndex) {
                parentIndex.findMatches(bucket.symbolInstances, tileID, zoomCrossTileIDs);
            }
        }
    }
    for (var i$1 = 0; i$1 < bucket.symbolInstances.length; i$1++) {
        var symbolInstance$1 = bucket.symbolInstances.get(i$1);
        if (!symbolInstance$1.crossTileID) {
            symbolInstance$1.crossTileID = crossTileIDs.generate();
            zoomCrossTileIDs[symbolInstance$1.crossTileID] = true;
        }
    }
    if (this.indexes[tileID.overscaledZ] === undefined) {
        this.indexes[tileID.overscaledZ] = {};
    }
    this.indexes[tileID.overscaledZ][tileID.key] = new TileLayerIndex(tileID, bucket.symbolInstances, bucket.bucketInstanceId);
    return true;
};
CrossTileSymbolLayerIndex.prototype.removeBucketCrossTileIDs = function removeBucketCrossTileIDs(zoom, removedBucket) {
    for (var key in removedBucket.indexedSymbolInstances) {
        for (var i = 0, list = removedBucket.indexedSymbolInstances[key]; i < list.length; i += 1) {
            var symbolInstance = list[i];
            delete this.usedCrossTileIDs[zoom][symbolInstance.crossTileID];
        }
    }
};
CrossTileSymbolLayerIndex.prototype.removeStaleBuckets = function removeStaleBuckets(currentIDs) {
    var tilesChanged = false;
    for (var z in this.indexes) {
        var zoomIndexes = this.indexes[z];
        for (var tileKey in zoomIndexes) {
            if (!currentIDs[zoomIndexes[tileKey].bucketInstanceId]) {
                this.removeBucketCrossTileIDs(z, zoomIndexes[tileKey]);
                delete zoomIndexes[tileKey];
                tilesChanged = true;
            }
        }
    }
    return tilesChanged;
};
var CrossTileSymbolIndex = function CrossTileSymbolIndex() {
    this.layerIndexes = {};
    this.crossTileIDs = new CrossTileIDs();
    this.maxBucketInstanceId = 0;
    this.bucketsInCurrentPlacement = {};
};
CrossTileSymbolIndex.prototype.addLayer = function addLayer(styleLayer, tiles, lng) {
    var layerIndex = this.layerIndexes[styleLayer.id];
    if (layerIndex === undefined) {
        layerIndex = this.layerIndexes[styleLayer.id] = new CrossTileSymbolLayerIndex();
    }
    var symbolBucketsChanged = false;
    var currentBucketIDs = {};
    layerIndex.handleWrapJump(lng);
    for (var i = 0, list = tiles; i < list.length; i += 1) {
        var tile = list[i];
        var symbolBucket = tile.getBucket(styleLayer);
        if (!symbolBucket || styleLayer.id !== symbolBucket.layerIds[0]) {
            continue;
        }
        if (!symbolBucket.bucketInstanceId) {
            symbolBucket.bucketInstanceId = ++this.maxBucketInstanceId;
        }
        if (layerIndex.addBucket(tile.tileID, symbolBucket, this.crossTileIDs)) {
            symbolBucketsChanged = true;
        }
        currentBucketIDs[symbolBucket.bucketInstanceId] = true;
    }
    if (layerIndex.removeStaleBuckets(currentBucketIDs)) {
        symbolBucketsChanged = true;
    }
    return symbolBucketsChanged;
};
CrossTileSymbolIndex.prototype.pruneUnusedLayers = function pruneUnusedLayers(usedLayers) {
    var usedLayerMap = {};
    usedLayers.forEach(function (usedLayer) {
        usedLayerMap[usedLayer] = true;
    });
    for (var layerId in this.layerIndexes) {
        if (!usedLayerMap[layerId]) {
            delete this.layerIndexes[layerId];
        }
    }
};

var emitValidationErrors = function (evented, errors) {
    return performance.emitValidationErrors(evented, errors && errors.filter(function (error) {
        return error.identifier !== 'source.canvas';
    }));
};
var supportedDiffOperations = performance.pick(operations, [
    'addLayer',
    'removeLayer',
    'setPaintProperty',
    'setLayoutProperty',
    'setFilter',
    'addSource',
    'removeSource',
    'setLayerZoomRange',
    'setLight',
    'setTransition',
    'setGeoJSONSourceData'
]);
var ignoredDiffOperations = performance.pick(operations, [
    'setCenter',
    'setZoom',
    'setBearing',
    'setPitch'
]);
var empty = emptyStyle();
var Style = function (Evented) {
    function Style(map, options) {
        var this$1 = this;
        if (options === void 0)
            options = {};
        Evented.call(this);
        this.map = map;
        this.dispatcher = new Dispatcher(getGlobalWorkerPool(), this);
        this.imageManager = new ImageManager();
        this.imageManager.setEventedParent(this);
        this.glyphManager = new GlyphManager(map._requestManager, options.localIdeographFontFamily);
        this.lineAtlas = new LineAtlas(256, 512);
        this.crossTileSymbolIndex = new CrossTileSymbolIndex();
        this._layers = {};
        this._serializedLayers = {};
        this._order = [];
        this.sourceCaches = {};
        this.zoomHistory = new performance.ZoomHistory();
        this._loaded = false;
        this._availableImages = [];
        this._resetUpdates();
        this.dispatcher.broadcast('setReferrer', performance.getReferrer());
        var self = this;
        this._rtlTextPluginCallback = Style.registerForPluginStateChange(function (event) {
            var state = {
                pluginStatus: event.pluginStatus,
                pluginURL: event.pluginURL
            };
            self.dispatcher.broadcast('syncRTLPluginState', state, function (err, results) {
                performance.triggerPluginCompletionEvent(err);
                if (results) {
                    var allComplete = results.every(function (elem) {
                        return elem;
                    });
                    if (allComplete) {
                        for (var id in self.sourceCaches) {
                            self.sourceCaches[id].reload();
                        }
                    }
                }
            });
        });
        this.on('data', function (event) {
            if (event.dataType !== 'source' || event.sourceDataType !== 'metadata') {
                return;
            }
            var sourceCache = this$1.sourceCaches[event.sourceId];
            if (!sourceCache) {
                return;
            }
            var source = sourceCache.getSource();
            if (!source || !source.vectorLayerIds) {
                return;
            }
            for (var layerId in this$1._layers) {
                var layer = this$1._layers[layerId];
                if (layer.source === source.id) {
                    this$1._validateLayer(layer);
                }
            }
        });
    }
    if (Evented)
        Style.__proto__ = Evented;
    Style.prototype = Object.create(Evented && Evented.prototype);
    Style.prototype.constructor = Style;
    Style.prototype.loadURL = function loadURL(url, options) {
        var this$1 = this;
        if (options === void 0)
            options = {};
        this.fire(new performance.Event('dataloading', { dataType: 'style' }));
        var validate = typeof options.validate === 'boolean' ? options.validate : !performance.isMapboxURL(url);
        url = this.map._requestManager.normalizeStyleURL(url, options.accessToken);
        var request = this.map._requestManager.transformRequest(url, performance.ResourceType.Style);
        this._request = performance.getJSON(request, function (error, json) {
            this$1._request = null;
            if (error) {
                this$1.fire(new performance.ErrorEvent(error));
            } else if (json) {
                this$1._load(json, validate);
            }
        });
    };
    Style.prototype.loadJSON = function loadJSON(json, options) {
        var this$1 = this;
        if (options === void 0)
            options = {};
        this.fire(new performance.Event('dataloading', { dataType: 'style' }));
        this._request = performance.browser.frame(function () {
            this$1._request = null;
            this$1._load(json, options.validate !== false);
        });
    };
    Style.prototype.loadEmpty = function loadEmpty() {
        this.fire(new performance.Event('dataloading', { dataType: 'style' }));
        this._load(empty, false);
    };
    Style.prototype._load = function _load(json, validate) {
        if (validate && emitValidationErrors(this, performance.validateStyle(json))) {
            return;
        }
        this._loaded = true;
        this.stylesheet = json;
        for (var id in json.sources) {
            this.addSource(id, json.sources[id], { validate: false });
        }
        if (json.sprite) {
            this._loadSprite(json.sprite);
        } else {
            this.imageManager.setLoaded(true);
        }
        this.glyphManager.setURL(json.glyphs);
        var layers = derefLayers(this.stylesheet.layers);
        this._order = layers.map(function (layer) {
            return layer.id;
        });
        this._layers = {};
        this._serializedLayers = {};
        for (var i = 0, list = layers; i < list.length; i += 1) {
            var layer = list[i];
            layer = performance.createStyleLayer(layer);
            layer.setEventedParent(this, { layer: { id: layer.id } });
            this._layers[layer.id] = layer;
            this._serializedLayers[layer.id] = layer.serialize();
        }
        this.dispatcher.broadcast('setLayers', this._serializeLayers(this._order));
        this.light = new Light(this.stylesheet.light);
        this.fire(new performance.Event('data', { dataType: 'style' }));
        this.fire(new performance.Event('style.load'));
    };
    Style.prototype._loadSprite = function _loadSprite(url) {
        var this$1 = this;
        this._spriteRequest = loadSprite(url, this.map._requestManager, function (err, images) {
            this$1._spriteRequest = null;
            if (err) {
                this$1.fire(new performance.ErrorEvent(err));
            } else if (images) {
                for (var id in images) {
                    this$1.imageManager.addImage(id, images[id]);
                }
            }
            this$1.imageManager.setLoaded(true);
            this$1._availableImages = this$1.imageManager.listImages();
            this$1.dispatcher.broadcast('setImages', this$1._availableImages);
            this$1.fire(new performance.Event('data', { dataType: 'style' }));
        });
    };
    Style.prototype._validateLayer = function _validateLayer(layer) {
        var sourceCache = this.sourceCaches[layer.source];
        if (!sourceCache) {
            return;
        }
        var sourceLayer = layer.sourceLayer;
        if (!sourceLayer) {
            return;
        }
        var source = sourceCache.getSource();
        if (source.type === 'geojson' || source.vectorLayerIds && source.vectorLayerIds.indexOf(sourceLayer) === -1) {
            this.fire(new performance.ErrorEvent(new Error('Source layer "' + sourceLayer + '" ' + 'does not exist on source "' + source.id + '" ' + 'as specified by style layer "' + layer.id + '"')));
        }
    };
    Style.prototype.loaded = function loaded() {
        if (!this._loaded) {
            return false;
        }
        if (Object.keys(this._updatedSources).length) {
            return false;
        }
        for (var id in this.sourceCaches) {
            if (!this.sourceCaches[id].loaded()) {
                return false;
            }
        }
        if (!this.imageManager.isLoaded()) {
            return false;
        }
        return true;
    };
    Style.prototype._serializeLayers = function _serializeLayers(ids) {
        var serializedLayers = [];
        for (var i = 0, list = ids; i < list.length; i += 1) {
            var id = list[i];
            var layer = this._layers[id];
            if (layer.type !== 'custom') {
                serializedLayers.push(layer.serialize());
            }
        }
        return serializedLayers;
    };
    Style.prototype.hasTransitions = function hasTransitions() {
        if (this.light && this.light.hasTransition()) {
            return true;
        }
        for (var id in this.sourceCaches) {
            if (this.sourceCaches[id].hasTransition()) {
                return true;
            }
        }
        for (var id$1 in this._layers) {
            if (this._layers[id$1].hasTransition()) {
                return true;
            }
        }
        return false;
    };
    Style.prototype._checkLoaded = function _checkLoaded() {
        if (!this._loaded) {
            throw new Error('Style is not done loading');
        }
    };
    Style.prototype.update = function update(parameters) {
        if (!this._loaded) {
            return;
        }
        var changed = this._changed;
        if (this._changed) {
            var updatedIds = Object.keys(this._updatedLayers);
            var removedIds = Object.keys(this._removedLayers);
            if (updatedIds.length || removedIds.length) {
                this._updateWorkerLayers(updatedIds, removedIds);
            }
            for (var id in this._updatedSources) {
                var action = this._updatedSources[id];
                if (action === 'reload') {
                    this._reloadSource(id);
                } else if (action === 'clear') {
                    this._clearSource(id);
                }
            }
            this._updateTilesForChangedImages();
            for (var id$1 in this._updatedPaintProps) {
                this._layers[id$1].updateTransitions(parameters);
            }
            this.light.updateTransitions(parameters);
            this._resetUpdates();
        }
        var sourcesUsedBefore = {};
        for (var sourceId in this.sourceCaches) {
            var sourceCache = this.sourceCaches[sourceId];
            sourcesUsedBefore[sourceId] = sourceCache.used;
            sourceCache.used = false;
        }
        for (var i = 0, list = this._order; i < list.length; i += 1) {
            var layerId = list[i];
            var layer = this._layers[layerId];
            layer.recalculate(parameters, this._availableImages);
            if (!layer.isHidden(parameters.zoom) && layer.source) {
                this.sourceCaches[layer.source].used = true;
            }
        }
        for (var sourceId$1 in sourcesUsedBefore) {
            var sourceCache$1 = this.sourceCaches[sourceId$1];
            if (sourcesUsedBefore[sourceId$1] !== sourceCache$1.used) {
                sourceCache$1.fire(new performance.Event('data', {
                    sourceDataType: 'visibility',
                    dataType: 'source',
                    sourceId: sourceId$1
                }));
            }
        }
        this.light.recalculate(parameters);
        this.z = parameters.zoom;
        if (changed) {
            this.fire(new performance.Event('data', { dataType: 'style' }));
        }
    };
    Style.prototype._updateTilesForChangedImages = function _updateTilesForChangedImages() {
        var changedImages = Object.keys(this._changedImages);
        if (changedImages.length) {
            for (var name in this.sourceCaches) {
                this.sourceCaches[name].reloadTilesForDependencies([
                    'icons',
                    'patterns'
                ], changedImages);
            }
            this._changedImages = {};
        }
    };
    Style.prototype._updateWorkerLayers = function _updateWorkerLayers(updatedIds, removedIds) {
        this.dispatcher.broadcast('updateLayers', {
            layers: this._serializeLayers(updatedIds),
            removedIds: removedIds
        });
    };
    Style.prototype._resetUpdates = function _resetUpdates() {
        this._changed = false;
        this._updatedLayers = {};
        this._removedLayers = {};
        this._updatedSources = {};
        this._updatedPaintProps = {};
        this._changedImages = {};
    };
    Style.prototype.setState = function setState(nextState) {
        var this$1 = this;
        this._checkLoaded();
        if (emitValidationErrors(this, performance.validateStyle(nextState))) {
            return false;
        }
        nextState = performance.clone$1(nextState);
        nextState.layers = derefLayers(nextState.layers);
        var changes = diffStyles(this.serialize(), nextState).filter(function (op) {
            return !(op.command in ignoredDiffOperations);
        });
        if (changes.length === 0) {
            return false;
        }
        var unimplementedOps = changes.filter(function (op) {
            return !(op.command in supportedDiffOperations);
        });
        if (unimplementedOps.length > 0) {
            throw new Error('Unimplemented: ' + unimplementedOps.map(function (op) {
                return op.command;
            }).join(', ') + '.');
        }
        changes.forEach(function (op) {
            if (op.command === 'setTransition') {
                return;
            }
            this$1[op.command].apply(this$1, op.args);
        });
        this.stylesheet = nextState;
        return true;
    };
    Style.prototype.addImage = function addImage(id, image) {
        if (this.getImage(id)) {
            return this.fire(new performance.ErrorEvent(new Error('An image with this name already exists.')));
        }
        this.imageManager.addImage(id, image);
        this._afterImageUpdated(id);
    };
    Style.prototype.updateImage = function updateImage(id, image) {
        this.imageManager.updateImage(id, image);
    };
    Style.prototype.getImage = function getImage(id) {
        return this.imageManager.getImage(id);
    };
    Style.prototype.removeImage = function removeImage(id) {
        if (!this.getImage(id)) {
            return this.fire(new performance.ErrorEvent(new Error('No image with this name exists.')));
        }
        this.imageManager.removeImage(id);
        this._afterImageUpdated(id);
    };
    Style.prototype._afterImageUpdated = function _afterImageUpdated(id) {
        this._availableImages = this.imageManager.listImages();
        this._changedImages[id] = true;
        this._changed = true;
        this.dispatcher.broadcast('setImages', this._availableImages);
        this.fire(new performance.Event('data', { dataType: 'style' }));
    };
    Style.prototype.listImages = function listImages() {
        this._checkLoaded();
        return this.imageManager.listImages();
    };
    Style.prototype.addSource = function addSource(id, source, options) {
        var this$1 = this;
        if (options === void 0)
            options = {};
        this._checkLoaded();
        if (this.sourceCaches[id] !== undefined) {
            throw new Error('There is already a source with this ID');
        }
        if (!source.type) {
            throw new Error('The type property must be defined, but only the following properties were given: ' + Object.keys(source).join(', ') + '.');
        }
        var builtIns = [
            'vector',
            'raster',
            'geojson',
            'video',
            'image'
        ];
        var shouldValidate = builtIns.indexOf(source.type) >= 0;
        if (shouldValidate && this._validate(performance.validateStyle.source, 'sources.' + id, source, null, options)) {
            return;
        }
        if (this.map && this.map._collectResourceTiming) {
            source.collectResourceTiming = true;
        }
        var sourceCache = this.sourceCaches[id] = new SourceCache(id, source, this.dispatcher);
        sourceCache.style = this;
        sourceCache.setEventedParent(this, function () {
            return {
                isSourceLoaded: this$1.loaded(),
                source: sourceCache.serialize(),
                sourceId: id
            };
        });
        sourceCache.onAdd(this.map);
        this._changed = true;
    };
    Style.prototype.removeSource = function removeSource(id) {
        this._checkLoaded();
        if (this.sourceCaches[id] === undefined) {
            throw new Error('There is no source with this ID');
        }
        for (var layerId in this._layers) {
            if (this._layers[layerId].source === id) {
                return this.fire(new performance.ErrorEvent(new Error('Source "' + id + '" cannot be removed while layer "' + layerId + '" is using it.')));
            }
        }
        var sourceCache = this.sourceCaches[id];
        delete this.sourceCaches[id];
        delete this._updatedSources[id];
        sourceCache.fire(new performance.Event('data', {
            sourceDataType: 'metadata',
            dataType: 'source',
            sourceId: id
        }));
        sourceCache.setEventedParent(null);
        sourceCache.clearTiles();
        if (sourceCache.onRemove) {
            sourceCache.onRemove(this.map);
        }
        this._changed = true;
    };
    Style.prototype.setGeoJSONSourceData = function setGeoJSONSourceData(id, data) {
        this._checkLoaded();
        var geojsonSource = this.sourceCaches[id].getSource();
        geojsonSource.setData(data);
        this._changed = true;
    };
    Style.prototype.getSource = function getSource(id) {
        return this.sourceCaches[id] && this.sourceCaches[id].getSource();
    };
    Style.prototype.addLayer = function addLayer(layerObject, before, options) {
        if (options === void 0)
            options = {};
        this._checkLoaded();
        var id = layerObject.id;
        if (this.getLayer(id)) {
            this.fire(new performance.ErrorEvent(new Error('Layer with id "' + id + '" already exists on this map')));
            return;
        }
        var layer;
        if (layerObject.type === 'custom') {
            if (emitValidationErrors(this, performance.validateCustomStyleLayer(layerObject))) {
                return;
            }
            layer = performance.createStyleLayer(layerObject);
        } else {
            if (typeof layerObject.source === 'object') {
                this.addSource(id, layerObject.source);
                layerObject = performance.clone$1(layerObject);
                layerObject = performance.extend(layerObject, { source: id });
            }
            if (this._validate(performance.validateStyle.layer, 'layers.' + id, layerObject, { arrayIndex: -1 }, options)) {
                return;
            }
            layer = performance.createStyleLayer(layerObject);
            this._validateLayer(layer);
            layer.setEventedParent(this, { layer: { id: id } });
            this._serializedLayers[layer.id] = layer.serialize();
        }
        var index = before ? this._order.indexOf(before) : this._order.length;
        if (before && index === -1) {
            this.fire(new performance.ErrorEvent(new Error('Layer with id "' + before + '" does not exist on this map.')));
            return;
        }
        this._order.splice(index, 0, id);
        this._layerOrderChanged = true;
        this._layers[id] = layer;
        if (this._removedLayers[id] && layer.source && layer.type !== 'custom') {
            var removed = this._removedLayers[id];
            delete this._removedLayers[id];
            if (removed.type !== layer.type) {
                this._updatedSources[layer.source] = 'clear';
            } else {
                this._updatedSources[layer.source] = 'reload';
                this.sourceCaches[layer.source].pause();
            }
        }
        this._updateLayer(layer);
        if (layer.onAdd) {
            layer.onAdd(this.map);
        }
    };
    Style.prototype.moveLayer = function moveLayer(id, before) {
        this._checkLoaded();
        this._changed = true;
        var layer = this._layers[id];
        if (!layer) {
            this.fire(new performance.ErrorEvent(new Error('The layer \'' + id + '\' does not exist in the map\'s style and cannot be moved.')));
            return;
        }
        if (id === before) {
            return;
        }
        var index = this._order.indexOf(id);
        this._order.splice(index, 1);
        var newIndex = before ? this._order.indexOf(before) : this._order.length;
        if (before && newIndex === -1) {
            this.fire(new performance.ErrorEvent(new Error('Layer with id "' + before + '" does not exist on this map.')));
            return;
        }
        this._order.splice(newIndex, 0, id);
        this._layerOrderChanged = true;
    };
    Style.prototype.removeLayer = function removeLayer(id) {
        this._checkLoaded();
        var layer = this._layers[id];
        if (!layer) {
            this.fire(new performance.ErrorEvent(new Error('The layer \'' + id + '\' does not exist in the map\'s style and cannot be removed.')));
            return;
        }
        layer.setEventedParent(null);
        var index = this._order.indexOf(id);
        this._order.splice(index, 1);
        this._layerOrderChanged = true;
        this._changed = true;
        this._removedLayers[id] = layer;
        delete this._layers[id];
        delete this._serializedLayers[id];
        delete this._updatedLayers[id];
        delete this._updatedPaintProps[id];
        if (layer.onRemove) {
            layer.onRemove(this.map);
        }
    };
    Style.prototype.getLayer = function getLayer(id) {
        return this._layers[id];
    };
    Style.prototype.hasLayer = function hasLayer(id) {
        return id in this._layers;
    };
    Style.prototype.setLayerZoomRange = function setLayerZoomRange(layerId, minzoom, maxzoom) {
        this._checkLoaded();
        var layer = this.getLayer(layerId);
        if (!layer) {
            this.fire(new performance.ErrorEvent(new Error('The layer \'' + layerId + '\' does not exist in the map\'s style and cannot have zoom extent.')));
            return;
        }
        if (layer.minzoom === minzoom && layer.maxzoom === maxzoom) {
            return;
        }
        if (minzoom != null) {
            layer.minzoom = minzoom;
        }
        if (maxzoom != null) {
            layer.maxzoom = maxzoom;
        }
        this._updateLayer(layer);
    };
    Style.prototype.setFilter = function setFilter(layerId, filter, options) {
        if (options === void 0)
            options = {};
        this._checkLoaded();
        var layer = this.getLayer(layerId);
        if (!layer) {
            this.fire(new performance.ErrorEvent(new Error('The layer \'' + layerId + '\' does not exist in the map\'s style and cannot be filtered.')));
            return;
        }
        if (performance.deepEqual(layer.filter, filter)) {
            return;
        }
        if (filter === null || filter === undefined) {
            layer.filter = undefined;
            this._updateLayer(layer);
            return;
        }
        if (this._validate(performance.validateStyle.filter, 'layers.' + layer.id + '.filter', filter, null, options)) {
            return;
        }
        layer.filter = performance.clone$1(filter);
        this._updateLayer(layer);
    };
    Style.prototype.getFilter = function getFilter(layer) {
        return performance.clone$1(this.getLayer(layer).filter);
    };
    Style.prototype.setLayoutProperty = function setLayoutProperty(layerId, name, value, options) {
        if (options === void 0)
            options = {};
        this._checkLoaded();
        var layer = this.getLayer(layerId);
        if (!layer) {
            this.fire(new performance.ErrorEvent(new Error('The layer \'' + layerId + '\' does not exist in the map\'s style and cannot be styled.')));
            return;
        }
        if (performance.deepEqual(layer.getLayoutProperty(name), value)) {
            return;
        }
        layer.setLayoutProperty(name, value, options);
        this._updateLayer(layer);
    };
    Style.prototype.getLayoutProperty = function getLayoutProperty(layerId, name) {
        var layer = this.getLayer(layerId);
        if (!layer) {
            this.fire(new performance.ErrorEvent(new Error('The layer \'' + layerId + '\' does not exist in the map\'s style.')));
            return;
        }
        return layer.getLayoutProperty(name);
    };
    Style.prototype.setPaintProperty = function setPaintProperty(layerId, name, value, options) {
        if (options === void 0)
            options = {};
        this._checkLoaded();
        var layer = this.getLayer(layerId);
        if (!layer) {
            this.fire(new performance.ErrorEvent(new Error('The layer \'' + layerId + '\' does not exist in the map\'s style and cannot be styled.')));
            return;
        }
        if (performance.deepEqual(layer.getPaintProperty(name), value)) {
            return;
        }
        var requiresRelayout = layer.setPaintProperty(name, value, options);
        if (requiresRelayout) {
            this._updateLayer(layer);
        }
        this._changed = true;
        this._updatedPaintProps[layerId] = true;
    };
    Style.prototype.getPaintProperty = function getPaintProperty(layer, name) {
        return this.getLayer(layer).getPaintProperty(name);
    };
    Style.prototype.setFeatureState = function setFeatureState(target, state) {
        this._checkLoaded();
        var sourceId = target.source;
        var sourceLayer = target.sourceLayer;
        var sourceCache = this.sourceCaches[sourceId];
        if (sourceCache === undefined) {
            this.fire(new performance.ErrorEvent(new Error('The source \'' + sourceId + '\' does not exist in the map\'s style.')));
            return;
        }
        var sourceType = sourceCache.getSource().type;
        if (sourceType === 'geojson' && sourceLayer) {
            this.fire(new performance.ErrorEvent(new Error('GeoJSON sources cannot have a sourceLayer parameter.')));
            return;
        }
        if (sourceType === 'vector' && !sourceLayer) {
            this.fire(new performance.ErrorEvent(new Error('The sourceLayer parameter must be provided for vector source types.')));
            return;
        }
        if (target.id === undefined) {
            this.fire(new performance.ErrorEvent(new Error('The feature id parameter must be provided.')));
        }
        sourceCache.setFeatureState(sourceLayer, target.id, state);
    };
    Style.prototype.removeFeatureState = function removeFeatureState(target, key) {
        this._checkLoaded();
        var sourceId = target.source;
        var sourceCache = this.sourceCaches[sourceId];
        if (sourceCache === undefined) {
            this.fire(new performance.ErrorEvent(new Error('The source \'' + sourceId + '\' does not exist in the map\'s style.')));
            return;
        }
        var sourceType = sourceCache.getSource().type;
        var sourceLayer = sourceType === 'vector' ? target.sourceLayer : undefined;
        if (sourceType === 'vector' && !sourceLayer) {
            this.fire(new performance.ErrorEvent(new Error('The sourceLayer parameter must be provided for vector source types.')));
            return;
        }
        if (key && (typeof target.id !== 'string' && typeof target.id !== 'number')) {
            this.fire(new performance.ErrorEvent(new Error('A feature id is required to remove its specific state property.')));
            return;
        }
        sourceCache.removeFeatureState(sourceLayer, target.id, key);
    };
    Style.prototype.getFeatureState = function getFeatureState(target) {
        this._checkLoaded();
        var sourceId = target.source;
        var sourceLayer = target.sourceLayer;
        var sourceCache = this.sourceCaches[sourceId];
        if (sourceCache === undefined) {
            this.fire(new performance.ErrorEvent(new Error('The source \'' + sourceId + '\' does not exist in the map\'s style.')));
            return;
        }
        var sourceType = sourceCache.getSource().type;
        if (sourceType === 'vector' && !sourceLayer) {
            this.fire(new performance.ErrorEvent(new Error('The sourceLayer parameter must be provided for vector source types.')));
            return;
        }
        if (target.id === undefined) {
            this.fire(new performance.ErrorEvent(new Error('The feature id parameter must be provided.')));
        }
        return sourceCache.getFeatureState(sourceLayer, target.id);
    };
    Style.prototype.getTransition = function getTransition() {
        return performance.extend({
            duration: 300,
            delay: 0
        }, this.stylesheet && this.stylesheet.transition);
    };
    Style.prototype.serialize = function serialize() {
        return performance.filterObject({
            version: this.stylesheet.version,
            name: this.stylesheet.name,
            metadata: this.stylesheet.metadata,
            light: this.stylesheet.light,
            center: this.stylesheet.center,
            zoom: this.stylesheet.zoom,
            bearing: this.stylesheet.bearing,
            pitch: this.stylesheet.pitch,
            sprite: this.stylesheet.sprite,
            glyphs: this.stylesheet.glyphs,
            transition: this.stylesheet.transition,
            sources: performance.mapObject(this.sourceCaches, function (source) {
                return source.serialize();
            }),
            layers: this._serializeLayers(this._order)
        }, function (value) {
            return value !== undefined;
        });
    };
    Style.prototype._updateLayer = function _updateLayer(layer) {
        this._updatedLayers[layer.id] = true;
        if (layer.source && !this._updatedSources[layer.source] && this.sourceCaches[layer.source].getSource().type !== 'raster') {
            this._updatedSources[layer.source] = 'reload';
            this.sourceCaches[layer.source].pause();
        }
        this._changed = true;
    };
    Style.prototype._flattenAndSortRenderedFeatures = function _flattenAndSortRenderedFeatures(sourceResults) {
        var this$1 = this;
        var isLayer3D = function (layerId) {
            return this$1._layers[layerId].type === 'fill-extrusion';
        };
        var layerIndex = {};
        var features3D = [];
        for (var l = this._order.length - 1; l >= 0; l--) {
            var layerId = this._order[l];
            if (isLayer3D(layerId)) {
                layerIndex[layerId] = l;
                for (var i$2 = 0, list$1 = sourceResults; i$2 < list$1.length; i$2 += 1) {
                    var sourceResult = list$1[i$2];
                    var layerFeatures = sourceResult[layerId];
                    if (layerFeatures) {
                        for (var i$1 = 0, list = layerFeatures; i$1 < list.length; i$1 += 1) {
                            var featureWrapper = list[i$1];
                            features3D.push(featureWrapper);
                        }
                    }
                }
            }
        }
        features3D.sort(function (a, b) {
            return b.intersectionZ - a.intersectionZ;
        });
        var features = [];
        for (var l$1 = this._order.length - 1; l$1 >= 0; l$1--) {
            var layerId$1 = this._order[l$1];
            if (isLayer3D(layerId$1)) {
                for (var i = features3D.length - 1; i >= 0; i--) {
                    var topmost3D = features3D[i].feature;
                    if (layerIndex[topmost3D.layer.id] < l$1) {
                        break;
                    }
                    features.push(topmost3D);
                    features3D.pop();
                }
            } else {
                for (var i$4 = 0, list$3 = sourceResults; i$4 < list$3.length; i$4 += 1) {
                    var sourceResult$1 = list$3[i$4];
                    var layerFeatures$1 = sourceResult$1[layerId$1];
                    if (layerFeatures$1) {
                        for (var i$3 = 0, list$2 = layerFeatures$1; i$3 < list$2.length; i$3 += 1) {
                            var featureWrapper$1 = list$2[i$3];
                            features.push(featureWrapper$1.feature);
                        }
                    }
                }
            }
        }
        return features;
    };
    Style.prototype.queryRenderedFeatures = function queryRenderedFeatures$1(queryGeometry, params, transform) {
        if (params && params.filter) {
            this._validate(performance.validateStyle.filter, 'queryRenderedFeatures.filter', params.filter, null, params);
        }
        var includedSources = {};
        if (params && params.layers) {
            if (!Array.isArray(params.layers)) {
                this.fire(new performance.ErrorEvent(new Error('parameters.layers must be an Array.')));
                return [];
            }
            for (var i = 0, list = params.layers; i < list.length; i += 1) {
                var layerId = list[i];
                var layer = this._layers[layerId];
                if (!layer) {
                    this.fire(new performance.ErrorEvent(new Error('The layer \'' + layerId + '\' does not exist in the map\'s style and cannot be queried for features.')));
                    return [];
                }
                includedSources[layer.source] = true;
            }
        }
        var sourceResults = [];
        params.availableImages = this._availableImages;
        for (var id in this.sourceCaches) {
            if (params.layers && !includedSources[id]) {
                continue;
            }
            sourceResults.push(queryRenderedFeatures(this.sourceCaches[id], this._layers, this._serializedLayers, queryGeometry, params, transform));
        }
        if (this.placement) {
            sourceResults.push(queryRenderedSymbols(this._layers, this._serializedLayers, this.sourceCaches, queryGeometry, params, this.placement.collisionIndex, this.placement.retainedQueryData));
        }
        return this._flattenAndSortRenderedFeatures(sourceResults);
    };
    Style.prototype.querySourceFeatures = function querySourceFeatures$1(sourceID, params) {
        if (params && params.filter) {
            this._validate(performance.validateStyle.filter, 'querySourceFeatures.filter', params.filter, null, params);
        }
        var sourceCache = this.sourceCaches[sourceID];
        return sourceCache ? querySourceFeatures(sourceCache, params) : [];
    };
    Style.prototype.addSourceType = function addSourceType(name, SourceType, callback) {
        if (Style.getSourceType(name)) {
            return callback(new Error('A source type called "' + name + '" already exists.'));
        }
        Style.setSourceType(name, SourceType);
        if (!SourceType.workerSourceURL) {
            return callback(null, null);
        }
        this.dispatcher.broadcast('loadWorkerSource', {
            name: name,
            url: SourceType.workerSourceURL
        }, callback);
    };
    Style.prototype.getLight = function getLight() {
        return this.light.getLight();
    };
    Style.prototype.setLight = function setLight(lightOptions, options) {
        if (options === void 0)
            options = {};
        this._checkLoaded();
        var light = this.light.getLight();
        var _update = false;
        for (var key in lightOptions) {
            if (!performance.deepEqual(lightOptions[key], light[key])) {
                _update = true;
                break;
            }
        }
        if (!_update) {
            return;
        }
        var parameters = {
            now: performance.browser.now(),
            transition: performance.extend({
                duration: 300,
                delay: 0
            }, this.stylesheet.transition)
        };
        this.light.setLight(lightOptions, options);
        this.light.updateTransitions(parameters);
    };
    Style.prototype._validate = function _validate(validate, key, value, props, options) {
        if (options === void 0)
            options = {};
        if (options && options.validate === false) {
            return false;
        }
        return emitValidationErrors(this, validate.call(performance.validateStyle, performance.extend({
            key: key,
            style: this.serialize(),
            value: value,
            styleSpec: performance.styleSpec
        }, props)));
    };
    Style.prototype._remove = function _remove() {
        if (this._request) {
            this._request.cancel();
            this._request = null;
        }
        if (this._spriteRequest) {
            this._spriteRequest.cancel();
            this._spriteRequest = null;
        }
        performance.evented.off('pluginStateChange', this._rtlTextPluginCallback);
        for (var layerId in this._layers) {
            var layer = this._layers[layerId];
            layer.setEventedParent(null);
        }
        for (var id in this.sourceCaches) {
            this.sourceCaches[id].clearTiles();
            this.sourceCaches[id].setEventedParent(null);
        }
        this.imageManager.setEventedParent(null);
        this.setEventedParent(null);
        this.dispatcher.remove();
    };
    Style.prototype._clearSource = function _clearSource(id) {
        this.sourceCaches[id].clearTiles();
    };
    Style.prototype._reloadSource = function _reloadSource(id) {
        this.sourceCaches[id].resume();
        this.sourceCaches[id].reload();
    };
    Style.prototype._updateSources = function _updateSources(transform) {
        for (var id in this.sourceCaches) {
            this.sourceCaches[id].update(transform);
        }
    };
    Style.prototype._generateCollisionBoxes = function _generateCollisionBoxes() {
        for (var id in this.sourceCaches) {
            this._reloadSource(id);
        }
    };
    Style.prototype._updatePlacement = function _updatePlacement(transform, showCollisionBoxes, fadeDuration, crossSourceCollisions, forceFullPlacement) {
        if (forceFullPlacement === void 0)
            forceFullPlacement = false;
        var symbolBucketsChanged = false;
        var placementCommitted = false;
        var layerTiles = {};
        for (var i = 0, list = this._order; i < list.length; i += 1) {
            var layerID = list[i];
            var styleLayer = this._layers[layerID];
            if (styleLayer.type !== 'symbol') {
                continue;
            }
            if (!layerTiles[styleLayer.source]) {
                var sourceCache = this.sourceCaches[styleLayer.source];
                layerTiles[styleLayer.source] = sourceCache.getRenderableIds(true).map(function (id) {
                    return sourceCache.getTileByID(id);
                }).sort(function (a, b) {
                    return b.tileID.overscaledZ - a.tileID.overscaledZ || (a.tileID.isLessThan(b.tileID) ? -1 : 1);
                });
            }
            var layerBucketsChanged = this.crossTileSymbolIndex.addLayer(styleLayer, layerTiles[styleLayer.source], transform.center.lng);
            symbolBucketsChanged = symbolBucketsChanged || layerBucketsChanged;
        }
        this.crossTileSymbolIndex.pruneUnusedLayers(this._order);
        forceFullPlacement = forceFullPlacement || this._layerOrderChanged || fadeDuration === 0;
        if (forceFullPlacement || !this.pauseablePlacement || this.pauseablePlacement.isDone() && !this.placement.stillRecent(performance.browser.now(), transform.zoom)) {
            this.pauseablePlacement = new PauseablePlacement(transform, this._order, forceFullPlacement, showCollisionBoxes, fadeDuration, crossSourceCollisions, this.placement);
            this._layerOrderChanged = false;
        }
        if (this.pauseablePlacement.isDone()) {
            this.placement.setStale();
        } else {
            this.pauseablePlacement.continuePlacement(this._order, this._layers, layerTiles);
            if (this.pauseablePlacement.isDone()) {
                this.placement = this.pauseablePlacement.commit(performance.browser.now());
                placementCommitted = true;
            }
            if (symbolBucketsChanged) {
                this.pauseablePlacement.placement.setStale();
            }
        }
        if (placementCommitted || symbolBucketsChanged) {
            for (var i$1 = 0, list$1 = this._order; i$1 < list$1.length; i$1 += 1) {
                var layerID$1 = list$1[i$1];
                var styleLayer$1 = this._layers[layerID$1];
                if (styleLayer$1.type !== 'symbol') {
                    continue;
                }
                this.placement.updateLayerOpacities(styleLayer$1, layerTiles[styleLayer$1.source]);
            }
        }
        var needsRerender = !this.pauseablePlacement.isDone() || this.placement.hasTransitions(performance.browser.now());
        return needsRerender;
    };
    Style.prototype._releaseSymbolFadeTiles = function _releaseSymbolFadeTiles() {
        for (var id in this.sourceCaches) {
            this.sourceCaches[id].releaseSymbolFadeTiles();
        }
    };
    Style.prototype.getImages = function getImages(mapId, params, callback) {
        this.imageManager.getImages(params.icons, callback);
        this._updateTilesForChangedImages();
        var sourceCache = this.sourceCaches[params.source];
        if (sourceCache) {
            sourceCache.setDependencies(params.tileID.key, params.type, params.icons);
        }
    };
    Style.prototype.getGlyphs = function getGlyphs(mapId, params, callback) {
        this.glyphManager.getGlyphs(params.stacks, callback);
    };
    Style.prototype.getResource = function getResource(mapId, params, callback) {
        return performance.makeRequest(params, callback);
    };
    return Style;
}(performance.Evented);
Style.getSourceType = getType;
Style.setSourceType = setType;
Style.registerForPluginStateChange = performance.registerForPluginStateChange;

var posAttributes = performance.createLayout([{
        name: 'a_pos',
        type: 'Int16',
        components: 2
    }]);

var preludeFrag = "#ifdef GL_ES\nprecision mediump float;\n#else\n#if !defined(lowp)\n#define lowp\n#endif\n#if !defined(mediump)\n#define mediump\n#endif\n#if !defined(highp)\n#define highp\n#endif\n#endif";

var preludeVert = "#ifdef GL_ES\nprecision highp float;\n#else\n#if !defined(lowp)\n#define lowp\n#endif\n#if !defined(mediump)\n#define mediump\n#endif\n#if !defined(highp)\n#define highp\n#endif\n#endif\nvec2 unpack_float(const float packedValue) {int packedIntValue=int(packedValue);int v0=packedIntValue/256;return vec2(v0,packedIntValue-v0*256);}vec2 unpack_opacity(const float packedOpacity) {int intOpacity=int(packedOpacity)/2;return vec2(float(intOpacity)/127.0,mod(packedOpacity,2.0));}vec4 decode_color(const vec2 encodedColor) {return vec4(unpack_float(encodedColor[0])/255.0,unpack_float(encodedColor[1])/255.0\n);}float unpack_mix_vec2(const vec2 packedValue,const float t) {return mix(packedValue[0],packedValue[1],t);}vec4 unpack_mix_color(const vec4 packedColors,const float t) {vec4 minColor=decode_color(vec2(packedColors[0],packedColors[1]));vec4 maxColor=decode_color(vec2(packedColors[2],packedColors[3]));return mix(minColor,maxColor,t);}vec2 get_pattern_pos(const vec2 pixel_coord_upper,const vec2 pixel_coord_lower,const vec2 pattern_size,const float tile_units_to_pixels,const vec2 pos) {vec2 offset=mod(mod(mod(pixel_coord_upper,pattern_size)*256.0,pattern_size)*256.0+pixel_coord_lower,pattern_size);return (tile_units_to_pixels*pos+offset)/pattern_size;}";

var backgroundFrag = "uniform vec4 u_color;uniform float u_opacity;void main() {gl_FragColor=u_color*u_opacity;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var backgroundVert = "attribute vec2 a_pos;uniform mat4 u_matrix;void main() {gl_Position=u_matrix*vec4(a_pos,0,1);}";

var backgroundPatternFrag = "uniform vec2 u_pattern_tl_a;uniform vec2 u_pattern_br_a;uniform vec2 u_pattern_tl_b;uniform vec2 u_pattern_br_b;uniform vec2 u_texsize;uniform float u_mix;uniform float u_opacity;uniform sampler2D u_image;varying vec2 v_pos_a;varying vec2 v_pos_b;void main() {vec2 imagecoord=mod(v_pos_a,1.0);vec2 pos=mix(u_pattern_tl_a/u_texsize,u_pattern_br_a/u_texsize,imagecoord);vec4 color1=texture2D(u_image,pos);vec2 imagecoord_b=mod(v_pos_b,1.0);vec2 pos2=mix(u_pattern_tl_b/u_texsize,u_pattern_br_b/u_texsize,imagecoord_b);vec4 color2=texture2D(u_image,pos2);gl_FragColor=mix(color1,color2,u_mix)*u_opacity;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var backgroundPatternVert = "uniform mat4 u_matrix;uniform vec2 u_pattern_size_a;uniform vec2 u_pattern_size_b;uniform vec2 u_pixel_coord_upper;uniform vec2 u_pixel_coord_lower;uniform float u_scale_a;uniform float u_scale_b;uniform float u_tile_units_to_pixels;attribute vec2 a_pos;varying vec2 v_pos_a;varying vec2 v_pos_b;void main() {gl_Position=u_matrix*vec4(a_pos,0,1);v_pos_a=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,u_scale_a*u_pattern_size_a,u_tile_units_to_pixels,a_pos);v_pos_b=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,u_scale_b*u_pattern_size_b,u_tile_units_to_pixels,a_pos);}";

var circleFrag = "varying vec3 v_data;\n#pragma mapbox: define highp vec4 color\n#pragma mapbox: define mediump float radius\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define highp vec4 stroke_color\n#pragma mapbox: define mediump float stroke_width\n#pragma mapbox: define lowp float stroke_opacity\nvoid main() {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize mediump float radius\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize highp vec4 stroke_color\n#pragma mapbox: initialize mediump float stroke_width\n#pragma mapbox: initialize lowp float stroke_opacity\nvec2 extrude=v_data.xy;float extrude_length=length(extrude);lowp float antialiasblur=v_data.z;float antialiased_blur=-max(blur,antialiasblur);float opacity_t=smoothstep(0.0,antialiased_blur,extrude_length-1.0);float color_t=stroke_width < 0.01 ? 0.0 : smoothstep(antialiased_blur,0.0,extrude_length-radius/(radius+stroke_width));gl_FragColor=opacity_t*mix(color*opacity,stroke_color*stroke_opacity,color_t);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var circleVert = "uniform mat4 u_matrix;uniform bool u_scale_with_map;uniform bool u_pitch_with_map;uniform vec2 u_extrude_scale;uniform lowp float u_device_pixel_ratio;uniform highp float u_camera_to_center_distance;attribute vec2 a_pos;varying vec3 v_data;\n#pragma mapbox: define highp vec4 color\n#pragma mapbox: define mediump float radius\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define highp vec4 stroke_color\n#pragma mapbox: define mediump float stroke_width\n#pragma mapbox: define lowp float stroke_opacity\nvoid main(void) {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize mediump float radius\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize highp vec4 stroke_color\n#pragma mapbox: initialize mediump float stroke_width\n#pragma mapbox: initialize lowp float stroke_opacity\nvec2 extrude=vec2(mod(a_pos,2.0)*2.0-1.0);vec2 circle_center=floor(a_pos*0.5);if (u_pitch_with_map) {vec2 corner_position=circle_center;if (u_scale_with_map) {corner_position+=extrude*(radius+stroke_width)*u_extrude_scale;} else {vec4 projected_center=u_matrix*vec4(circle_center,0,1);corner_position+=extrude*(radius+stroke_width)*u_extrude_scale*(projected_center.w/u_camera_to_center_distance);}gl_Position=u_matrix*vec4(corner_position,0,1);} else {gl_Position=u_matrix*vec4(circle_center,0,1);if (u_scale_with_map) {gl_Position.xy+=extrude*(radius+stroke_width)*u_extrude_scale*u_camera_to_center_distance;} else {gl_Position.xy+=extrude*(radius+stroke_width)*u_extrude_scale*gl_Position.w;}}lowp float antialiasblur=1.0/u_device_pixel_ratio/(radius+stroke_width);v_data=vec3(extrude.x,extrude.y,antialiasblur);}";

var clippingMaskFrag = "void main() {gl_FragColor=vec4(1.0);}";

var clippingMaskVert = "attribute vec2 a_pos;uniform mat4 u_matrix;void main() {gl_Position=u_matrix*vec4(a_pos,0,1);}";

var heatmapFrag = "uniform highp float u_intensity;varying vec2 v_extrude;\n#pragma mapbox: define highp float weight\n#define GAUSS_COEF 0.3989422804014327\nvoid main() {\n#pragma mapbox: initialize highp float weight\nfloat d=-0.5*3.0*3.0*dot(v_extrude,v_extrude);float val=weight*u_intensity*GAUSS_COEF*exp(d);gl_FragColor=vec4(val,1.0,1.0,1.0);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var heatmapVert = "uniform mat4 u_matrix;uniform float u_extrude_scale;uniform float u_opacity;uniform float u_intensity;attribute vec2 a_pos;varying vec2 v_extrude;\n#pragma mapbox: define highp float weight\n#pragma mapbox: define mediump float radius\nconst highp float ZERO=1.0/255.0/16.0;\n#define GAUSS_COEF 0.3989422804014327\nvoid main(void) {\n#pragma mapbox: initialize highp float weight\n#pragma mapbox: initialize mediump float radius\nvec2 unscaled_extrude=vec2(mod(a_pos,2.0)*2.0-1.0);float S=sqrt(-2.0*log(ZERO/weight/u_intensity/GAUSS_COEF))/3.0;v_extrude=S*unscaled_extrude;vec2 extrude=v_extrude*radius*u_extrude_scale;vec4 pos=vec4(floor(a_pos*0.5)+extrude,0,1);gl_Position=u_matrix*pos;}";

var heatmapTextureFrag = "uniform sampler2D u_image;uniform sampler2D u_color_ramp;uniform float u_opacity;varying vec2 v_pos;void main() {float t=texture2D(u_image,v_pos).r;vec4 color=texture2D(u_color_ramp,vec2(t,0.5));gl_FragColor=color*u_opacity;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(0.0);\n#endif\n}";

var heatmapTextureVert = "uniform mat4 u_matrix;uniform vec2 u_world;attribute vec2 a_pos;varying vec2 v_pos;void main() {gl_Position=u_matrix*vec4(a_pos*u_world,0,1);v_pos.x=a_pos.x;v_pos.y=1.0-a_pos.y;}";

var collisionBoxFrag = "varying float v_placed;varying float v_notUsed;void main() {float alpha=0.5;gl_FragColor=vec4(1.0,0.0,0.0,1.0)*alpha;if (v_placed > 0.5) {gl_FragColor=vec4(0.0,0.0,1.0,0.5)*alpha;}if (v_notUsed > 0.5) {gl_FragColor*=.1;}}";

var collisionBoxVert = "attribute vec2 a_pos;attribute vec2 a_anchor_pos;attribute vec2 a_extrude;attribute vec2 a_placed;attribute vec2 a_shift;uniform mat4 u_matrix;uniform vec2 u_extrude_scale;uniform float u_camera_to_center_distance;varying float v_placed;varying float v_notUsed;void main() {vec4 projectedPoint=u_matrix*vec4(a_anchor_pos,0,1);highp float camera_to_anchor_distance=projectedPoint.w;highp float collision_perspective_ratio=clamp(0.5+0.5*(u_camera_to_center_distance/camera_to_anchor_distance),0.0,4.0);gl_Position=u_matrix*vec4(a_pos,0.0,1.0);gl_Position.xy+=(a_extrude+a_shift)*u_extrude_scale*gl_Position.w*collision_perspective_ratio;v_placed=a_placed.x;v_notUsed=a_placed.y;}";

var collisionCircleFrag = "varying float v_radius;varying vec2 v_extrude;varying float v_perspective_ratio;varying float v_collision;void main() {float alpha=0.5*min(v_perspective_ratio,1.0);float stroke_radius=0.9*max(v_perspective_ratio,1.0);float distance_to_center=length(v_extrude);float distance_to_edge=abs(distance_to_center-v_radius);float opacity_t=smoothstep(-stroke_radius,0.0,-distance_to_edge);vec4 color=mix(vec4(0.0,0.0,1.0,0.5),vec4(1.0,0.0,0.0,1.0),v_collision);gl_FragColor=color*alpha*opacity_t;}";

var collisionCircleVert = "attribute vec2 a_pos;attribute float a_radius;attribute vec2 a_flags;uniform mat4 u_matrix;uniform mat4 u_inv_matrix;uniform vec2 u_viewport_size;uniform float u_camera_to_center_distance;varying float v_radius;varying vec2 v_extrude;varying float v_perspective_ratio;varying float v_collision;vec3 toTilePosition(vec2 screenPos) {vec4 rayStart=u_inv_matrix*vec4(screenPos,-1.0,1.0);vec4 rayEnd  =u_inv_matrix*vec4(screenPos, 1.0,1.0);rayStart.xyz/=rayStart.w;rayEnd.xyz  /=rayEnd.w;highp float t=(0.0-rayStart.z)/(rayEnd.z-rayStart.z);return mix(rayStart.xyz,rayEnd.xyz,t);}void main() {vec2 quadCenterPos=a_pos;float radius=a_radius;float collision=a_flags.x;float vertexIdx=a_flags.y;vec2 quadVertexOffset=vec2(mix(-1.0,1.0,float(vertexIdx >=2.0)),mix(-1.0,1.0,float(vertexIdx >=1.0 && vertexIdx <=2.0)));vec2 quadVertexExtent=quadVertexOffset*radius;vec3 tilePos=toTilePosition(quadCenterPos);vec4 clipPos=u_matrix*vec4(tilePos,1.0);highp float camera_to_anchor_distance=clipPos.w;highp float collision_perspective_ratio=clamp(0.5+0.5*(u_camera_to_center_distance/camera_to_anchor_distance),0.0,4.0);float padding_factor=1.2;v_radius=radius;v_extrude=quadVertexExtent*padding_factor;v_perspective_ratio=collision_perspective_ratio;v_collision=collision;gl_Position=vec4(clipPos.xyz/clipPos.w,1.0)+vec4(quadVertexExtent*padding_factor/u_viewport_size*2.0,0.0,0.0);}";

var debugFrag = "uniform highp vec4 u_color;uniform sampler2D u_overlay;varying vec2 v_uv;void main() {vec4 overlay_color=texture2D(u_overlay,v_uv);gl_FragColor=mix(u_color,overlay_color,overlay_color.a);}";

var debugVert = "attribute vec2 a_pos;varying vec2 v_uv;uniform mat4 u_matrix;uniform float u_overlay_scale;void main() {v_uv=a_pos/8192.0;gl_Position=u_matrix*vec4(a_pos*u_overlay_scale,0,1);}";

var fillFrag = "#pragma mapbox: define highp vec4 color\n#pragma mapbox: define lowp float opacity\nvoid main() {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize lowp float opacity\ngl_FragColor=color*opacity;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var fillVert = "attribute vec2 a_pos;uniform mat4 u_matrix;\n#pragma mapbox: define highp vec4 color\n#pragma mapbox: define lowp float opacity\nvoid main() {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize lowp float opacity\ngl_Position=u_matrix*vec4(a_pos,0,1);}";

var fillOutlineFrag = "varying vec2 v_pos;\n#pragma mapbox: define highp vec4 outline_color\n#pragma mapbox: define lowp float opacity\nvoid main() {\n#pragma mapbox: initialize highp vec4 outline_color\n#pragma mapbox: initialize lowp float opacity\nfloat dist=length(v_pos-gl_FragCoord.xy);float alpha=1.0-smoothstep(0.0,1.0,dist);gl_FragColor=outline_color*(alpha*opacity);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var fillOutlineVert = "attribute vec2 a_pos;uniform mat4 u_matrix;uniform vec2 u_world;varying vec2 v_pos;\n#pragma mapbox: define highp vec4 outline_color\n#pragma mapbox: define lowp float opacity\nvoid main() {\n#pragma mapbox: initialize highp vec4 outline_color\n#pragma mapbox: initialize lowp float opacity\ngl_Position=u_matrix*vec4(a_pos,0,1);v_pos=(gl_Position.xy/gl_Position.w+1.0)/2.0*u_world;}";

var fillOutlinePatternFrag = "uniform vec2 u_texsize;uniform sampler2D u_image;uniform float u_fade;varying vec2 v_pos_a;varying vec2 v_pos_b;varying vec2 v_pos;\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\nvoid main() {\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\nvec2 pattern_tl_a=pattern_from.xy;vec2 pattern_br_a=pattern_from.zw;vec2 pattern_tl_b=pattern_to.xy;vec2 pattern_br_b=pattern_to.zw;vec2 imagecoord=mod(v_pos_a,1.0);vec2 pos=mix(pattern_tl_a/u_texsize,pattern_br_a/u_texsize,imagecoord);vec4 color1=texture2D(u_image,pos);vec2 imagecoord_b=mod(v_pos_b,1.0);vec2 pos2=mix(pattern_tl_b/u_texsize,pattern_br_b/u_texsize,imagecoord_b);vec4 color2=texture2D(u_image,pos2);float dist=length(v_pos-gl_FragCoord.xy);float alpha=1.0-smoothstep(0.0,1.0,dist);gl_FragColor=mix(color1,color2,u_fade)*alpha*opacity;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var fillOutlinePatternVert = "uniform mat4 u_matrix;uniform vec2 u_world;uniform vec2 u_pixel_coord_upper;uniform vec2 u_pixel_coord_lower;uniform vec3 u_scale;attribute vec2 a_pos;varying vec2 v_pos_a;varying vec2 v_pos_b;varying vec2 v_pos;\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\n#pragma mapbox: define lowp float pixel_ratio_from\n#pragma mapbox: define lowp float pixel_ratio_to\nvoid main() {\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\n#pragma mapbox: initialize lowp float pixel_ratio_from\n#pragma mapbox: initialize lowp float pixel_ratio_to\nvec2 pattern_tl_a=pattern_from.xy;vec2 pattern_br_a=pattern_from.zw;vec2 pattern_tl_b=pattern_to.xy;vec2 pattern_br_b=pattern_to.zw;float tileRatio=u_scale.x;float fromScale=u_scale.y;float toScale=u_scale.z;gl_Position=u_matrix*vec4(a_pos,0,1);vec2 display_size_a=(pattern_br_a-pattern_tl_a)/pixel_ratio_from;vec2 display_size_b=(pattern_br_b-pattern_tl_b)/pixel_ratio_to;v_pos_a=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,fromScale*display_size_a,tileRatio,a_pos);v_pos_b=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,toScale*display_size_b,tileRatio,a_pos);v_pos=(gl_Position.xy/gl_Position.w+1.0)/2.0*u_world;}";

var fillPatternFrag = "uniform vec2 u_texsize;uniform float u_fade;uniform sampler2D u_image;varying vec2 v_pos_a;varying vec2 v_pos_b;\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\nvoid main() {\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\nvec2 pattern_tl_a=pattern_from.xy;vec2 pattern_br_a=pattern_from.zw;vec2 pattern_tl_b=pattern_to.xy;vec2 pattern_br_b=pattern_to.zw;vec2 imagecoord=mod(v_pos_a,1.0);vec2 pos=mix(pattern_tl_a/u_texsize,pattern_br_a/u_texsize,imagecoord);vec4 color1=texture2D(u_image,pos);vec2 imagecoord_b=mod(v_pos_b,1.0);vec2 pos2=mix(pattern_tl_b/u_texsize,pattern_br_b/u_texsize,imagecoord_b);vec4 color2=texture2D(u_image,pos2);gl_FragColor=mix(color1,color2,u_fade)*opacity;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var fillPatternVert = "uniform mat4 u_matrix;uniform vec2 u_pixel_coord_upper;uniform vec2 u_pixel_coord_lower;uniform vec3 u_scale;attribute vec2 a_pos;varying vec2 v_pos_a;varying vec2 v_pos_b;\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\n#pragma mapbox: define lowp float pixel_ratio_from\n#pragma mapbox: define lowp float pixel_ratio_to\nvoid main() {\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\n#pragma mapbox: initialize lowp float pixel_ratio_from\n#pragma mapbox: initialize lowp float pixel_ratio_to\nvec2 pattern_tl_a=pattern_from.xy;vec2 pattern_br_a=pattern_from.zw;vec2 pattern_tl_b=pattern_to.xy;vec2 pattern_br_b=pattern_to.zw;float tileZoomRatio=u_scale.x;float fromScale=u_scale.y;float toScale=u_scale.z;vec2 display_size_a=(pattern_br_a-pattern_tl_a)/pixel_ratio_from;vec2 display_size_b=(pattern_br_b-pattern_tl_b)/pixel_ratio_to;gl_Position=u_matrix*vec4(a_pos,0,1);v_pos_a=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,fromScale*display_size_a,tileZoomRatio,a_pos);v_pos_b=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,toScale*display_size_b,tileZoomRatio,a_pos);}";

var fillExtrusionFrag = "varying vec4 v_color;void main() {gl_FragColor=v_color;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var fillExtrusionVert = "uniform mat4 u_matrix;uniform vec3 u_lightcolor;uniform lowp vec3 u_lightpos;uniform lowp float u_lightintensity;uniform float u_vertical_gradient;uniform lowp float u_opacity;attribute vec2 a_pos;attribute vec4 a_normal_ed;varying vec4 v_color;\n#pragma mapbox: define highp float base\n#pragma mapbox: define highp float height\n#pragma mapbox: define highp vec4 color\nvoid main() {\n#pragma mapbox: initialize highp float base\n#pragma mapbox: initialize highp float height\n#pragma mapbox: initialize highp vec4 color\nvec3 normal=a_normal_ed.xyz;base=max(0.0,base);height=max(0.0,height);float t=mod(normal.x,2.0);gl_Position=u_matrix*vec4(a_pos,t > 0.0 ? height : base,1);float colorvalue=color.r*0.2126+color.g*0.7152+color.b*0.0722;v_color=vec4(0.0,0.0,0.0,1.0);vec4 ambientlight=vec4(0.03,0.03,0.03,1.0);color+=ambientlight;float directional=clamp(dot(normal/16384.0,u_lightpos),0.0,1.0);directional=mix((1.0-u_lightintensity),max((1.0-colorvalue+u_lightintensity),1.0),directional);if (normal.y !=0.0) {directional*=((1.0-u_vertical_gradient)+(u_vertical_gradient*clamp((t+base)*pow(height/150.0,0.5),mix(0.7,0.98,1.0-u_lightintensity),1.0)));}v_color.r+=clamp(color.r*directional*u_lightcolor.r,mix(0.0,0.3,1.0-u_lightcolor.r),1.0);v_color.g+=clamp(color.g*directional*u_lightcolor.g,mix(0.0,0.3,1.0-u_lightcolor.g),1.0);v_color.b+=clamp(color.b*directional*u_lightcolor.b,mix(0.0,0.3,1.0-u_lightcolor.b),1.0);v_color*=u_opacity;}";

var fillExtrusionPatternFrag = "uniform vec2 u_texsize;uniform float u_fade;uniform sampler2D u_image;varying vec2 v_pos_a;varying vec2 v_pos_b;varying vec4 v_lighting;\n#pragma mapbox: define lowp float base\n#pragma mapbox: define lowp float height\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\n#pragma mapbox: define lowp float pixel_ratio_from\n#pragma mapbox: define lowp float pixel_ratio_to\nvoid main() {\n#pragma mapbox: initialize lowp float base\n#pragma mapbox: initialize lowp float height\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\n#pragma mapbox: initialize lowp float pixel_ratio_from\n#pragma mapbox: initialize lowp float pixel_ratio_to\nvec2 pattern_tl_a=pattern_from.xy;vec2 pattern_br_a=pattern_from.zw;vec2 pattern_tl_b=pattern_to.xy;vec2 pattern_br_b=pattern_to.zw;vec2 imagecoord=mod(v_pos_a,1.0);vec2 pos=mix(pattern_tl_a/u_texsize,pattern_br_a/u_texsize,imagecoord);vec4 color1=texture2D(u_image,pos);vec2 imagecoord_b=mod(v_pos_b,1.0);vec2 pos2=mix(pattern_tl_b/u_texsize,pattern_br_b/u_texsize,imagecoord_b);vec4 color2=texture2D(u_image,pos2);vec4 mixedColor=mix(color1,color2,u_fade);gl_FragColor=mixedColor*v_lighting;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var fillExtrusionPatternVert = "uniform mat4 u_matrix;uniform vec2 u_pixel_coord_upper;uniform vec2 u_pixel_coord_lower;uniform float u_height_factor;uniform vec3 u_scale;uniform float u_vertical_gradient;uniform lowp float u_opacity;uniform vec3 u_lightcolor;uniform lowp vec3 u_lightpos;uniform lowp float u_lightintensity;attribute vec2 a_pos;attribute vec4 a_normal_ed;varying vec2 v_pos_a;varying vec2 v_pos_b;varying vec4 v_lighting;\n#pragma mapbox: define lowp float base\n#pragma mapbox: define lowp float height\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\n#pragma mapbox: define lowp float pixel_ratio_from\n#pragma mapbox: define lowp float pixel_ratio_to\nvoid main() {\n#pragma mapbox: initialize lowp float base\n#pragma mapbox: initialize lowp float height\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\n#pragma mapbox: initialize lowp float pixel_ratio_from\n#pragma mapbox: initialize lowp float pixel_ratio_to\nvec2 pattern_tl_a=pattern_from.xy;vec2 pattern_br_a=pattern_from.zw;vec2 pattern_tl_b=pattern_to.xy;vec2 pattern_br_b=pattern_to.zw;float tileRatio=u_scale.x;float fromScale=u_scale.y;float toScale=u_scale.z;vec3 normal=a_normal_ed.xyz;float edgedistance=a_normal_ed.w;vec2 display_size_a=(pattern_br_a-pattern_tl_a)/pixel_ratio_from;vec2 display_size_b=(pattern_br_b-pattern_tl_b)/pixel_ratio_to;base=max(0.0,base);height=max(0.0,height);float t=mod(normal.x,2.0);float z=t > 0.0 ? height : base;gl_Position=u_matrix*vec4(a_pos,z,1);vec2 pos=normal.x==1.0 && normal.y==0.0 && normal.z==16384.0\n? a_pos\n: vec2(edgedistance,z*u_height_factor);v_pos_a=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,fromScale*display_size_a,tileRatio,pos);v_pos_b=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,toScale*display_size_b,tileRatio,pos);v_lighting=vec4(0.0,0.0,0.0,1.0);float directional=clamp(dot(normal/16383.0,u_lightpos),0.0,1.0);directional=mix((1.0-u_lightintensity),max((0.5+u_lightintensity),1.0),directional);if (normal.y !=0.0) {directional*=((1.0-u_vertical_gradient)+(u_vertical_gradient*clamp((t+base)*pow(height/150.0,0.5),mix(0.7,0.98,1.0-u_lightintensity),1.0)));}v_lighting.rgb+=clamp(directional*u_lightcolor,mix(vec3(0.0),vec3(0.3),1.0-u_lightcolor),vec3(1.0));v_lighting*=u_opacity;}";

var hillshadePrepareFrag = "#ifdef GL_ES\nprecision highp float;\n#endif\nuniform sampler2D u_image;varying vec2 v_pos;uniform vec2 u_dimension;uniform float u_zoom;uniform vec4 u_unpack;float getElevation(vec2 coord,float bias) {vec4 data=texture2D(u_image,coord)*255.0;data.a=-1.0;return dot(data,u_unpack)/4.0;}void main() {vec2 epsilon=1.0/u_dimension;float a=getElevation(v_pos+vec2(-epsilon.x,-epsilon.y),0.0);float b=getElevation(v_pos+vec2(0,-epsilon.y),0.0);float c=getElevation(v_pos+vec2(epsilon.x,-epsilon.y),0.0);float d=getElevation(v_pos+vec2(-epsilon.x,0),0.0);float e=getElevation(v_pos,0.0);float f=getElevation(v_pos+vec2(epsilon.x,0),0.0);float g=getElevation(v_pos+vec2(-epsilon.x,epsilon.y),0.0);float h=getElevation(v_pos+vec2(0,epsilon.y),0.0);float i=getElevation(v_pos+vec2(epsilon.x,epsilon.y),0.0);float exaggerationFactor=u_zoom < 2.0 ? 0.4 : u_zoom < 4.5 ? 0.35 : 0.3;float exaggeration=u_zoom < 15.0 ? (u_zoom-15.0)*exaggerationFactor : 0.0;vec2 deriv=vec2((c+f+f+i)-(a+d+d+g),(g+h+h+i)-(a+b+b+c))/pow(2.0,exaggeration+(19.2562-u_zoom));gl_FragColor=clamp(vec4(deriv.x/2.0+0.5,deriv.y/2.0+0.5,1.0,1.0),0.0,1.0);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var hillshadePrepareVert = "uniform mat4 u_matrix;uniform vec2 u_dimension;attribute vec2 a_pos;attribute vec2 a_texture_pos;varying vec2 v_pos;void main() {gl_Position=u_matrix*vec4(a_pos,0,1);highp vec2 epsilon=1.0/u_dimension;float scale=(u_dimension.x-2.0)/u_dimension.x;v_pos=(a_texture_pos/8192.0)*scale+epsilon;}";

var hillshadeFrag = "uniform sampler2D u_image;varying vec2 v_pos;uniform vec2 u_latrange;uniform vec2 u_light;uniform vec4 u_shadow;uniform vec4 u_highlight;uniform vec4 u_accent;\n#define PI 3.141592653589793\nvoid main() {vec4 pixel=texture2D(u_image,v_pos);vec2 deriv=((pixel.rg*2.0)-1.0);float scaleFactor=cos(radians((u_latrange[0]-u_latrange[1])*(1.0-v_pos.y)+u_latrange[1]));float slope=atan(1.25*length(deriv)/scaleFactor);float aspect=deriv.x !=0.0 ? atan(deriv.y,-deriv.x) : PI/2.0*(deriv.y > 0.0 ? 1.0 :-1.0);float intensity=u_light.x;float azimuth=u_light.y+PI;float base=1.875-intensity*1.75;float maxValue=0.5*PI;float scaledSlope=intensity !=0.5 ? ((pow(base,slope)-1.0)/(pow(base,maxValue)-1.0))*maxValue : slope;float accent=cos(scaledSlope);vec4 accent_color=(1.0-accent)*u_accent*clamp(intensity*2.0,0.0,1.0);float shade=abs(mod((aspect+azimuth)/PI+0.5,2.0)-1.0);vec4 shade_color=mix(u_shadow,u_highlight,shade)*sin(scaledSlope)*clamp(intensity*2.0,0.0,1.0);gl_FragColor=accent_color*(1.0-shade_color.a)+shade_color;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var hillshadeVert = "uniform mat4 u_matrix;attribute vec2 a_pos;attribute vec2 a_texture_pos;varying vec2 v_pos;void main() {gl_Position=u_matrix*vec4(a_pos,0,1);v_pos=a_texture_pos/8192.0;}";

var lineFrag = "uniform lowp float u_device_pixel_ratio;varying vec2 v_width2;varying vec2 v_normal;varying float v_gamma_scale;\n#pragma mapbox: define highp vec4 color\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\nvoid main() {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\nfloat dist=length(v_normal)*v_width2.s;float blur2=(blur+1.0/u_device_pixel_ratio)*v_gamma_scale;float alpha=clamp(min(dist-(v_width2.t-blur2),v_width2.s-dist)/blur2,0.0,1.0);gl_FragColor=color*(alpha*opacity);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var lineVert = "\n#define scale 0.015873016\nattribute vec2 a_pos_normal;attribute vec4 a_data;uniform mat4 u_matrix;uniform mediump float u_ratio;uniform vec2 u_units_to_pixels;uniform lowp float u_device_pixel_ratio;varying vec2 v_normal;varying vec2 v_width2;varying float v_gamma_scale;varying highp float v_linesofar;\n#pragma mapbox: define highp vec4 color\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define mediump float gapwidth\n#pragma mapbox: define lowp float offset\n#pragma mapbox: define mediump float width\nvoid main() {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump float gapwidth\n#pragma mapbox: initialize lowp float offset\n#pragma mapbox: initialize mediump float width\nfloat ANTIALIASING=1.0/u_device_pixel_ratio/2.0;vec2 a_extrude=a_data.xy-128.0;float a_direction=mod(a_data.z,4.0)-1.0;v_linesofar=(floor(a_data.z/4.0)+a_data.w*64.0)*2.0;vec2 pos=floor(a_pos_normal*0.5);mediump vec2 normal=a_pos_normal-2.0*pos;normal.y=normal.y*2.0-1.0;v_normal=normal;gapwidth=gapwidth/2.0;float halfwidth=width/2.0;offset=-1.0*offset;float inset=gapwidth+(gapwidth > 0.0 ? ANTIALIASING : 0.0);float outset=gapwidth+halfwidth*(gapwidth > 0.0 ? 2.0 : 1.0)+(halfwidth==0.0 ? 0.0 : ANTIALIASING);mediump vec2 dist=outset*a_extrude*scale;mediump float u=0.5*a_direction;mediump float t=1.0-abs(u);mediump vec2 offset2=offset*a_extrude*scale*normal.y*mat2(t,-u,u,t);vec4 projected_extrude=u_matrix*vec4(dist/u_ratio,0.0,0.0);gl_Position=u_matrix*vec4(pos+offset2/u_ratio,0.0,1.0)+projected_extrude;float extrude_length_without_perspective=length(dist);float extrude_length_with_perspective=length(projected_extrude.xy/gl_Position.w*u_units_to_pixels);v_gamma_scale=extrude_length_without_perspective/extrude_length_with_perspective;v_width2=vec2(outset,inset);}";

var lineGradientFrag = "uniform lowp float u_device_pixel_ratio;uniform sampler2D u_image;varying vec2 v_width2;varying vec2 v_normal;varying float v_gamma_scale;varying highp vec2 v_uv;\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\nvoid main() {\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\nfloat dist=length(v_normal)*v_width2.s;float blur2=(blur+1.0/u_device_pixel_ratio)*v_gamma_scale;float alpha=clamp(min(dist-(v_width2.t-blur2),v_width2.s-dist)/blur2,0.0,1.0);vec4 color=texture2D(u_image,v_uv);gl_FragColor=color*(alpha*opacity);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var lineGradientVert = "\n#define scale 0.015873016\nattribute vec2 a_pos_normal;attribute vec4 a_data;attribute float a_uv_x;attribute float a_split_index;uniform mat4 u_matrix;uniform mediump float u_ratio;uniform lowp float u_device_pixel_ratio;uniform vec2 u_units_to_pixels;uniform float u_image_height;varying vec2 v_normal;varying vec2 v_width2;varying float v_gamma_scale;varying highp vec2 v_uv;\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define mediump float gapwidth\n#pragma mapbox: define lowp float offset\n#pragma mapbox: define mediump float width\nvoid main() {\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump float gapwidth\n#pragma mapbox: initialize lowp float offset\n#pragma mapbox: initialize mediump float width\nfloat ANTIALIASING=1.0/u_device_pixel_ratio/2.0;vec2 a_extrude=a_data.xy-128.0;float a_direction=mod(a_data.z,4.0)-1.0;highp float texel_height=1.0/u_image_height;highp float half_texel_height=0.5*texel_height;v_uv=vec2(a_uv_x,a_split_index*texel_height-half_texel_height);vec2 pos=floor(a_pos_normal*0.5);mediump vec2 normal=a_pos_normal-2.0*pos;normal.y=normal.y*2.0-1.0;v_normal=normal;gapwidth=gapwidth/2.0;float halfwidth=width/2.0;offset=-1.0*offset;float inset=gapwidth+(gapwidth > 0.0 ? ANTIALIASING : 0.0);float outset=gapwidth+halfwidth*(gapwidth > 0.0 ? 2.0 : 1.0)+(halfwidth==0.0 ? 0.0 : ANTIALIASING);mediump vec2 dist=outset*a_extrude*scale;mediump float u=0.5*a_direction;mediump float t=1.0-abs(u);mediump vec2 offset2=offset*a_extrude*scale*normal.y*mat2(t,-u,u,t);vec4 projected_extrude=u_matrix*vec4(dist/u_ratio,0.0,0.0);gl_Position=u_matrix*vec4(pos+offset2/u_ratio,0.0,1.0)+projected_extrude;float extrude_length_without_perspective=length(dist);float extrude_length_with_perspective=length(projected_extrude.xy/gl_Position.w*u_units_to_pixels);v_gamma_scale=extrude_length_without_perspective/extrude_length_with_perspective;v_width2=vec2(outset,inset);}";

var linePatternFrag = "uniform lowp float u_device_pixel_ratio;uniform vec2 u_texsize;uniform float u_fade;uniform mediump vec3 u_scale;uniform sampler2D u_image;varying vec2 v_normal;varying vec2 v_width2;varying float v_linesofar;varying float v_gamma_scale;varying float v_width;\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\n#pragma mapbox: define lowp float pixel_ratio_from\n#pragma mapbox: define lowp float pixel_ratio_to\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\nvoid main() {\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\n#pragma mapbox: initialize lowp float pixel_ratio_from\n#pragma mapbox: initialize lowp float pixel_ratio_to\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\nvec2 pattern_tl_a=pattern_from.xy;vec2 pattern_br_a=pattern_from.zw;vec2 pattern_tl_b=pattern_to.xy;vec2 pattern_br_b=pattern_to.zw;float tileZoomRatio=u_scale.x;float fromScale=u_scale.y;float toScale=u_scale.z;vec2 display_size_a=(pattern_br_a-pattern_tl_a)/pixel_ratio_from;vec2 display_size_b=(pattern_br_b-pattern_tl_b)/pixel_ratio_to;vec2 pattern_size_a=vec2(display_size_a.x*fromScale/tileZoomRatio,display_size_a.y);vec2 pattern_size_b=vec2(display_size_b.x*toScale/tileZoomRatio,display_size_b.y);float aspect_a=display_size_a.y/v_width;float aspect_b=display_size_b.y/v_width;float dist=length(v_normal)*v_width2.s;float blur2=(blur+1.0/u_device_pixel_ratio)*v_gamma_scale;float alpha=clamp(min(dist-(v_width2.t-blur2),v_width2.s-dist)/blur2,0.0,1.0);float x_a=mod(v_linesofar/pattern_size_a.x*aspect_a,1.0);float x_b=mod(v_linesofar/pattern_size_b.x*aspect_b,1.0);float y=0.5*v_normal.y+0.5;vec2 texel_size=1.0/u_texsize;vec2 pos_a=mix(pattern_tl_a*texel_size-texel_size,pattern_br_a*texel_size+texel_size,vec2(x_a,y));vec2 pos_b=mix(pattern_tl_b*texel_size-texel_size,pattern_br_b*texel_size+texel_size,vec2(x_b,y));vec4 color=mix(texture2D(u_image,pos_a),texture2D(u_image,pos_b),u_fade);gl_FragColor=color*alpha*opacity;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var linePatternVert = "\n#define scale 0.015873016\n#define LINE_DISTANCE_SCALE 2.0\nattribute vec2 a_pos_normal;attribute vec4 a_data;uniform mat4 u_matrix;uniform vec2 u_units_to_pixels;uniform mediump float u_ratio;uniform lowp float u_device_pixel_ratio;varying vec2 v_normal;varying vec2 v_width2;varying float v_linesofar;varying float v_gamma_scale;varying float v_width;\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp float offset\n#pragma mapbox: define mediump float gapwidth\n#pragma mapbox: define mediump float width\n#pragma mapbox: define lowp float floorwidth\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\n#pragma mapbox: define lowp float pixel_ratio_from\n#pragma mapbox: define lowp float pixel_ratio_to\nvoid main() {\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize lowp float offset\n#pragma mapbox: initialize mediump float gapwidth\n#pragma mapbox: initialize mediump float width\n#pragma mapbox: initialize lowp float floorwidth\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\n#pragma mapbox: initialize lowp float pixel_ratio_from\n#pragma mapbox: initialize lowp float pixel_ratio_to\nfloat ANTIALIASING=1.0/u_device_pixel_ratio/2.0;vec2 a_extrude=a_data.xy-128.0;float a_direction=mod(a_data.z,4.0)-1.0;float a_linesofar=(floor(a_data.z/4.0)+a_data.w*64.0)*LINE_DISTANCE_SCALE;vec2 pos=floor(a_pos_normal*0.5);mediump vec2 normal=a_pos_normal-2.0*pos;normal.y=normal.y*2.0-1.0;v_normal=normal;gapwidth=gapwidth/2.0;float halfwidth=width/2.0;offset=-1.0*offset;float inset=gapwidth+(gapwidth > 0.0 ? ANTIALIASING : 0.0);float outset=gapwidth+halfwidth*(gapwidth > 0.0 ? 2.0 : 1.0)+(halfwidth==0.0 ? 0.0 : ANTIALIASING);mediump vec2 dist=outset*a_extrude*scale;mediump float u=0.5*a_direction;mediump float t=1.0-abs(u);mediump vec2 offset2=offset*a_extrude*scale*normal.y*mat2(t,-u,u,t);vec4 projected_extrude=u_matrix*vec4(dist/u_ratio,0.0,0.0);gl_Position=u_matrix*vec4(pos+offset2/u_ratio,0.0,1.0)+projected_extrude;float extrude_length_without_perspective=length(dist);float extrude_length_with_perspective=length(projected_extrude.xy/gl_Position.w*u_units_to_pixels);v_gamma_scale=extrude_length_without_perspective/extrude_length_with_perspective;v_linesofar=a_linesofar;v_width2=vec2(outset,inset);v_width=floorwidth;}";

var lineSDFFrag = "uniform lowp float u_device_pixel_ratio;uniform sampler2D u_image;uniform float u_sdfgamma;uniform float u_mix;varying vec2 v_normal;varying vec2 v_width2;varying vec2 v_tex_a;varying vec2 v_tex_b;varying float v_gamma_scale;\n#pragma mapbox: define highp vec4 color\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define mediump float width\n#pragma mapbox: define lowp float floorwidth\nvoid main() {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump float width\n#pragma mapbox: initialize lowp float floorwidth\nfloat dist=length(v_normal)*v_width2.s;float blur2=(blur+1.0/u_device_pixel_ratio)*v_gamma_scale;float alpha=clamp(min(dist-(v_width2.t-blur2),v_width2.s-dist)/blur2,0.0,1.0);float sdfdist_a=texture2D(u_image,v_tex_a).a;float sdfdist_b=texture2D(u_image,v_tex_b).a;float sdfdist=mix(sdfdist_a,sdfdist_b,u_mix);alpha*=smoothstep(0.5-u_sdfgamma/floorwidth,0.5+u_sdfgamma/floorwidth,sdfdist);gl_FragColor=color*(alpha*opacity);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var lineSDFVert = "\n#define scale 0.015873016\n#define LINE_DISTANCE_SCALE 2.0\nattribute vec2 a_pos_normal;attribute vec4 a_data;uniform mat4 u_matrix;uniform mediump float u_ratio;uniform lowp float u_device_pixel_ratio;uniform vec2 u_patternscale_a;uniform float u_tex_y_a;uniform vec2 u_patternscale_b;uniform float u_tex_y_b;uniform vec2 u_units_to_pixels;varying vec2 v_normal;varying vec2 v_width2;varying vec2 v_tex_a;varying vec2 v_tex_b;varying float v_gamma_scale;\n#pragma mapbox: define highp vec4 color\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define mediump float gapwidth\n#pragma mapbox: define lowp float offset\n#pragma mapbox: define mediump float width\n#pragma mapbox: define lowp float floorwidth\nvoid main() {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump float gapwidth\n#pragma mapbox: initialize lowp float offset\n#pragma mapbox: initialize mediump float width\n#pragma mapbox: initialize lowp float floorwidth\nfloat ANTIALIASING=1.0/u_device_pixel_ratio/2.0;vec2 a_extrude=a_data.xy-128.0;float a_direction=mod(a_data.z,4.0)-1.0;float a_linesofar=(floor(a_data.z/4.0)+a_data.w*64.0)*LINE_DISTANCE_SCALE;vec2 pos=floor(a_pos_normal*0.5);mediump vec2 normal=a_pos_normal-2.0*pos;normal.y=normal.y*2.0-1.0;v_normal=normal;gapwidth=gapwidth/2.0;float halfwidth=width/2.0;offset=-1.0*offset;float inset=gapwidth+(gapwidth > 0.0 ? ANTIALIASING : 0.0);float outset=gapwidth+halfwidth*(gapwidth > 0.0 ? 2.0 : 1.0)+(halfwidth==0.0 ? 0.0 : ANTIALIASING);mediump vec2 dist=outset*a_extrude*scale;mediump float u=0.5*a_direction;mediump float t=1.0-abs(u);mediump vec2 offset2=offset*a_extrude*scale*normal.y*mat2(t,-u,u,t);vec4 projected_extrude=u_matrix*vec4(dist/u_ratio,0.0,0.0);gl_Position=u_matrix*vec4(pos+offset2/u_ratio,0.0,1.0)+projected_extrude;float extrude_length_without_perspective=length(dist);float extrude_length_with_perspective=length(projected_extrude.xy/gl_Position.w*u_units_to_pixels);v_gamma_scale=extrude_length_without_perspective/extrude_length_with_perspective;v_tex_a=vec2(a_linesofar*u_patternscale_a.x/floorwidth,normal.y*u_patternscale_a.y+u_tex_y_a);v_tex_b=vec2(a_linesofar*u_patternscale_b.x/floorwidth,normal.y*u_patternscale_b.y+u_tex_y_b);v_width2=vec2(outset,inset);}";

var rasterFrag = "uniform float u_fade_t;uniform float u_opacity;uniform sampler2D u_image0;uniform sampler2D u_image1;varying vec2 v_pos0;varying vec2 v_pos1;uniform float u_brightness_low;uniform float u_brightness_high;uniform float u_saturation_factor;uniform float u_contrast_factor;uniform vec3 u_spin_weights;void main() {vec4 color0=texture2D(u_image0,v_pos0);vec4 color1=texture2D(u_image1,v_pos1);if (color0.a > 0.0) {color0.rgb=color0.rgb/color0.a;}if (color1.a > 0.0) {color1.rgb=color1.rgb/color1.a;}vec4 color=mix(color0,color1,u_fade_t);color.a*=u_opacity;vec3 rgb=color.rgb;rgb=vec3(dot(rgb,u_spin_weights.xyz),dot(rgb,u_spin_weights.zxy),dot(rgb,u_spin_weights.yzx));float average=(color.r+color.g+color.b)/3.0;rgb+=(average-rgb)*u_saturation_factor;rgb=(rgb-0.5)*u_contrast_factor+0.5;vec3 u_high_vec=vec3(u_brightness_low,u_brightness_low,u_brightness_low);vec3 u_low_vec=vec3(u_brightness_high,u_brightness_high,u_brightness_high);gl_FragColor=vec4(mix(u_high_vec,u_low_vec,rgb)*color.a,color.a);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var rasterVert = "uniform mat4 u_matrix;uniform vec2 u_tl_parent;uniform float u_scale_parent;uniform float u_buffer_scale;attribute vec2 a_pos;attribute vec2 a_texture_pos;varying vec2 v_pos0;varying vec2 v_pos1;void main() {gl_Position=u_matrix*vec4(a_pos,0,1);v_pos0=(((a_texture_pos/8192.0)-0.5)/u_buffer_scale )+0.5;v_pos1=(v_pos0*u_scale_parent)+u_tl_parent;}";

var symbolIconFrag = "uniform sampler2D u_texture;varying vec2 v_tex;varying float v_fade_opacity;\n#pragma mapbox: define lowp float opacity\nvoid main() {\n#pragma mapbox: initialize lowp float opacity\nlowp float alpha=opacity*v_fade_opacity;gl_FragColor=texture2D(u_texture,v_tex)*alpha;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var symbolIconVert = "const float PI=3.141592653589793;attribute vec4 a_pos_offset;attribute vec4 a_data;attribute vec4 a_pixeloffset;attribute vec3 a_projected_pos;attribute float a_fade_opacity;uniform bool u_is_size_zoom_constant;uniform bool u_is_size_feature_constant;uniform highp float u_size_t;uniform highp float u_size;uniform highp float u_camera_to_center_distance;uniform highp float u_pitch;uniform bool u_rotate_symbol;uniform highp float u_aspect_ratio;uniform float u_fade_change;uniform mat4 u_matrix;uniform mat4 u_label_plane_matrix;uniform mat4 u_coord_matrix;uniform bool u_is_text;uniform bool u_pitch_with_map;uniform vec2 u_texsize;varying vec2 v_tex;varying float v_fade_opacity;\n#pragma mapbox: define lowp float opacity\nvoid main() {\n#pragma mapbox: initialize lowp float opacity\nvec2 a_pos=a_pos_offset.xy;vec2 a_offset=a_pos_offset.zw;vec2 a_tex=a_data.xy;vec2 a_size=a_data.zw;float a_size_min=floor(a_size[0]*0.5);vec2 a_pxoffset=a_pixeloffset.xy;vec2 a_minFontScale=a_pixeloffset.zw/256.0;highp float segment_angle=-a_projected_pos[2];float size;if (!u_is_size_zoom_constant && !u_is_size_feature_constant) {size=mix(a_size_min,a_size[1],u_size_t)/128.0;} else if (u_is_size_zoom_constant && !u_is_size_feature_constant) {size=a_size_min/128.0;} else {size=u_size;}vec4 projectedPoint=u_matrix*vec4(a_pos,0,1);highp float camera_to_anchor_distance=projectedPoint.w;highp float distance_ratio=u_pitch_with_map ?\ncamera_to_anchor_distance/u_camera_to_center_distance :\nu_camera_to_center_distance/camera_to_anchor_distance;highp float perspective_ratio=clamp(0.5+0.5*distance_ratio,0.0,4.0);size*=perspective_ratio;float fontScale=u_is_text ? size/24.0 : size;highp float symbol_rotation=0.0;if (u_rotate_symbol) {vec4 offsetProjectedPoint=u_matrix*vec4(a_pos+vec2(1,0),0,1);vec2 a=projectedPoint.xy/projectedPoint.w;vec2 b=offsetProjectedPoint.xy/offsetProjectedPoint.w;symbol_rotation=atan((b.y-a.y)/u_aspect_ratio,b.x-a.x);}highp float angle_sin=sin(segment_angle+symbol_rotation);highp float angle_cos=cos(segment_angle+symbol_rotation);mat2 rotation_matrix=mat2(angle_cos,-1.0*angle_sin,angle_sin,angle_cos);vec4 projected_pos=u_label_plane_matrix*vec4(a_projected_pos.xy,0.0,1.0);gl_Position=u_coord_matrix*vec4(projected_pos.xy/projected_pos.w+rotation_matrix*(a_offset/32.0*max(a_minFontScale,fontScale)+a_pxoffset/16.0),0.0,1.0);v_tex=a_tex/u_texsize;vec2 fade_opacity=unpack_opacity(a_fade_opacity);float fade_change=fade_opacity[1] > 0.5 ? u_fade_change :-u_fade_change;v_fade_opacity=max(0.0,min(1.0,fade_opacity[0]+fade_change));}";

var symbolSDFFrag = "#define SDF_PX 8.0\nuniform bool u_is_halo;uniform sampler2D u_texture;uniform highp float u_gamma_scale;uniform lowp float u_device_pixel_ratio;uniform bool u_is_text;varying vec2 v_data0;varying vec3 v_data1;\n#pragma mapbox: define highp vec4 fill_color\n#pragma mapbox: define highp vec4 halo_color\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp float halo_width\n#pragma mapbox: define lowp float halo_blur\nvoid main() {\n#pragma mapbox: initialize highp vec4 fill_color\n#pragma mapbox: initialize highp vec4 halo_color\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize lowp float halo_width\n#pragma mapbox: initialize lowp float halo_blur\nfloat EDGE_GAMMA=0.105/u_device_pixel_ratio;vec2 tex=v_data0.xy;float gamma_scale=v_data1.x;float size=v_data1.y;float fade_opacity=v_data1[2];float fontScale=u_is_text ? size/24.0 : size;lowp vec4 color=fill_color;highp float gamma=EDGE_GAMMA/(fontScale*u_gamma_scale);lowp float buff=(256.0-64.0)/256.0;if (u_is_halo) {color=halo_color;gamma=(halo_blur*1.19/SDF_PX+EDGE_GAMMA)/(fontScale*u_gamma_scale);buff=(6.0-halo_width/fontScale)/SDF_PX;}lowp float dist=texture2D(u_texture,tex).a;highp float gamma_scaled=gamma*gamma_scale;highp float alpha=smoothstep(buff-gamma_scaled,buff+gamma_scaled,dist);gl_FragColor=color*(alpha*opacity*fade_opacity);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var symbolSDFVert = "const float PI=3.141592653589793;attribute vec4 a_pos_offset;attribute vec4 a_data;attribute vec4 a_pixeloffset;attribute vec3 a_projected_pos;attribute float a_fade_opacity;uniform bool u_is_size_zoom_constant;uniform bool u_is_size_feature_constant;uniform highp float u_size_t;uniform highp float u_size;uniform mat4 u_matrix;uniform mat4 u_label_plane_matrix;uniform mat4 u_coord_matrix;uniform bool u_is_text;uniform bool u_pitch_with_map;uniform highp float u_pitch;uniform bool u_rotate_symbol;uniform highp float u_aspect_ratio;uniform highp float u_camera_to_center_distance;uniform float u_fade_change;uniform vec2 u_texsize;varying vec2 v_data0;varying vec3 v_data1;\n#pragma mapbox: define highp vec4 fill_color\n#pragma mapbox: define highp vec4 halo_color\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp float halo_width\n#pragma mapbox: define lowp float halo_blur\nvoid main() {\n#pragma mapbox: initialize highp vec4 fill_color\n#pragma mapbox: initialize highp vec4 halo_color\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize lowp float halo_width\n#pragma mapbox: initialize lowp float halo_blur\nvec2 a_pos=a_pos_offset.xy;vec2 a_offset=a_pos_offset.zw;vec2 a_tex=a_data.xy;vec2 a_size=a_data.zw;float a_size_min=floor(a_size[0]*0.5);vec2 a_pxoffset=a_pixeloffset.xy;highp float segment_angle=-a_projected_pos[2];float size;if (!u_is_size_zoom_constant && !u_is_size_feature_constant) {size=mix(a_size_min,a_size[1],u_size_t)/128.0;} else if (u_is_size_zoom_constant && !u_is_size_feature_constant) {size=a_size_min/128.0;} else {size=u_size;}vec4 projectedPoint=u_matrix*vec4(a_pos,0,1);highp float camera_to_anchor_distance=projectedPoint.w;highp float distance_ratio=u_pitch_with_map ?\ncamera_to_anchor_distance/u_camera_to_center_distance :\nu_camera_to_center_distance/camera_to_anchor_distance;highp float perspective_ratio=clamp(0.5+0.5*distance_ratio,0.0,4.0);size*=perspective_ratio;float fontScale=u_is_text ? size/24.0 : size;highp float symbol_rotation=0.0;if (u_rotate_symbol) {vec4 offsetProjectedPoint=u_matrix*vec4(a_pos+vec2(1,0),0,1);vec2 a=projectedPoint.xy/projectedPoint.w;vec2 b=offsetProjectedPoint.xy/offsetProjectedPoint.w;symbol_rotation=atan((b.y-a.y)/u_aspect_ratio,b.x-a.x);}highp float angle_sin=sin(segment_angle+symbol_rotation);highp float angle_cos=cos(segment_angle+symbol_rotation);mat2 rotation_matrix=mat2(angle_cos,-1.0*angle_sin,angle_sin,angle_cos);vec4 projected_pos=u_label_plane_matrix*vec4(a_projected_pos.xy,0.0,1.0);gl_Position=u_coord_matrix*vec4(projected_pos.xy/projected_pos.w+rotation_matrix*(a_offset/32.0*fontScale+a_pxoffset),0.0,1.0);float gamma_scale=gl_Position.w;vec2 fade_opacity=unpack_opacity(a_fade_opacity);float fade_change=fade_opacity[1] > 0.5 ? u_fade_change :-u_fade_change;float interpolated_fade_opacity=max(0.0,min(1.0,fade_opacity[0]+fade_change));v_data0=a_tex/u_texsize;v_data1=vec3(gamma_scale,size,interpolated_fade_opacity);}";

var symbolTextAndIconFrag = "#define SDF_PX 8.0\n#define SDF 1.0\n#define ICON 0.0\nuniform bool u_is_halo;uniform sampler2D u_texture;uniform sampler2D u_texture_icon;uniform highp float u_gamma_scale;uniform lowp float u_device_pixel_ratio;varying vec4 v_data0;varying vec4 v_data1;\n#pragma mapbox: define highp vec4 fill_color\n#pragma mapbox: define highp vec4 halo_color\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp float halo_width\n#pragma mapbox: define lowp float halo_blur\nvoid main() {\n#pragma mapbox: initialize highp vec4 fill_color\n#pragma mapbox: initialize highp vec4 halo_color\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize lowp float halo_width\n#pragma mapbox: initialize lowp float halo_blur\nfloat fade_opacity=v_data1[2];if (v_data1.w==ICON) {vec2 tex_icon=v_data0.zw;lowp float alpha=opacity*fade_opacity;gl_FragColor=texture2D(u_texture_icon,tex_icon)*alpha;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\nreturn;}vec2 tex=v_data0.xy;float EDGE_GAMMA=0.105/u_device_pixel_ratio;float gamma_scale=v_data1.x;float size=v_data1.y;float fontScale=size/24.0;lowp vec4 color=fill_color;highp float gamma=EDGE_GAMMA/(fontScale*u_gamma_scale);lowp float buff=(256.0-64.0)/256.0;if (u_is_halo) {color=halo_color;gamma=(halo_blur*1.19/SDF_PX+EDGE_GAMMA)/(fontScale*u_gamma_scale);buff=(6.0-halo_width/fontScale)/SDF_PX;}lowp float dist=texture2D(u_texture,tex).a;highp float gamma_scaled=gamma*gamma_scale;highp float alpha=smoothstep(buff-gamma_scaled,buff+gamma_scaled,dist);gl_FragColor=color*(alpha*opacity*fade_opacity);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}";

var symbolTextAndIconVert = "const float PI=3.141592653589793;attribute vec4 a_pos_offset;attribute vec4 a_data;attribute vec3 a_projected_pos;attribute float a_fade_opacity;uniform bool u_is_size_zoom_constant;uniform bool u_is_size_feature_constant;uniform highp float u_size_t;uniform highp float u_size;uniform mat4 u_matrix;uniform mat4 u_label_plane_matrix;uniform mat4 u_coord_matrix;uniform bool u_is_text;uniform bool u_pitch_with_map;uniform highp float u_pitch;uniform bool u_rotate_symbol;uniform highp float u_aspect_ratio;uniform highp float u_camera_to_center_distance;uniform float u_fade_change;uniform vec2 u_texsize;uniform vec2 u_texsize_icon;varying vec4 v_data0;varying vec4 v_data1;\n#pragma mapbox: define highp vec4 fill_color\n#pragma mapbox: define highp vec4 halo_color\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp float halo_width\n#pragma mapbox: define lowp float halo_blur\nvoid main() {\n#pragma mapbox: initialize highp vec4 fill_color\n#pragma mapbox: initialize highp vec4 halo_color\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize lowp float halo_width\n#pragma mapbox: initialize lowp float halo_blur\nvec2 a_pos=a_pos_offset.xy;vec2 a_offset=a_pos_offset.zw;vec2 a_tex=a_data.xy;vec2 a_size=a_data.zw;float a_size_min=floor(a_size[0]*0.5);float is_sdf=a_size[0]-2.0*a_size_min;highp float segment_angle=-a_projected_pos[2];float size;if (!u_is_size_zoom_constant && !u_is_size_feature_constant) {size=mix(a_size_min,a_size[1],u_size_t)/128.0;} else if (u_is_size_zoom_constant && !u_is_size_feature_constant) {size=a_size_min/128.0;} else {size=u_size;}vec4 projectedPoint=u_matrix*vec4(a_pos,0,1);highp float camera_to_anchor_distance=projectedPoint.w;highp float distance_ratio=u_pitch_with_map ?\ncamera_to_anchor_distance/u_camera_to_center_distance :\nu_camera_to_center_distance/camera_to_anchor_distance;highp float perspective_ratio=clamp(0.5+0.5*distance_ratio,0.0,4.0);size*=perspective_ratio;float fontScale=size/24.0;highp float symbol_rotation=0.0;if (u_rotate_symbol) {vec4 offsetProjectedPoint=u_matrix*vec4(a_pos+vec2(1,0),0,1);vec2 a=projectedPoint.xy/projectedPoint.w;vec2 b=offsetProjectedPoint.xy/offsetProjectedPoint.w;symbol_rotation=atan((b.y-a.y)/u_aspect_ratio,b.x-a.x);}highp float angle_sin=sin(segment_angle+symbol_rotation);highp float angle_cos=cos(segment_angle+symbol_rotation);mat2 rotation_matrix=mat2(angle_cos,-1.0*angle_sin,angle_sin,angle_cos);vec4 projected_pos=u_label_plane_matrix*vec4(a_projected_pos.xy,0.0,1.0);gl_Position=u_coord_matrix*vec4(projected_pos.xy/projected_pos.w+rotation_matrix*(a_offset/32.0*fontScale),0.0,1.0);float gamma_scale=gl_Position.w;vec2 fade_opacity=unpack_opacity(a_fade_opacity);float fade_change=fade_opacity[1] > 0.5 ? u_fade_change :-u_fade_change;float interpolated_fade_opacity=max(0.0,min(1.0,fade_opacity[0]+fade_change));v_data0.xy=a_tex/u_texsize;v_data0.zw=a_tex/u_texsize_icon;v_data1=vec4(gamma_scale,size,interpolated_fade_opacity,is_sdf);}";

var prelude = compile(preludeFrag, preludeVert);
var background = compile(backgroundFrag, backgroundVert);
var backgroundPattern = compile(backgroundPatternFrag, backgroundPatternVert);
var circle = compile(circleFrag, circleVert);
var clippingMask = compile(clippingMaskFrag, clippingMaskVert);
var heatmap = compile(heatmapFrag, heatmapVert);
var heatmapTexture = compile(heatmapTextureFrag, heatmapTextureVert);
var collisionBox = compile(collisionBoxFrag, collisionBoxVert);
var collisionCircle = compile(collisionCircleFrag, collisionCircleVert);
var debug = compile(debugFrag, debugVert);
var fill = compile(fillFrag, fillVert);
var fillOutline = compile(fillOutlineFrag, fillOutlineVert);
var fillOutlinePattern = compile(fillOutlinePatternFrag, fillOutlinePatternVert);
var fillPattern = compile(fillPatternFrag, fillPatternVert);
var fillExtrusion = compile(fillExtrusionFrag, fillExtrusionVert);
var fillExtrusionPattern = compile(fillExtrusionPatternFrag, fillExtrusionPatternVert);
var hillshadePrepare = compile(hillshadePrepareFrag, hillshadePrepareVert);
var hillshade = compile(hillshadeFrag, hillshadeVert);
var line = compile(lineFrag, lineVert);
var lineGradient = compile(lineGradientFrag, lineGradientVert);
var linePattern = compile(linePatternFrag, linePatternVert);
var lineSDF = compile(lineSDFFrag, lineSDFVert);
var raster = compile(rasterFrag, rasterVert);
var symbolIcon = compile(symbolIconFrag, symbolIconVert);
var symbolSDF = compile(symbolSDFFrag, symbolSDFVert);
var symbolTextAndIcon = compile(symbolTextAndIconFrag, symbolTextAndIconVert);
function compile(fragmentSource, vertexSource) {
    var re = /#pragma mapbox: ([\w]+) ([\w]+) ([\w]+) ([\w]+)/g;
    var staticAttributes = vertexSource.match(/attribute ([\w]+) ([\w]+)/g);
    var fragmentUniforms = fragmentSource.match(/uniform ([\w]+) ([\w]+)([\s]*)([\w]*)/g);
    var vertexUniforms = vertexSource.match(/uniform ([\w]+) ([\w]+)([\s]*)([\w]*)/g);
    var staticUniforms = vertexUniforms ? vertexUniforms.concat(fragmentUniforms) : fragmentUniforms;
    var fragmentPragmas = {};
    fragmentSource = fragmentSource.replace(re, function (match, operation, precision, type, name) {
        fragmentPragmas[name] = true;
        if (operation === 'define') {
            return '\n#ifndef HAS_UNIFORM_u_' + name + '\nvarying ' + precision + ' ' + type + ' ' + name + ';\n#else\nuniform ' + precision + ' ' + type + ' u_' + name + ';\n#endif\n';
        } else {
            return '\n#ifdef HAS_UNIFORM_u_' + name + '\n    ' + precision + ' ' + type + ' ' + name + ' = u_' + name + ';\n#endif\n';
        }
    });
    vertexSource = vertexSource.replace(re, function (match, operation, precision, type, name) {
        var attrType = type === 'float' ? 'vec2' : 'vec4';
        var unpackType = name.match(/color/) ? 'color' : attrType;
        if (fragmentPragmas[name]) {
            if (operation === 'define') {
                return '\n#ifndef HAS_UNIFORM_u_' + name + '\nuniform lowp float u_' + name + '_t;\nattribute ' + precision + ' ' + attrType + ' a_' + name + ';\nvarying ' + precision + ' ' + type + ' ' + name + ';\n#else\nuniform ' + precision + ' ' + type + ' u_' + name + ';\n#endif\n';
            } else {
                if (unpackType === 'vec4') {
                    return '\n#ifndef HAS_UNIFORM_u_' + name + '\n    ' + name + ' = a_' + name + ';\n#else\n    ' + precision + ' ' + type + ' ' + name + ' = u_' + name + ';\n#endif\n';
                } else {
                    return '\n#ifndef HAS_UNIFORM_u_' + name + '\n    ' + name + ' = unpack_mix_' + unpackType + '(a_' + name + ', u_' + name + '_t);\n#else\n    ' + precision + ' ' + type + ' ' + name + ' = u_' + name + ';\n#endif\n';
                }
            }
        } else {
            if (operation === 'define') {
                return '\n#ifndef HAS_UNIFORM_u_' + name + '\nuniform lowp float u_' + name + '_t;\nattribute ' + precision + ' ' + attrType + ' a_' + name + ';\n#else\nuniform ' + precision + ' ' + type + ' u_' + name + ';\n#endif\n';
            } else {
                if (unpackType === 'vec4') {
                    return '\n#ifndef HAS_UNIFORM_u_' + name + '\n    ' + precision + ' ' + type + ' ' + name + ' = a_' + name + ';\n#else\n    ' + precision + ' ' + type + ' ' + name + ' = u_' + name + ';\n#endif\n';
                } else {
                    return '\n#ifndef HAS_UNIFORM_u_' + name + '\n    ' + precision + ' ' + type + ' ' + name + ' = unpack_mix_' + unpackType + '(a_' + name + ', u_' + name + '_t);\n#else\n    ' + precision + ' ' + type + ' ' + name + ' = u_' + name + ';\n#endif\n';
                }
            }
        }
    });
    return {
        fragmentSource: fragmentSource,
        vertexSource: vertexSource,
        staticAttributes: staticAttributes,
        staticUniforms: staticUniforms
    };
}

var shaders = /*#__PURE__*/Object.freeze({
__proto__: null,
prelude: prelude,
background: background,
backgroundPattern: backgroundPattern,
circle: circle,
clippingMask: clippingMask,
heatmap: heatmap,
heatmapTexture: heatmapTexture,
collisionBox: collisionBox,
collisionCircle: collisionCircle,
debug: debug,
fill: fill,
fillOutline: fillOutline,
fillOutlinePattern: fillOutlinePattern,
fillPattern: fillPattern,
fillExtrusion: fillExtrusion,
fillExtrusionPattern: fillExtrusionPattern,
hillshadePrepare: hillshadePrepare,
hillshade: hillshade,
line: line,
lineGradient: lineGradient,
linePattern: linePattern,
lineSDF: lineSDF,
raster: raster,
symbolIcon: symbolIcon,
symbolSDF: symbolSDF,
symbolTextAndIcon: symbolTextAndIcon
});

var VertexArrayObject = function VertexArrayObject() {
    this.boundProgram = null;
    this.boundLayoutVertexBuffer = null;
    this.boundPaintVertexBuffers = [];
    this.boundIndexBuffer = null;
    this.boundVertexOffset = null;
    this.boundDynamicVertexBuffer = null;
    this.vao = null;
};
VertexArrayObject.prototype.bind = function bind(context, program, layoutVertexBuffer, paintVertexBuffers, indexBuffer, vertexOffset, dynamicVertexBuffer, dynamicVertexBuffer2) {
    this.context = context;
    var paintBuffersDiffer = this.boundPaintVertexBuffers.length !== paintVertexBuffers.length;
    for (var i = 0; !paintBuffersDiffer && i < paintVertexBuffers.length; i++) {
        if (this.boundPaintVertexBuffers[i] !== paintVertexBuffers[i]) {
            paintBuffersDiffer = true;
        }
    }
    var isFreshBindRequired = !this.vao || this.boundProgram !== program || this.boundLayoutVertexBuffer !== layoutVertexBuffer || paintBuffersDiffer || this.boundIndexBuffer !== indexBuffer || this.boundVertexOffset !== vertexOffset || this.boundDynamicVertexBuffer !== dynamicVertexBuffer || this.boundDynamicVertexBuffer2 !== dynamicVertexBuffer2;
    if (!context.extVertexArrayObject || isFreshBindRequired) {
        this.freshBind(program, layoutVertexBuffer, paintVertexBuffers, indexBuffer, vertexOffset, dynamicVertexBuffer, dynamicVertexBuffer2);
    } else {
        context.bindVertexArrayOES.set(this.vao);
        if (dynamicVertexBuffer) {
            dynamicVertexBuffer.bind();
        }
        if (indexBuffer && indexBuffer.dynamicDraw) {
            indexBuffer.bind();
        }
        if (dynamicVertexBuffer2) {
            dynamicVertexBuffer2.bind();
        }
    }
};
VertexArrayObject.prototype.freshBind = function freshBind(program, layoutVertexBuffer, paintVertexBuffers, indexBuffer, vertexOffset, dynamicVertexBuffer, dynamicVertexBuffer2) {
    var numPrevAttributes;
    var numNextAttributes = program.numAttributes;
    var context = this.context;
    var gl = context.gl;
    if (context.extVertexArrayObject) {
        if (this.vao) {
            this.destroy();
        }
        this.vao = context.extVertexArrayObject.createVertexArrayOES();
        context.bindVertexArrayOES.set(this.vao);
        numPrevAttributes = 0;
        this.boundProgram = program;
        this.boundLayoutVertexBuffer = layoutVertexBuffer;
        this.boundPaintVertexBuffers = paintVertexBuffers;
        this.boundIndexBuffer = indexBuffer;
        this.boundVertexOffset = vertexOffset;
        this.boundDynamicVertexBuffer = dynamicVertexBuffer;
        this.boundDynamicVertexBuffer2 = dynamicVertexBuffer2;
    } else {
        numPrevAttributes = context.currentNumAttributes || 0;
        for (var i = numNextAttributes; i < numPrevAttributes; i++) {
            gl.disableVertexAttribArray(i);
        }
    }
    layoutVertexBuffer.enableAttributes(gl, program);
    for (var i$1 = 0, list = paintVertexBuffers; i$1 < list.length; i$1 += 1) {
        var vertexBuffer = list[i$1];
        vertexBuffer.enableAttributes(gl, program);
    }
    if (dynamicVertexBuffer) {
        dynamicVertexBuffer.enableAttributes(gl, program);
    }
    if (dynamicVertexBuffer2) {
        dynamicVertexBuffer2.enableAttributes(gl, program);
    }
    layoutVertexBuffer.bind();
    layoutVertexBuffer.setVertexAttribPointers(gl, program, vertexOffset);
    for (var i$2 = 0, list$1 = paintVertexBuffers; i$2 < list$1.length; i$2 += 1) {
        var vertexBuffer$1 = list$1[i$2];
        vertexBuffer$1.bind();
        vertexBuffer$1.setVertexAttribPointers(gl, program, vertexOffset);
    }
    if (dynamicVertexBuffer) {
        dynamicVertexBuffer.bind();
        dynamicVertexBuffer.setVertexAttribPointers(gl, program, vertexOffset);
    }
    if (indexBuffer) {
        indexBuffer.bind();
    }
    if (dynamicVertexBuffer2) {
        dynamicVertexBuffer2.bind();
        dynamicVertexBuffer2.setVertexAttribPointers(gl, program, vertexOffset);
    }
    context.currentNumAttributes = numNextAttributes;
};
VertexArrayObject.prototype.destroy = function destroy() {
    if (this.vao) {
        this.context.extVertexArrayObject.deleteVertexArrayOES(this.vao);
        this.vao = null;
    }
};

function getTokenizedAttributesAndUniforms(array) {
    var result = [];
    for (var i = 0; i < array.length; i++) {
        if (array[i] === null) {
            continue;
        }
        var token = array[i].split(' ');
        result.push(token.pop());
    }
    return result;
}
var Program$1 = function Program(context, name, source, configuration, fixedUniforms, showOverdrawInspector) {
    var gl = context.gl;
    this.program = gl.createProgram();
    var staticAttrInfo = getTokenizedAttributesAndUniforms(source.staticAttributes);
    var dynamicAttrInfo = configuration ? configuration.getBinderAttributes() : [];
    var allAttrInfo = staticAttrInfo.concat(dynamicAttrInfo);
    var staticUniformsInfo = source.staticUniforms ? getTokenizedAttributesAndUniforms(source.staticUniforms) : [];
    var dynamicUniformsInfo = configuration ? configuration.getBinderUniforms() : [];
    var uniformList = staticUniformsInfo.concat(dynamicUniformsInfo);
    var allUniformsInfo = [];
    for (var i$1 = 0, list = uniformList; i$1 < list.length; i$1 += 1) {
        var uniform = list[i$1];
        if (allUniformsInfo.indexOf(uniform) < 0) {
            allUniformsInfo.push(uniform);
        }
    }
    var defines = configuration ? configuration.defines() : [];
    if (showOverdrawInspector) {
        defines.push('#define OVERDRAW_INSPECTOR;');
    }
    var fragmentSource = defines.concat(prelude.fragmentSource, source.fragmentSource).join('\n');
    var vertexSource = defines.concat(prelude.vertexSource, source.vertexSource).join('\n');
    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
    if (gl.isContextLost()) {
        this.failedToCreate = true;
        return;
    }
    gl.shaderSource(fragmentShader, fragmentSource);
    gl.compileShader(fragmentShader);
    gl.attachShader(this.program, fragmentShader);
    var vertexShader = gl.createShader(gl.VERTEX_SHADER);
    if (gl.isContextLost()) {
        this.failedToCreate = true;
        return;
    }
    gl.shaderSource(vertexShader, vertexSource);
    gl.compileShader(vertexShader);
    gl.attachShader(this.program, vertexShader);
    this.attributes = {};
    var uniformLocations = {};
    this.numAttributes = allAttrInfo.length;
    for (var i = 0; i < this.numAttributes; i++) {
        if (allAttrInfo[i]) {
            gl.bindAttribLocation(this.program, i, allAttrInfo[i]);
            this.attributes[allAttrInfo[i]] = i;
        }
    }
    gl.linkProgram(this.program);
    gl.deleteShader(vertexShader);
    gl.deleteShader(fragmentShader);
    for (var it = 0; it < allUniformsInfo.length; it++) {
        var uniform$1 = allUniformsInfo[it];
        if (uniform$1 && !uniformLocations[uniform$1]) {
            var uniformLocation = gl.getUniformLocation(this.program, uniform$1);
            if (uniformLocation) {
                uniformLocations[uniform$1] = uniformLocation;
            }
        }
    }
    this.fixedUniforms = fixedUniforms(context, uniformLocations);
    this.binderUniforms = configuration ? configuration.getUniforms(context, uniformLocations) : [];
};
Program$1.prototype.draw = function draw(context, drawMode, depthMode, stencilMode, colorMode, cullFaceMode, uniformValues, layerID, layoutVertexBuffer, indexBuffer, segments, currentProperties, zoom, configuration, dynamicLayoutBuffer, dynamicLayoutBuffer2) {
    var obj;
    var gl = context.gl;
    if (this.failedToCreate) {
        return;
    }
    context.program.set(this.program);
    context.setDepthMode(depthMode);
    context.setStencilMode(stencilMode);
    context.setColorMode(colorMode);
    context.setCullFace(cullFaceMode);
    for (var name in this.fixedUniforms) {
        this.fixedUniforms[name].set(uniformValues[name]);
    }
    if (configuration) {
        configuration.setUniforms(context, this.binderUniforms, currentProperties, { zoom: zoom });
    }
    var primitiveSize = (obj = {}, obj[gl.LINES] = 2, obj[gl.TRIANGLES] = 3, obj[gl.LINE_STRIP] = 1, obj)[drawMode];
    for (var i = 0, list = segments.get(); i < list.length; i += 1) {
        var segment = list[i];
        var vaos = segment.vaos || (segment.vaos = {});
        var vao = vaos[layerID] || (vaos[layerID] = new VertexArrayObject());
        vao.bind(context, this, layoutVertexBuffer, configuration ? configuration.getPaintVertexBuffers() : [], indexBuffer, segment.vertexOffset, dynamicLayoutBuffer, dynamicLayoutBuffer2);
        gl.drawElements(drawMode, segment.primitiveLength * primitiveSize, gl.UNSIGNED_SHORT, segment.primitiveOffset * primitiveSize * 2);
    }
};

function patternUniformValues(crossfade, painter, tile) {
    var tileRatio = 1 / pixelsToTileUnits(tile, 1, painter.transform.tileZoom);
    var numTiles = Math.pow(2, tile.tileID.overscaledZ);
    var tileSizeAtNearestZoom = tile.tileSize * Math.pow(2, painter.transform.tileZoom) / numTiles;
    var pixelX = tileSizeAtNearestZoom * (tile.tileID.canonical.x + tile.tileID.wrap * numTiles);
    var pixelY = tileSizeAtNearestZoom * tile.tileID.canonical.y;
    return {
        'u_image': 0,
        'u_texsize': tile.imageAtlasTexture.size,
        'u_scale': [
            tileRatio,
            crossfade.fromScale,
            crossfade.toScale
        ],
        'u_fade': crossfade.t,
        'u_pixel_coord_upper': [
            pixelX >> 16,
            pixelY >> 16
        ],
        'u_pixel_coord_lower': [
            pixelX & 65535,
            pixelY & 65535
        ]
    };
}
function bgPatternUniformValues(image, crossfade, painter, tile) {
    var imagePosA = painter.imageManager.getPattern(image.from.toString());
    var imagePosB = painter.imageManager.getPattern(image.to.toString());
    var ref = painter.imageManager.getPixelSize();
    var width = ref.width;
    var height = ref.height;
    var numTiles = Math.pow(2, tile.tileID.overscaledZ);
    var tileSizeAtNearestZoom = tile.tileSize * Math.pow(2, painter.transform.tileZoom) / numTiles;
    var pixelX = tileSizeAtNearestZoom * (tile.tileID.canonical.x + tile.tileID.wrap * numTiles);
    var pixelY = tileSizeAtNearestZoom * tile.tileID.canonical.y;
    return {
        'u_image': 0,
        'u_pattern_tl_a': imagePosA.tl,
        'u_pattern_br_a': imagePosA.br,
        'u_pattern_tl_b': imagePosB.tl,
        'u_pattern_br_b': imagePosB.br,
        'u_texsize': [
            width,
            height
        ],
        'u_mix': crossfade.t,
        'u_pattern_size_a': imagePosA.displaySize,
        'u_pattern_size_b': imagePosB.displaySize,
        'u_scale_a': crossfade.fromScale,
        'u_scale_b': crossfade.toScale,
        'u_tile_units_to_pixels': 1 / pixelsToTileUnits(tile, 1, painter.transform.tileZoom),
        'u_pixel_coord_upper': [
            pixelX >> 16,
            pixelY >> 16
        ],
        'u_pixel_coord_lower': [
            pixelX & 65535,
            pixelY & 65535
        ]
    };
}

var fillExtrusionUniforms = function (context, locations) {
    return {
        'u_matrix': new performance.UniformMatrix4f(context, locations.u_matrix),
        'u_lightpos': new performance.Uniform3f(context, locations.u_lightpos),
        'u_lightintensity': new performance.Uniform1f(context, locations.u_lightintensity),
        'u_lightcolor': new performance.Uniform3f(context, locations.u_lightcolor),
        'u_vertical_gradient': new performance.Uniform1f(context, locations.u_vertical_gradient),
        'u_opacity': new performance.Uniform1f(context, locations.u_opacity)
    };
};
var fillExtrusionPatternUniforms = function (context, locations) {
    return {
        'u_matrix': new performance.UniformMatrix4f(context, locations.u_matrix),
        'u_lightpos': new performance.Uniform3f(context, locations.u_lightpos),
        'u_lightintensity': new performance.Uniform1f(context, locations.u_lightintensity),
        'u_lightcolor': new performance.Uniform3f(context, locations.u_lightcolor),
        'u_vertical_gradient': new performance.Uniform1f(context, locations.u_vertical_gradient),
        'u_height_factor': new performance.Uniform1f(context, locations.u_height_factor),
        'u_image': new performance.Uniform1i(context, locations.u_image),
        'u_texsize': new performance.Uniform2f(context, locations.u_texsize),
        'u_pixel_coord_upper': new performance.Uniform2f(context, locations.u_pixel_coord_upper),
        'u_pixel_coord_lower': new performance.Uniform2f(context, locations.u_pixel_coord_lower),
        'u_scale': new performance.Uniform3f(context, locations.u_scale),
        'u_fade': new performance.Uniform1f(context, locations.u_fade),
        'u_opacity': new performance.Uniform1f(context, locations.u_opacity)
    };
};
var fillExtrusionUniformValues = function (matrix, painter, shouldUseVerticalGradient, opacity) {
    var light = painter.style.light;
    var _lp = light.properties.get('position');
    var lightPos = [
        _lp.x,
        _lp.y,
        _lp.z
    ];
    var lightMat = performance.create$1();
    if (light.properties.get('anchor') === 'viewport') {
        performance.fromRotation(lightMat, -painter.transform.angle);
    }
    performance.transformMat3(lightPos, lightPos, lightMat);
    var lightColor = light.properties.get('color');
    return {
        'u_matrix': matrix,
        'u_lightpos': lightPos,
        'u_lightintensity': light.properties.get('intensity'),
        'u_lightcolor': [
            lightColor.r,
            lightColor.g,
            lightColor.b
        ],
        'u_vertical_gradient': +shouldUseVerticalGradient,
        'u_opacity': opacity
    };
};
var fillExtrusionPatternUniformValues = function (matrix, painter, shouldUseVerticalGradient, opacity, coord, crossfade, tile) {
    return performance.extend(fillExtrusionUniformValues(matrix, painter, shouldUseVerticalGradient, opacity), patternUniformValues(crossfade, painter, tile), { 'u_height_factor': -Math.pow(2, coord.overscaledZ) / tile.tileSize / 8 });
};

var fillUniforms = function (context, locations) {
    return { 'u_matrix': new performance.UniformMatrix4f(context, locations.u_matrix) };
};
var fillPatternUniforms = function (context, locations) {
    return {
        'u_matrix': new performance.UniformMatrix4f(context, locations.u_matrix),
        'u_image': new performance.Uniform1i(context, locations.u_image),
        'u_texsize': new performance.Uniform2f(context, locations.u_texsize),
        'u_pixel_coord_upper': new performance.Uniform2f(context, locations.u_pixel_coord_upper),
        'u_pixel_coord_lower': new performance.Uniform2f(context, locations.u_pixel_coord_lower),
        'u_scale': new performance.Uniform3f(context, locations.u_scale),
        'u_fade': new performance.Uniform1f(context, locations.u_fade)
    };
};
var fillOutlineUniforms = function (context, locations) {
    return {
        'u_matrix': new performance.UniformMatrix4f(context, locations.u_matrix),
        'u_world': new performance.Uniform2f(context, locations.u_world)
    };
};
var fillOutlinePatternUniforms = function (context, locations) {
    return {
        'u_matrix': new performance.UniformMatrix4f(context, locations.u_matrix),
        'u_world': new performance.Uniform2f(context, locations.u_world),
        'u_image': new performance.Uniform1i(context, locations.u_image),
        'u_texsize': new performance.Uniform2f(context, locations.u_texsize),
        'u_pixel_coord_upper': new performance.Uniform2f(context, locations.u_pixel_coord_upper),
        'u_pixel_coord_lower': new performance.Uniform2f(context, locations.u_pixel_coord_lower),
        'u_scale': new performance.Uniform3f(context, locations.u_scale),
        'u_fade': new performance.Uniform1f(context, locations.u_fade)
    };
};
var fillUniformValues = function (matrix) {
    return { 'u_matrix': matrix };
};
var fillPatternUniformValues = function (matrix, painter, crossfade, tile) {
    return performance.extend(fillUniformValues(matrix), patternUniformValues(crossfade, painter, tile));
};
var fillOutlineUniformValues = function (matrix, drawingBufferSize) {
    return {
        'u_matrix': matrix,
        'u_world': drawingBufferSize
    };
};
var fillOutlinePatternUniformValues = function (matrix, painter, crossfade, tile, drawingBufferSize) {
    return performance.extend(fillPatternUniformValues(matrix, painter, crossfade, tile), { 'u_world': drawingBufferSize });
};

var circleUniforms = function (context, locations) {
    return {
        'u_camera_to_center_distance': new performance.Uniform1f(context, locations.u_camera_to_center_distance),
        'u_scale_with_map': new performance.Uniform1i(context, locations.u_scale_with_map),
        'u_pitch_with_map': new performance.Uniform1i(context, locations.u_pitch_with_map),
        'u_extrude_scale': new performance.Uniform2f(context, locations.u_extrude_scale),
        'u_device_pixel_ratio': new performance.Uniform1f(context, locations.u_device_pixel_ratio),
        'u_matrix': new performance.UniformMatrix4f(context, locations.u_matrix)
    };
};
var circleUniformValues = function (painter, coord, tile, layer) {
    var transform = painter.transform;
    var pitchWithMap, extrudeScale;
    if (layer.paint.get('circle-pitch-alignment') === 'map') {
        var pixelRatio = pixelsToTileUnits(tile, 1, transform.zoom);
        pitchWithMap = true;
        extrudeScale = [
            pixelRatio,
            pixelRatio
        ];
    } else {
        pitchWithMap = false;
        extrudeScale = transform.pixelsToGLUnits;
    }
    return {
        'u_camera_to_center_distance': transform.cameraToCenterDistance,
        'u_scale_with_map': +(layer.paint.get('circle-pitch-scale') === 'map'),
        'u_matrix': painter.translatePosMatrix(coord.posMatrix, tile, layer.paint.get('circle-translate'), layer.paint.get('circle-translate-anchor')),
        'u_pitch_with_map': +pitchWithMap,
        'u_device_pixel_ratio': performance.browser.devicePixelRatio,
        'u_extrude_scale': extrudeScale
    };
};

var collisionUniforms = function (context, locations) {
    return {
        'u_matrix': new performance.UniformMatrix4f(context, locations.u_matrix),
        'u_camera_to_center_distance': new performance.Uniform1f(context, locations.u_camera_to_center_distance),
        'u_pixels_to_tile_units': new performance.Uniform1f(context, locations.u_pixels_to_tile_units),
        'u_extrude_scale': new performance.Uniform2f(context, locations.u_extrude_scale),
        'u_overscale_factor': new performance.Uniform1f(context, locations.u_overscale_factor)
    };
};
var collisionCircleUniforms = function (context, locations) {
    return {
        'u_matrix': new performance.UniformMatrix4f(context, locations.u_matrix),
        'u_inv_matrix': new performance.UniformMatrix4f(context, locations.u_inv_matrix),
        'u_camera_to_center_distance': new performance.Uniform1f(context, locations.u_camera_to_center_distance),
        'u_viewport_size': new performance.Uniform2f(context, locations.u_viewport_size)
    };
};
var collisionUniformValues = function (matrix, transform, tile) {
    var pixelRatio = pixelsToTileUnits(tile, 1, transform.zoom);
    var scale = Math.pow(2, transform.zoom - tile.tileID.overscaledZ);
    var overscaleFactor = tile.tileID.overscaleFactor();
    return {
        'u_matrix': matrix,
        'u_camera_to_center_distance': transform.cameraToCenterDistance,
        'u_pixels_to_tile_units': pixelRatio,
        'u_extrude_scale': [
            transform.pixelsToGLUnits[0] / (pixelRatio * scale),
            transform.pixelsToGLUnits[1] / (pixelRatio * scale)
        ],
        'u_overscale_factor': overscaleFactor
    };
};
var collisionCircleUniformValues = function (matrix, invMatrix, transform) {
    return {
        'u_matrix': matrix,
        'u_inv_matrix': invMatrix,
        'u_camera_to_center_distance': transform.cameraToCenterDistance,
        'u_viewport_size': [
            transform.width,
            transform.height
        ]
    };
};

var debugUniforms = function (context, locations) {
    return {
        'u_color': new performance.UniformColor(context, locations.u_color),
        'u_matrix': new performance.UniformMatrix4f(context, locations.u_matrix),
        'u_overlay': new performance.Uniform1i(context, locations.u_overlay),
        'u_overlay_scale': new performance.Uniform1f(context, locations.u_overlay_scale)
    };
};
var debugUniformValues = function (matrix, color, scaleRatio) {
    if (scaleRatio === void 0)
        scaleRatio = 1;
    return {
        'u_matrix': matrix,
        'u_color': color,
        'u_overlay': 0,
        'u_overlay_scale': scaleRatio
    };
};

var clippingMaskUniforms = function (context, locations) {
    return { 'u_matrix': new performance.UniformMatrix4f(context, locations.u_matrix) };
};
var clippingMaskUniformValues = function (matrix) {
    return { 'u_matrix': matrix };
};

var heatmapUniforms = function (context, locations) {
    return {
        'u_extrude_scale': new performance.Uniform1f(context, locations.u_extrude_scale),
        'u_intensity': new performance.Uniform1f(context, locations.u_intensity),
        'u_matrix': new performance.UniformMatrix4f(context, locations.u_matrix)
    };
};
var heatmapTextureUniforms = function (context, locations) {
    return {
        'u_matrix': new performance.UniformMatrix4f(context, locations.u_matrix),
        'u_world': new performance.Uniform2f(context, locations.u_world),
        'u_image': new performance.Uniform1i(context, locations.u_image),
        'u_color_ramp': new performance.Uniform1i(context, locations.u_color_ramp),
        'u_opacity': new performance.Uniform1f(context, locations.u_opacity)
    };
};
var heatmapUniformValues = function (matrix, tile, zoom, intensity) {
    return {
        'u_matrix': matrix,
        'u_extrude_scale': pixelsToTileUnits(tile, 1, zoom),
        'u_intensity': intensity
    };
};
var heatmapTextureUniformValues = function (painter, layer, textureUnit, colorRampUnit) {
    var matrix = performance.create();
    performance.ortho(matrix, 0, painter.width, painter.height, 0, 0, 1);
    var gl = painter.context.gl;
    return {
        'u_matrix': matrix,
        'u_world': [
            gl.drawingBufferWidth,
            gl.drawingBufferHeight
        ],
        'u_image': textureUnit,
        'u_color_ramp': colorRampUnit,
        'u_opacity': layer.paint.get('heatmap-opacity')
    };
};

var hillshadeUniforms = function (context, locations) {
    return {
        'u_matrix': new performance.UniformMatrix4f(context, locations.u_matrix),
        'u_image': new performance.Uniform1i(context, locations.u_image),
        'u_latrange': new performance.Uniform2f(context, locations.u_latrange),
        'u_light': new performance.Uniform2f(context, locations.u_light),
        'u_shadow': new performance.UniformColor(context, locations.u_shadow),
        'u_highlight': new performance.UniformColor(context, locations.u_highlight),
        'u_accent': new performance.UniformColor(context, locations.u_accent)
    };
};
var hillshadePrepareUniforms = function (context, locations) {
    return {
        'u_matrix': new performance.UniformMatrix4f(context, locations.u_matrix),
        'u_image': new performance.Uniform1i(context, locations.u_image),
        'u_dimension': new performance.Uniform2f(context, locations.u_dimension),
        'u_zoom': new performance.Uniform1f(context, locations.u_zoom),
        'u_unpack': new performance.Uniform4f(context, locations.u_unpack)
    };
};
var hillshadeUniformValues = function (painter, tile, layer) {
    var shadow = layer.paint.get('hillshade-shadow-color');
    var highlight = layer.paint.get('hillshade-highlight-color');
    var accent = layer.paint.get('hillshade-accent-color');
    var azimuthal = layer.paint.get('hillshade-illumination-direction') * (Math.PI / 180);
    if (layer.paint.get('hillshade-illumination-anchor') === 'viewport') {
        azimuthal -= painter.transform.angle;
    }
    var align = !painter.options.moving;
    return {
        'u_matrix': painter.transform.calculatePosMatrix(tile.tileID.toUnwrapped(), align),
        'u_image': 0,
        'u_latrange': getTileLatRange(painter, tile.tileID),
        'u_light': [
            layer.paint.get('hillshade-exaggeration'),
            azimuthal
        ],
        'u_shadow': shadow,
        'u_highlight': highlight,
        'u_accent': accent
    };
};
var hillshadeUniformPrepareValues = function (tileID, dem) {
    var stride = dem.stride;
    var matrix = performance.create();
    performance.ortho(matrix, 0, performance.EXTENT, -performance.EXTENT, 0, 0, 1);
    performance.translate(matrix, matrix, [
        0,
        -performance.EXTENT,
        0
    ]);
    return {
        'u_matrix': matrix,
        'u_image': 1,
        'u_dimension': [
            stride,
            stride
        ],
        'u_zoom': tileID.overscaledZ,
        'u_unpack': dem.getUnpackVector()
    };
};
function getTileLatRange(painter, tileID) {
    var tilesAtZoom = Math.pow(2, tileID.canonical.z);
    var y = tileID.canonical.y;
    return [
        new performance.MercatorCoordinate(0, y / tilesAtZoom).toLngLat().lat,
        new performance.MercatorCoordinate(0, (y + 1) / tilesAtZoom).toLngLat().lat
    ];
}

var lineUniforms = function (context, locations) {
    return {
        'u_matrix': new performance.UniformMatrix4f(context, locations.u_matrix),
        'u_ratio': new performance.Uniform1f(context, locations.u_ratio),
        'u_device_pixel_ratio': new performance.Uniform1f(context, locations.u_device_pixel_ratio),
        'u_units_to_pixels': new performance.Uniform2f(context, locations.u_units_to_pixels)
    };
};
var lineGradientUniforms = function (context, locations) {
    return {
        'u_matrix': new performance.UniformMatrix4f(context, locations.u_matrix),
        'u_ratio': new performance.Uniform1f(context, locations.u_ratio),
        'u_device_pixel_ratio': new performance.Uniform1f(context, locations.u_device_pixel_ratio),
        'u_units_to_pixels': new performance.Uniform2f(context, locations.u_units_to_pixels),
        'u_image': new performance.Uniform1i(context, locations.u_image),
        'u_image_height': new performance.Uniform1f(context, locations.u_image_height)
    };
};
var linePatternUniforms = function (context, locations) {
    return {
        'u_matrix': new performance.UniformMatrix4f(context, locations.u_matrix),
        'u_texsize': new performance.Uniform2f(context, locations.u_texsize),
        'u_ratio': new performance.Uniform1f(context, locations.u_ratio),
        'u_device_pixel_ratio': new performance.Uniform1f(context, locations.u_device_pixel_ratio),
        'u_image': new performance.Uniform1i(context, locations.u_image),
        'u_units_to_pixels': new performance.Uniform2f(context, locations.u_units_to_pixels),
        'u_scale': new performance.Uniform3f(context, locations.u_scale),
        'u_fade': new performance.Uniform1f(context, locations.u_fade)
    };
};
var lineSDFUniforms = function (context, locations) {
    return {
        'u_matrix': new performance.UniformMatrix4f(context, locations.u_matrix),
        'u_ratio': new performance.Uniform1f(context, locations.u_ratio),
        'u_device_pixel_ratio': new performance.Uniform1f(context, locations.u_device_pixel_ratio),
        'u_units_to_pixels': new performance.Uniform2f(context, locations.u_units_to_pixels),
        'u_patternscale_a': new performance.Uniform2f(context, locations.u_patternscale_a),
        'u_patternscale_b': new performance.Uniform2f(context, locations.u_patternscale_b),
        'u_sdfgamma': new performance.Uniform1f(context, locations.u_sdfgamma),
        'u_image': new performance.Uniform1i(context, locations.u_image),
        'u_tex_y_a': new performance.Uniform1f(context, locations.u_tex_y_a),
        'u_tex_y_b': new performance.Uniform1f(context, locations.u_tex_y_b),
        'u_mix': new performance.Uniform1f(context, locations.u_mix)
    };
};
var lineUniformValues = function (painter, tile, layer) {
    var transform = painter.transform;
    return {
        'u_matrix': calculateMatrix(painter, tile, layer),
        'u_ratio': 1 / pixelsToTileUnits(tile, 1, transform.zoom),
        'u_device_pixel_ratio': performance.browser.devicePixelRatio,
        'u_units_to_pixels': [
            1 / transform.pixelsToGLUnits[0],
            1 / transform.pixelsToGLUnits[1]
        ]
    };
};
var lineGradientUniformValues = function (painter, tile, layer, imageHeight) {
    return performance.extend(lineUniformValues(painter, tile, layer), {
        'u_image': 0,
        'u_image_height': imageHeight
    });
};
var linePatternUniformValues = function (painter, tile, layer, crossfade) {
    var transform = painter.transform;
    var tileZoomRatio = calculateTileRatio(tile, transform);
    return {
        'u_matrix': calculateMatrix(painter, tile, layer),
        'u_texsize': tile.imageAtlasTexture.size,
        'u_ratio': 1 / pixelsToTileUnits(tile, 1, transform.zoom),
        'u_device_pixel_ratio': performance.browser.devicePixelRatio,
        'u_image': 0,
        'u_scale': [
            tileZoomRatio,
            crossfade.fromScale,
            crossfade.toScale
        ],
        'u_fade': crossfade.t,
        'u_units_to_pixels': [
            1 / transform.pixelsToGLUnits[0],
            1 / transform.pixelsToGLUnits[1]
        ]
    };
};
var lineSDFUniformValues = function (painter, tile, layer, dasharray, crossfade) {
    var transform = painter.transform;
    var lineAtlas = painter.lineAtlas;
    var tileRatio = calculateTileRatio(tile, transform);
    var round = layer.layout.get('line-cap') === 'round';
    var posA = lineAtlas.getDash(dasharray.from, round);
    var posB = lineAtlas.getDash(dasharray.to, round);
    var widthA = posA.width * crossfade.fromScale;
    var widthB = posB.width * crossfade.toScale;
    return performance.extend(lineUniformValues(painter, tile, layer), {
        'u_patternscale_a': [
            tileRatio / widthA,
            -posA.height / 2
        ],
        'u_patternscale_b': [
            tileRatio / widthB,
            -posB.height / 2
        ],
        'u_sdfgamma': lineAtlas.width / (Math.min(widthA, widthB) * 256 * performance.browser.devicePixelRatio) / 2,
        'u_image': 0,
        'u_tex_y_a': posA.y,
        'u_tex_y_b': posB.y,
        'u_mix': crossfade.t
    });
};
function calculateTileRatio(tile, transform) {
    return 1 / pixelsToTileUnits(tile, 1, transform.tileZoom);
}
function calculateMatrix(painter, tile, layer) {
    return painter.translatePosMatrix(tile.tileID.posMatrix, tile, layer.paint.get('line-translate'), layer.paint.get('line-translate-anchor'));
}

var rasterUniforms = function (context, locations) {
    return {
        'u_matrix': new performance.UniformMatrix4f(context, locations.u_matrix),
        'u_tl_parent': new performance.Uniform2f(context, locations.u_tl_parent),
        'u_scale_parent': new performance.Uniform1f(context, locations.u_scale_parent),
        'u_buffer_scale': new performance.Uniform1f(context, locations.u_buffer_scale),
        'u_fade_t': new performance.Uniform1f(context, locations.u_fade_t),
        'u_opacity': new performance.Uniform1f(context, locations.u_opacity),
        'u_image0': new performance.Uniform1i(context, locations.u_image0),
        'u_image1': new performance.Uniform1i(context, locations.u_image1),
        'u_brightness_low': new performance.Uniform1f(context, locations.u_brightness_low),
        'u_brightness_high': new performance.Uniform1f(context, locations.u_brightness_high),
        'u_saturation_factor': new performance.Uniform1f(context, locations.u_saturation_factor),
        'u_contrast_factor': new performance.Uniform1f(context, locations.u_contrast_factor),
        'u_spin_weights': new performance.Uniform3f(context, locations.u_spin_weights)
    };
};
var rasterUniformValues = function (matrix, parentTL, parentScaleBy, fade, layer) {
    return {
        'u_matrix': matrix,
        'u_tl_parent': parentTL,
        'u_scale_parent': parentScaleBy,
        'u_buffer_scale': 1,
        'u_fade_t': fade.mix,
        'u_opacity': fade.opacity * layer.paint.get('raster-opacity'),
        'u_image0': 0,
        'u_image1': 1,
        'u_brightness_low': layer.paint.get('raster-brightness-min'),
        'u_brightness_high': layer.paint.get('raster-brightness-max'),
        'u_saturation_factor': saturationFactor(layer.paint.get('raster-saturation')),
        'u_contrast_factor': contrastFactor(layer.paint.get('raster-contrast')),
        'u_spin_weights': spinWeights(layer.paint.get('raster-hue-rotate'))
    };
};
function spinWeights(angle) {
    angle *= Math.PI / 180;
    var s = Math.sin(angle);
    var c = Math.cos(angle);
    return [
        (2 * c + 1) / 3,
        (-Math.sqrt(3) * s - c + 1) / 3,
        (Math.sqrt(3) * s - c + 1) / 3
    ];
}
function contrastFactor(contrast) {
    return contrast > 0 ? 1 / (1 - contrast) : 1 + contrast;
}
function saturationFactor(saturation) {
    return saturation > 0 ? 1 - 1 / (1.001 - saturation) : -saturation;
}

var symbolIconUniforms = function (context, locations) {
    return {
        'u_is_size_zoom_constant': new performance.Uniform1i(context, locations.u_is_size_zoom_constant),
        'u_is_size_feature_constant': new performance.Uniform1i(context, locations.u_is_size_feature_constant),
        'u_size_t': new performance.Uniform1f(context, locations.u_size_t),
        'u_size': new performance.Uniform1f(context, locations.u_size),
        'u_camera_to_center_distance': new performance.Uniform1f(context, locations.u_camera_to_center_distance),
        'u_pitch': new performance.Uniform1f(context, locations.u_pitch),
        'u_rotate_symbol': new performance.Uniform1i(context, locations.u_rotate_symbol),
        'u_aspect_ratio': new performance.Uniform1f(context, locations.u_aspect_ratio),
        'u_fade_change': new performance.Uniform1f(context, locations.u_fade_change),
        'u_matrix': new performance.UniformMatrix4f(context, locations.u_matrix),
        'u_label_plane_matrix': new performance.UniformMatrix4f(context, locations.u_label_plane_matrix),
        'u_coord_matrix': new performance.UniformMatrix4f(context, locations.u_coord_matrix),
        'u_is_text': new performance.Uniform1i(context, locations.u_is_text),
        'u_pitch_with_map': new performance.Uniform1i(context, locations.u_pitch_with_map),
        'u_texsize': new performance.Uniform2f(context, locations.u_texsize),
        'u_texture': new performance.Uniform1i(context, locations.u_texture)
    };
};
var symbolSDFUniforms = function (context, locations) {
    return {
        'u_is_size_zoom_constant': new performance.Uniform1i(context, locations.u_is_size_zoom_constant),
        'u_is_size_feature_constant': new performance.Uniform1i(context, locations.u_is_size_feature_constant),
        'u_size_t': new performance.Uniform1f(context, locations.u_size_t),
        'u_size': new performance.Uniform1f(context, locations.u_size),
        'u_camera_to_center_distance': new performance.Uniform1f(context, locations.u_camera_to_center_distance),
        'u_pitch': new performance.Uniform1f(context, locations.u_pitch),
        'u_rotate_symbol': new performance.Uniform1i(context, locations.u_rotate_symbol),
        'u_aspect_ratio': new performance.Uniform1f(context, locations.u_aspect_ratio),
        'u_fade_change': new performance.Uniform1f(context, locations.u_fade_change),
        'u_matrix': new performance.UniformMatrix4f(context, locations.u_matrix),
        'u_label_plane_matrix': new performance.UniformMatrix4f(context, locations.u_label_plane_matrix),
        'u_coord_matrix': new performance.UniformMatrix4f(context, locations.u_coord_matrix),
        'u_is_text': new performance.Uniform1i(context, locations.u_is_text),
        'u_pitch_with_map': new performance.Uniform1i(context, locations.u_pitch_with_map),
        'u_texsize': new performance.Uniform2f(context, locations.u_texsize),
        'u_texture': new performance.Uniform1i(context, locations.u_texture),
        'u_gamma_scale': new performance.Uniform1f(context, locations.u_gamma_scale),
        'u_device_pixel_ratio': new performance.Uniform1f(context, locations.u_device_pixel_ratio),
        'u_is_halo': new performance.Uniform1i(context, locations.u_is_halo)
    };
};
var symbolTextAndIconUniforms = function (context, locations) {
    return {
        'u_is_size_zoom_constant': new performance.Uniform1i(context, locations.u_is_size_zoom_constant),
        'u_is_size_feature_constant': new performance.Uniform1i(context, locations.u_is_size_feature_constant),
        'u_size_t': new performance.Uniform1f(context, locations.u_size_t),
        'u_size': new performance.Uniform1f(context, locations.u_size),
        'u_camera_to_center_distance': new performance.Uniform1f(context, locations.u_camera_to_center_distance),
        'u_pitch': new performance.Uniform1f(context, locations.u_pitch),
        'u_rotate_symbol': new performance.Uniform1i(context, locations.u_rotate_symbol),
        'u_aspect_ratio': new performance.Uniform1f(context, locations.u_aspect_ratio),
        'u_fade_change': new performance.Uniform1f(context, locations.u_fade_change),
        'u_matrix': new performance.UniformMatrix4f(context, locations.u_matrix),
        'u_label_plane_matrix': new performance.UniformMatrix4f(context, locations.u_label_plane_matrix),
        'u_coord_matrix': new performance.UniformMatrix4f(context, locations.u_coord_matrix),
        'u_is_text': new performance.Uniform1i(context, locations.u_is_text),
        'u_pitch_with_map': new performance.Uniform1i(context, locations.u_pitch_with_map),
        'u_texsize': new performance.Uniform2f(context, locations.u_texsize),
        'u_texsize_icon': new performance.Uniform2f(context, locations.u_texsize_icon),
        'u_texture': new performance.Uniform1i(context, locations.u_texture),
        'u_texture_icon': new performance.Uniform1i(context, locations.u_texture_icon),
        'u_gamma_scale': new performance.Uniform1f(context, locations.u_gamma_scale),
        'u_device_pixel_ratio': new performance.Uniform1f(context, locations.u_device_pixel_ratio),
        'u_is_halo': new performance.Uniform1i(context, locations.u_is_halo)
    };
};
var symbolIconUniformValues = function (functionType, size, rotateInShader, pitchWithMap, painter, matrix, labelPlaneMatrix, glCoordMatrix, isText, texSize) {
    var transform = painter.transform;
    return {
        'u_is_size_zoom_constant': +(functionType === 'constant' || functionType === 'source'),
        'u_is_size_feature_constant': +(functionType === 'constant' || functionType === 'camera'),
        'u_size_t': size ? size.uSizeT : 0,
        'u_size': size ? size.uSize : 0,
        'u_camera_to_center_distance': transform.cameraToCenterDistance,
        'u_pitch': transform.pitch / 360 * 2 * Math.PI,
        'u_rotate_symbol': +rotateInShader,
        'u_aspect_ratio': transform.width / transform.height,
        'u_fade_change': painter.options.fadeDuration ? painter.symbolFadeChange : 1,
        'u_matrix': matrix,
        'u_label_plane_matrix': labelPlaneMatrix,
        'u_coord_matrix': glCoordMatrix,
        'u_is_text': +isText,
        'u_pitch_with_map': +pitchWithMap,
        'u_texsize': texSize,
        'u_texture': 0
    };
};
var symbolSDFUniformValues = function (functionType, size, rotateInShader, pitchWithMap, painter, matrix, labelPlaneMatrix, glCoordMatrix, isText, texSize, isHalo) {
    var transform = painter.transform;
    return performance.extend(symbolIconUniformValues(functionType, size, rotateInShader, pitchWithMap, painter, matrix, labelPlaneMatrix, glCoordMatrix, isText, texSize), {
        'u_gamma_scale': pitchWithMap ? Math.cos(transform._pitch) * transform.cameraToCenterDistance : 1,
        'u_device_pixel_ratio': performance.browser.devicePixelRatio,
        'u_is_halo': +isHalo
    });
};
var symbolTextAndIconUniformValues = function (functionType, size, rotateInShader, pitchWithMap, painter, matrix, labelPlaneMatrix, glCoordMatrix, texSizeSDF, texSizeIcon) {
    return performance.extend(symbolSDFUniformValues(functionType, size, rotateInShader, pitchWithMap, painter, matrix, labelPlaneMatrix, glCoordMatrix, true, texSizeSDF, true), {
        'u_texsize_icon': texSizeIcon,
        'u_texture_icon': 1
    });
};

var backgroundUniforms = function (context, locations) {
    return {
        'u_matrix': new performance.UniformMatrix4f(context, locations.u_matrix),
        'u_opacity': new performance.Uniform1f(context, locations.u_opacity),
        'u_color': new performance.UniformColor(context, locations.u_color)
    };
};
var backgroundPatternUniforms = function (context, locations) {
    return {
        'u_matrix': new performance.UniformMatrix4f(context, locations.u_matrix),
        'u_opacity': new performance.Uniform1f(context, locations.u_opacity),
        'u_image': new performance.Uniform1i(context, locations.u_image),
        'u_pattern_tl_a': new performance.Uniform2f(context, locations.u_pattern_tl_a),
        'u_pattern_br_a': new performance.Uniform2f(context, locations.u_pattern_br_a),
        'u_pattern_tl_b': new performance.Uniform2f(context, locations.u_pattern_tl_b),
        'u_pattern_br_b': new performance.Uniform2f(context, locations.u_pattern_br_b),
        'u_texsize': new performance.Uniform2f(context, locations.u_texsize),
        'u_mix': new performance.Uniform1f(context, locations.u_mix),
        'u_pattern_size_a': new performance.Uniform2f(context, locations.u_pattern_size_a),
        'u_pattern_size_b': new performance.Uniform2f(context, locations.u_pattern_size_b),
        'u_scale_a': new performance.Uniform1f(context, locations.u_scale_a),
        'u_scale_b': new performance.Uniform1f(context, locations.u_scale_b),
        'u_pixel_coord_upper': new performance.Uniform2f(context, locations.u_pixel_coord_upper),
        'u_pixel_coord_lower': new performance.Uniform2f(context, locations.u_pixel_coord_lower),
        'u_tile_units_to_pixels': new performance.Uniform1f(context, locations.u_tile_units_to_pixels)
    };
};
var backgroundUniformValues = function (matrix, opacity, color) {
    return {
        'u_matrix': matrix,
        'u_opacity': opacity,
        'u_color': color
    };
};
var backgroundPatternUniformValues = function (matrix, opacity, painter, image, tile, crossfade) {
    return performance.extend(bgPatternUniformValues(image, crossfade, painter, tile), {
        'u_matrix': matrix,
        'u_opacity': opacity
    });
};

var programUniforms = {
    fillExtrusion: fillExtrusionUniforms,
    fillExtrusionPattern: fillExtrusionPatternUniforms,
    fill: fillUniforms,
    fillPattern: fillPatternUniforms,
    fillOutline: fillOutlineUniforms,
    fillOutlinePattern: fillOutlinePatternUniforms,
    circle: circleUniforms,
    collisionBox: collisionUniforms,
    collisionCircle: collisionCircleUniforms,
    debug: debugUniforms,
    clippingMask: clippingMaskUniforms,
    heatmap: heatmapUniforms,
    heatmapTexture: heatmapTextureUniforms,
    hillshade: hillshadeUniforms,
    hillshadePrepare: hillshadePrepareUniforms,
    line: lineUniforms,
    lineGradient: lineGradientUniforms,
    linePattern: linePatternUniforms,
    lineSDF: lineSDFUniforms,
    raster: rasterUniforms,
    symbolIcon: symbolIconUniforms,
    symbolSDF: symbolSDFUniforms,
    symbolTextAndIcon: symbolTextAndIconUniforms,
    background: backgroundUniforms,
    backgroundPattern: backgroundPatternUniforms
};

var quadTriangles;
function drawCollisionDebug(painter, sourceCache, layer, coords, translate, translateAnchor, isText) {
    var context = painter.context;
    var gl = context.gl;
    var program = painter.useProgram('collisionBox');
    var tileBatches = [];
    var circleCount = 0;
    var circleOffset = 0;
    for (var i = 0; i < coords.length; i++) {
        var coord = coords[i];
        var tile = sourceCache.getTile(coord);
        var bucket = tile.getBucket(layer);
        if (!bucket) {
            continue;
        }
        var posMatrix = coord.posMatrix;
        if (translate[0] !== 0 || translate[1] !== 0) {
            posMatrix = painter.translatePosMatrix(coord.posMatrix, tile, translate, translateAnchor);
        }
        var buffers = isText ? bucket.textCollisionBox : bucket.iconCollisionBox;
        var circleArray = bucket.collisionCircleArray;
        if (circleArray.length > 0) {
            var invTransform = performance.create();
            var transform = posMatrix;
            performance.mul(invTransform, bucket.placementInvProjMatrix, painter.transform.glCoordMatrix);
            performance.mul(invTransform, invTransform, bucket.placementViewportMatrix);
            tileBatches.push({
                circleArray: circleArray,
                circleOffset: circleOffset,
                transform: transform,
                invTransform: invTransform
            });
            circleCount += circleArray.length / 4;
            circleOffset = circleCount;
        }
        if (!buffers) {
            continue;
        }
        program.draw(context, gl.LINES, DepthMode.disabled, StencilMode.disabled, painter.colorModeForRenderPass(), CullFaceMode.disabled, collisionUniformValues(posMatrix, painter.transform, tile), layer.id, buffers.layoutVertexBuffer, buffers.indexBuffer, buffers.segments, null, painter.transform.zoom, null, null, buffers.collisionVertexBuffer);
    }
    if (!isText || !tileBatches.length) {
        return;
    }
    var circleProgram = painter.useProgram('collisionCircle');
    var vertexData = new performance.StructArrayLayout2f1f2i16();
    vertexData.resize(circleCount * 4);
    vertexData._trim();
    var vertexOffset = 0;
    for (var i$2 = 0, list = tileBatches; i$2 < list.length; i$2 += 1) {
        var batch = list[i$2];
        for (var i$1 = 0; i$1 < batch.circleArray.length / 4; i$1++) {
            var circleIdx = i$1 * 4;
            var x = batch.circleArray[circleIdx + 0];
            var y = batch.circleArray[circleIdx + 1];
            var radius = batch.circleArray[circleIdx + 2];
            var collision = batch.circleArray[circleIdx + 3];
            vertexData.emplace(vertexOffset++, x, y, radius, collision, 0);
            vertexData.emplace(vertexOffset++, x, y, radius, collision, 1);
            vertexData.emplace(vertexOffset++, x, y, radius, collision, 2);
            vertexData.emplace(vertexOffset++, x, y, radius, collision, 3);
        }
    }
    if (!quadTriangles || quadTriangles.length < circleCount * 2) {
        quadTriangles = createQuadTriangles(circleCount);
    }
    var indexBuffer = context.createIndexBuffer(quadTriangles, true);
    var vertexBuffer = context.createVertexBuffer(vertexData, performance.collisionCircleLayout.members, true);
    for (var i$3 = 0, list$1 = tileBatches; i$3 < list$1.length; i$3 += 1) {
        var batch$1 = list$1[i$3];
        var uniforms = collisionCircleUniformValues(batch$1.transform, batch$1.invTransform, painter.transform);
        circleProgram.draw(context, gl.TRIANGLES, DepthMode.disabled, StencilMode.disabled, painter.colorModeForRenderPass(), CullFaceMode.disabled, uniforms, layer.id, vertexBuffer, indexBuffer, performance.SegmentVector.simpleSegment(0, batch$1.circleOffset * 2, batch$1.circleArray.length, batch$1.circleArray.length / 2), null, painter.transform.zoom, null, null, null);
    }
    vertexBuffer.destroy();
    indexBuffer.destroy();
}
function createQuadTriangles(quadCount) {
    var triCount = quadCount * 2;
    var array = new performance.StructArrayLayout3ui6();
    array.resize(triCount);
    array._trim();
    for (var i = 0; i < triCount; i++) {
        var idx = i * 6;
        array.uint16[idx + 0] = i * 4 + 0;
        array.uint16[idx + 1] = i * 4 + 1;
        array.uint16[idx + 2] = i * 4 + 2;
        array.uint16[idx + 3] = i * 4 + 2;
        array.uint16[idx + 4] = i * 4 + 3;
        array.uint16[idx + 5] = i * 4 + 0;
    }
    return array;
}

var identityMat4 = performance.identity(new Float32Array(16));
function drawSymbols(painter, sourceCache, layer, coords, variableOffsets) {
    if (painter.renderPass !== 'translucent') {
        return;
    }
    var stencilMode = StencilMode.disabled;
    var colorMode = painter.colorModeForRenderPass();
    var variablePlacement = layer.layout.get('text-variable-anchor');
    if (variablePlacement) {
        updateVariableAnchors(coords, painter, layer, sourceCache, layer.layout.get('text-rotation-alignment'), layer.layout.get('text-pitch-alignment'), variableOffsets);
    }
    if (layer.paint.get('icon-opacity').constantOr(1) !== 0) {
        drawLayerSymbols(painter, sourceCache, layer, coords, false, layer.paint.get('icon-translate'), layer.paint.get('icon-translate-anchor'), layer.layout.get('icon-rotation-alignment'), layer.layout.get('icon-pitch-alignment'), layer.layout.get('icon-keep-upright'), stencilMode, colorMode);
    }
    if (layer.paint.get('text-opacity').constantOr(1) !== 0) {
        drawLayerSymbols(painter, sourceCache, layer, coords, true, layer.paint.get('text-translate'), layer.paint.get('text-translate-anchor'), layer.layout.get('text-rotation-alignment'), layer.layout.get('text-pitch-alignment'), layer.layout.get('text-keep-upright'), stencilMode, colorMode);
    }
    if (sourceCache.map.showCollisionBoxes) {
        drawCollisionDebug(painter, sourceCache, layer, coords, layer.paint.get('text-translate'), layer.paint.get('text-translate-anchor'), true);
        drawCollisionDebug(painter, sourceCache, layer, coords, layer.paint.get('icon-translate'), layer.paint.get('icon-translate-anchor'), false);
    }
}
function calculateVariableRenderShift(anchor, width, height, textOffset, textBoxScale, renderTextSize) {
    var ref = performance.getAnchorAlignment(anchor);
    var horizontalAlign = ref.horizontalAlign;
    var verticalAlign = ref.verticalAlign;
    var shiftX = -(horizontalAlign - 0.5) * width;
    var shiftY = -(verticalAlign - 0.5) * height;
    var variableOffset = performance.evaluateVariableOffset(anchor, textOffset);
    return new performance.Point((shiftX / textBoxScale + variableOffset[0]) * renderTextSize, (shiftY / textBoxScale + variableOffset[1]) * renderTextSize);
}
function updateVariableAnchors(coords, painter, layer, sourceCache, rotationAlignment, pitchAlignment, variableOffsets) {
    var tr = painter.transform;
    var rotateWithMap = rotationAlignment === 'map';
    var pitchWithMap = pitchAlignment === 'map';
    for (var i = 0, list = coords; i < list.length; i += 1) {
        var coord = list[i];
        var tile = sourceCache.getTile(coord);
        var bucket = tile.getBucket(layer);
        if (!bucket || !bucket.text || !bucket.text.segments.get().length) {
            continue;
        }
        var sizeData = bucket.textSizeData;
        var size = performance.evaluateSizeForZoom(sizeData, tr.zoom);
        var pixelToTileScale = pixelsToTileUnits(tile, 1, painter.transform.zoom);
        var labelPlaneMatrix = getLabelPlaneMatrix(coord.posMatrix, pitchWithMap, rotateWithMap, painter.transform, pixelToTileScale);
        var updateTextFitIcon = layer.layout.get('icon-text-fit') !== 'none' && bucket.hasIconData();
        if (size) {
            var tileScale = Math.pow(2, tr.zoom - tile.tileID.overscaledZ);
            updateVariableAnchorsForBucket(bucket, rotateWithMap, pitchWithMap, variableOffsets, performance.symbolSize, tr, labelPlaneMatrix, coord.posMatrix, tileScale, size, updateTextFitIcon);
        }
    }
}
function updateVariableAnchorsForBucket(bucket, rotateWithMap, pitchWithMap, variableOffsets, symbolSize, transform, labelPlaneMatrix, posMatrix, tileScale, size, updateTextFitIcon) {
    var placedSymbols = bucket.text.placedSymbolArray;
    var dynamicTextLayoutVertexArray = bucket.text.dynamicLayoutVertexArray;
    var dynamicIconLayoutVertexArray = bucket.icon.dynamicLayoutVertexArray;
    var placedTextShifts = {};
    dynamicTextLayoutVertexArray.clear();
    for (var s = 0; s < placedSymbols.length; s++) {
        var symbol = placedSymbols.get(s);
        var skipOrientation = bucket.allowVerticalPlacement && !symbol.placedOrientation;
        var variableOffset = !symbol.hidden && symbol.crossTileID && !skipOrientation ? variableOffsets[symbol.crossTileID] : null;
        if (!variableOffset) {
            hideGlyphs(symbol.numGlyphs, dynamicTextLayoutVertexArray);
        } else {
            var tileAnchor = new performance.Point(symbol.anchorX, symbol.anchorY);
            var projectedAnchor = project(tileAnchor, pitchWithMap ? posMatrix : labelPlaneMatrix);
            var perspectiveRatio = getPerspectiveRatio(transform.cameraToCenterDistance, projectedAnchor.signedDistanceFromCamera);
            var renderTextSize = symbolSize.evaluateSizeForFeature(bucket.textSizeData, size, symbol) * perspectiveRatio / performance.ONE_EM;
            if (pitchWithMap) {
                renderTextSize *= bucket.tilePixelRatio / tileScale;
            }
            var width = variableOffset.width;
            var height = variableOffset.height;
            var anchor = variableOffset.anchor;
            var textOffset = variableOffset.textOffset;
            var textBoxScale = variableOffset.textBoxScale;
            var shift = calculateVariableRenderShift(anchor, width, height, textOffset, textBoxScale, renderTextSize);
            var shiftedAnchor = pitchWithMap ? project(tileAnchor.add(shift), labelPlaneMatrix).point : projectedAnchor.point.add(rotateWithMap ? shift.rotate(-transform.angle) : shift);
            var angle = bucket.allowVerticalPlacement && symbol.placedOrientation === performance.WritingMode.vertical ? Math.PI / 2 : 0;
            for (var g = 0; g < symbol.numGlyphs; g++) {
                performance.addDynamicAttributes(dynamicTextLayoutVertexArray, shiftedAnchor, angle);
            }
            if (updateTextFitIcon && symbol.associatedIconIndex >= 0) {
                placedTextShifts[symbol.associatedIconIndex] = {
                    shiftedAnchor: shiftedAnchor,
                    angle: angle
                };
            }
        }
    }
    if (updateTextFitIcon) {
        dynamicIconLayoutVertexArray.clear();
        var placedIcons = bucket.icon.placedSymbolArray;
        for (var i = 0; i < placedIcons.length; i++) {
            var placedIcon = placedIcons.get(i);
            if (placedIcon.hidden) {
                hideGlyphs(placedIcon.numGlyphs, dynamicIconLayoutVertexArray);
            } else {
                var shift$1 = placedTextShifts[i];
                if (!shift$1) {
                    hideGlyphs(placedIcon.numGlyphs, dynamicIconLayoutVertexArray);
                } else {
                    for (var g$1 = 0; g$1 < placedIcon.numGlyphs; g$1++) {
                        performance.addDynamicAttributes(dynamicIconLayoutVertexArray, shift$1.shiftedAnchor, shift$1.angle);
                    }
                }
            }
        }
        bucket.icon.dynamicLayoutVertexBuffer.updateData(dynamicIconLayoutVertexArray);
    }
    bucket.text.dynamicLayoutVertexBuffer.updateData(dynamicTextLayoutVertexArray);
}
function getSymbolProgramName(isSDF, isText, bucket) {
    if (bucket.iconsInText && isText) {
        return 'symbolTextAndIcon';
    } else if (isSDF) {
        return 'symbolSDF';
    } else {
        return 'symbolIcon';
    }
}
function drawLayerSymbols(painter, sourceCache, layer, coords, isText, translate, translateAnchor, rotationAlignment, pitchAlignment, keepUpright, stencilMode, colorMode) {
    var context = painter.context;
    var gl = context.gl;
    var tr = painter.transform;
    var rotateWithMap = rotationAlignment === 'map';
    var pitchWithMap = pitchAlignment === 'map';
    var alongLine = rotateWithMap && layer.layout.get('symbol-placement') !== 'point';
    var rotateInShader = rotateWithMap && !pitchWithMap && !alongLine;
    var hasSortKey = layer.layout.get('symbol-sort-key').constantOr(1) !== undefined;
    var sortFeaturesByKey = false;
    var depthMode = painter.depthModeForSublayer(0, DepthMode.ReadOnly);
    var variablePlacement = layer.layout.get('text-variable-anchor');
    var tileRenderState = [];
    for (var i$1 = 0, list$1 = coords; i$1 < list$1.length; i$1 += 1) {
        var coord = list$1[i$1];
        var tile = sourceCache.getTile(coord);
        var bucket = tile.getBucket(layer);
        if (!bucket) {
            continue;
        }
        var buffers = isText ? bucket.text : bucket.icon;
        if (!buffers || !buffers.segments.get().length) {
            continue;
        }
        var programConfiguration = buffers.programConfigurations.get(layer.id);
        var isSDF = isText || bucket.sdfIcons;
        var sizeData = isText ? bucket.textSizeData : bucket.iconSizeData;
        var transformed = pitchWithMap || tr.pitch !== 0;
        var program = painter.useProgram(getSymbolProgramName(isSDF, isText, bucket), programConfiguration);
        var size = performance.evaluateSizeForZoom(sizeData, tr.zoom);
        var texSize = void 0;
        var texSizeIcon = [
            0,
            0
        ];
        var atlasTexture = void 0;
        var atlasInterpolation = void 0;
        var atlasTextureIcon = null;
        var atlasInterpolationIcon = void 0;
        if (isText) {
            atlasTexture = tile.glyphAtlasTexture;
            atlasInterpolation = gl.LINEAR;
            texSize = tile.glyphAtlasTexture.size;
            if (bucket.iconsInText) {
                texSizeIcon = tile.imageAtlasTexture.size;
                atlasTextureIcon = tile.imageAtlasTexture;
                var zoomDependentSize = sizeData.kind === 'composite' || sizeData.kind === 'camera';
                atlasInterpolationIcon = transformed || painter.options.rotating || painter.options.zooming || zoomDependentSize ? gl.LINEAR : gl.NEAREST;
            }
        } else {
            var iconScaled = layer.layout.get('icon-size').constantOr(0) !== 1 || bucket.iconsNeedLinear;
            atlasTexture = tile.imageAtlasTexture;
            atlasInterpolation = isSDF || painter.options.rotating || painter.options.zooming || iconScaled || transformed ? gl.LINEAR : gl.NEAREST;
            texSize = tile.imageAtlasTexture.size;
        }
        var s = pixelsToTileUnits(tile, 1, painter.transform.zoom);
        var labelPlaneMatrix = getLabelPlaneMatrix(coord.posMatrix, pitchWithMap, rotateWithMap, painter.transform, s);
        var glCoordMatrix = getGlCoordMatrix(coord.posMatrix, pitchWithMap, rotateWithMap, painter.transform, s);
        var hasVariableAnchors = variablePlacement && bucket.hasTextData();
        var updateTextFitIcon = layer.layout.get('icon-text-fit') !== 'none' && hasVariableAnchors && bucket.hasIconData();
        if (alongLine) {
            updateLineLabels(bucket, coord.posMatrix, painter, isText, labelPlaneMatrix, glCoordMatrix, pitchWithMap, keepUpright);
        }
        var matrix = painter.translatePosMatrix(coord.posMatrix, tile, translate, translateAnchor), uLabelPlaneMatrix = alongLine || isText && variablePlacement || updateTextFitIcon ? identityMat4 : labelPlaneMatrix, uglCoordMatrix = painter.translatePosMatrix(glCoordMatrix, tile, translate, translateAnchor, true);
        var hasHalo = isSDF && layer.paint.get(isText ? 'text-halo-width' : 'icon-halo-width').constantOr(1) !== 0;
        var uniformValues = void 0;
        if (isSDF) {
            if (!bucket.iconsInText) {
                uniformValues = symbolSDFUniformValues(sizeData.kind, size, rotateInShader, pitchWithMap, painter, matrix, uLabelPlaneMatrix, uglCoordMatrix, isText, texSize, true);
            } else {
                uniformValues = symbolTextAndIconUniformValues(sizeData.kind, size, rotateInShader, pitchWithMap, painter, matrix, uLabelPlaneMatrix, uglCoordMatrix, texSize, texSizeIcon);
            }
        } else {
            uniformValues = symbolIconUniformValues(sizeData.kind, size, rotateInShader, pitchWithMap, painter, matrix, uLabelPlaneMatrix, uglCoordMatrix, isText, texSize);
        }
        var state = {
            program: program,
            buffers: buffers,
            uniformValues: uniformValues,
            atlasTexture: atlasTexture,
            atlasTextureIcon: atlasTextureIcon,
            atlasInterpolation: atlasInterpolation,
            atlasInterpolationIcon: atlasInterpolationIcon,
            isSDF: isSDF,
            hasHalo: hasHalo
        };
        if (hasSortKey && bucket.canOverlap) {
            sortFeaturesByKey = true;
            var oldSegments = buffers.segments.get();
            for (var i = 0, list = oldSegments; i < list.length; i += 1) {
                var segment = list[i];
                tileRenderState.push({
                    segments: new performance.SegmentVector([segment]),
                    sortKey: segment.sortKey,
                    state: state
                });
            }
        } else {
            tileRenderState.push({
                segments: buffers.segments,
                sortKey: 0,
                state: state
            });
        }
    }
    if (sortFeaturesByKey) {
        tileRenderState.sort(function (a, b) {
            return a.sortKey - b.sortKey;
        });
    }
    for (var i$2 = 0, list$2 = tileRenderState; i$2 < list$2.length; i$2 += 1) {
        var segmentState = list$2[i$2];
        var state$1 = segmentState.state;
        context.activeTexture.set(gl.TEXTURE0);
        state$1.atlasTexture.bind(state$1.atlasInterpolation, gl.CLAMP_TO_EDGE);
        if (state$1.atlasTextureIcon) {
            context.activeTexture.set(gl.TEXTURE1);
            if (state$1.atlasTextureIcon) {
                state$1.atlasTextureIcon.bind(state$1.atlasInterpolationIcon, gl.CLAMP_TO_EDGE);
            }
        }
        if (state$1.isSDF) {
            var uniformValues$1 = state$1.uniformValues;
            if (state$1.hasHalo) {
                uniformValues$1['u_is_halo'] = 1;
                drawSymbolElements(state$1.buffers, segmentState.segments, layer, painter, state$1.program, depthMode, stencilMode, colorMode, uniformValues$1);
            }
            uniformValues$1['u_is_halo'] = 0;
        }
        drawSymbolElements(state$1.buffers, segmentState.segments, layer, painter, state$1.program, depthMode, stencilMode, colorMode, state$1.uniformValues);
    }
}
function drawSymbolElements(buffers, segments, layer, painter, program, depthMode, stencilMode, colorMode, uniformValues) {
    var context = painter.context;
    var gl = context.gl;
    program.draw(context, gl.TRIANGLES, depthMode, stencilMode, colorMode, CullFaceMode.disabled, uniformValues, layer.id, buffers.layoutVertexBuffer, buffers.indexBuffer, segments, layer.paint, painter.transform.zoom, buffers.programConfigurations.get(layer.id), buffers.dynamicLayoutVertexBuffer, buffers.opacityVertexBuffer);
}

function drawCircles(painter, sourceCache, layer, coords) {
    if (painter.renderPass !== 'translucent') {
        return;
    }
    var opacity = layer.paint.get('circle-opacity');
    var strokeWidth = layer.paint.get('circle-stroke-width');
    var strokeOpacity = layer.paint.get('circle-stroke-opacity');
    var sortFeaturesByKey = layer.layout.get('circle-sort-key').constantOr(1) !== undefined;
    if (opacity.constantOr(1) === 0 && (strokeWidth.constantOr(1) === 0 || strokeOpacity.constantOr(1) === 0)) {
        return;
    }
    var context = painter.context;
    var gl = context.gl;
    var depthMode = painter.depthModeForSublayer(0, DepthMode.ReadOnly);
    var stencilMode = StencilMode.disabled;
    var colorMode = painter.colorModeForRenderPass();
    var segmentsRenderStates = [];
    for (var i = 0; i < coords.length; i++) {
        var coord = coords[i];
        var tile = sourceCache.getTile(coord);
        var bucket = tile.getBucket(layer);
        if (!bucket) {
            continue;
        }
        var programConfiguration = bucket.programConfigurations.get(layer.id);
        var program = painter.useProgram('circle', programConfiguration);
        var layoutVertexBuffer = bucket.layoutVertexBuffer;
        var indexBuffer = bucket.indexBuffer;
        var uniformValues = circleUniformValues(painter, coord, tile, layer);
        var state = {
            programConfiguration: programConfiguration,
            program: program,
            layoutVertexBuffer: layoutVertexBuffer,
            indexBuffer: indexBuffer,
            uniformValues: uniformValues
        };
        if (sortFeaturesByKey) {
            var oldSegments = bucket.segments.get();
            for (var i$1 = 0, list = oldSegments; i$1 < list.length; i$1 += 1) {
                var segment = list[i$1];
                segmentsRenderStates.push({
                    segments: new performance.SegmentVector([segment]),
                    sortKey: segment.sortKey,
                    state: state
                });
            }
        } else {
            segmentsRenderStates.push({
                segments: bucket.segments,
                sortKey: 0,
                state: state
            });
        }
    }
    if (sortFeaturesByKey) {
        segmentsRenderStates.sort(function (a, b) {
            return a.sortKey - b.sortKey;
        });
    }
    for (var i$2 = 0, list$1 = segmentsRenderStates; i$2 < list$1.length; i$2 += 1) {
        var segmentsState = list$1[i$2];
        var ref = segmentsState.state;
        var programConfiguration$1 = ref.programConfiguration;
        var program$1 = ref.program;
        var layoutVertexBuffer$1 = ref.layoutVertexBuffer;
        var indexBuffer$1 = ref.indexBuffer;
        var uniformValues$1 = ref.uniformValues;
        var segments = segmentsState.segments;
        program$1.draw(context, gl.TRIANGLES, depthMode, stencilMode, colorMode, CullFaceMode.disabled, uniformValues$1, layer.id, layoutVertexBuffer$1, indexBuffer$1, segments, layer.paint, painter.transform.zoom, programConfiguration$1);
    }
}

function drawHeatmap(painter, sourceCache, layer, coords) {
    if (layer.paint.get('heatmap-opacity') === 0) {
        return;
    }
    if (painter.renderPass === 'offscreen') {
        var context = painter.context;
        var gl = context.gl;
        var stencilMode = StencilMode.disabled;
        var colorMode = new ColorMode([
            gl.ONE,
            gl.ONE
        ], performance.Color.transparent, [
            true,
            true,
            true,
            true
        ]);
        bindFramebuffer(context, painter, layer);
        context.clear({ color: performance.Color.transparent });
        for (var i = 0; i < coords.length; i++) {
            var coord = coords[i];
            if (sourceCache.hasRenderableParent(coord)) {
                continue;
            }
            var tile = sourceCache.getTile(coord);
            var bucket = tile.getBucket(layer);
            if (!bucket) {
                continue;
            }
            var programConfiguration = bucket.programConfigurations.get(layer.id);
            var program = painter.useProgram('heatmap', programConfiguration);
            var ref = painter.transform;
            var zoom = ref.zoom;
            program.draw(context, gl.TRIANGLES, DepthMode.disabled, stencilMode, colorMode, CullFaceMode.disabled, heatmapUniformValues(coord.posMatrix, tile, zoom, layer.paint.get('heatmap-intensity')), layer.id, bucket.layoutVertexBuffer, bucket.indexBuffer, bucket.segments, layer.paint, painter.transform.zoom, programConfiguration);
        }
        context.viewport.set([
            0,
            0,
            painter.width,
            painter.height
        ]);
    } else if (painter.renderPass === 'translucent') {
        painter.context.setColorMode(painter.colorModeForRenderPass());
        renderTextureToMap(painter, layer);
    }
}
function bindFramebuffer(context, painter, layer) {
    var gl = context.gl;
    context.activeTexture.set(gl.TEXTURE1);
    context.viewport.set([
        0,
        0,
        painter.width / 4,
        painter.height / 4
    ]);
    var fbo = layer.heatmapFbo;
    if (!fbo) {
        var texture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        fbo = layer.heatmapFbo = context.createFramebuffer(painter.width / 4, painter.height / 4, false);
        bindTextureToFramebuffer(context, painter, texture, fbo);
    } else {
        gl.bindTexture(gl.TEXTURE_2D, fbo.colorAttachment.get());
        context.bindFramebuffer.set(fbo.framebuffer);
    }
}
function bindTextureToFramebuffer(context, painter, texture, fbo) {
    var gl = context.gl;
    var internalFormat = context.extRenderToTextureHalfFloat ? context.extTextureHalfFloat.HALF_FLOAT_OES : gl.UNSIGNED_BYTE;
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, painter.width / 4, painter.height / 4, 0, gl.RGBA, internalFormat, null);
    fbo.colorAttachment.set(texture);
}
function renderTextureToMap(painter, layer) {
    var context = painter.context;
    var gl = context.gl;
    var fbo = layer.heatmapFbo;
    if (!fbo) {
        return;
    }
    context.activeTexture.set(gl.TEXTURE0);
    gl.bindTexture(gl.TEXTURE_2D, fbo.colorAttachment.get());
    context.activeTexture.set(gl.TEXTURE1);
    var colorRampTexture = layer.colorRampTexture;
    if (!colorRampTexture) {
        colorRampTexture = layer.colorRampTexture = new performance.Texture(context, layer.colorRamp, gl.RGBA);
    }
    colorRampTexture.bind(gl.LINEAR, gl.CLAMP_TO_EDGE);
    painter.useProgram('heatmapTexture').draw(context, gl.TRIANGLES, DepthMode.disabled, StencilMode.disabled, painter.colorModeForRenderPass(), CullFaceMode.disabled, heatmapTextureUniformValues(painter, layer, 0, 1), layer.id, painter.viewportBuffer, painter.quadTriangleIndexBuffer, painter.viewportSegments, layer.paint, painter.transform.zoom);
}

function drawLine(painter, sourceCache, layer, coords) {
    if (painter.renderPass !== 'translucent') {
        return;
    }
    var opacity = layer.paint.get('line-opacity');
    var width = layer.paint.get('line-width');
    if (opacity.constantOr(1) === 0 || width.constantOr(1) === 0) {
        return;
    }
    var depthMode = painter.depthModeForSublayer(0, DepthMode.ReadOnly);
    var colorMode = painter.colorModeForRenderPass();
    var dasharray = layer.paint.get('line-dasharray');
    var patternProperty = layer.paint.get('line-pattern');
    var image = patternProperty.constantOr(1);
    var gradient = layer.paint.get('line-gradient');
    var crossfade = layer.getCrossfadeParameters();
    var programId = image ? 'linePattern' : dasharray ? 'lineSDF' : gradient ? 'lineGradient' : 'line';
    var context = painter.context;
    var gl = context.gl;
    var firstTile = true;
    for (var i = 0, list = coords; i < list.length; i += 1) {
        var coord = list[i];
        var tile = sourceCache.getTile(coord);
        if (image && !tile.patternsLoaded()) {
            continue;
        }
        var bucket = tile.getBucket(layer);
        if (!bucket) {
            continue;
        }
        var programConfiguration = bucket.programConfigurations.get(layer.id);
        var prevProgram = painter.context.program.get();
        var program = painter.useProgram(programId, programConfiguration);
        var programChanged = firstTile || program.program !== prevProgram;
        var constantPattern = patternProperty.constantOr(null);
        if (constantPattern && tile.imageAtlas) {
            var atlas = tile.imageAtlas;
            var posTo = atlas.patternPositions[constantPattern.to.toString()];
            var posFrom = atlas.patternPositions[constantPattern.from.toString()];
            if (posTo && posFrom) {
                programConfiguration.setConstantPatternPositions(posTo, posFrom);
            }
        }
        var uniformValues = image ? linePatternUniformValues(painter, tile, layer, crossfade) : dasharray ? lineSDFUniformValues(painter, tile, layer, dasharray, crossfade) : gradient ? lineGradientUniformValues(painter, tile, layer, bucket.lineClipsArray.length) : lineUniformValues(painter, tile, layer);
        if (image) {
            context.activeTexture.set(gl.TEXTURE0);
            tile.imageAtlasTexture.bind(gl.LINEAR, gl.CLAMP_TO_EDGE);
            programConfiguration.updatePaintBuffers(crossfade);
        } else if (dasharray && (programChanged || painter.lineAtlas.dirty)) {
            context.activeTexture.set(gl.TEXTURE0);
            painter.lineAtlas.bind(context);
        } else if (gradient) {
            var layerGradient = bucket.gradients[layer.id];
            var gradientTexture = layerGradient.texture;
            if (layer.gradientVersion !== layerGradient.version) {
                var textureResolution = 256;
                if (layer.stepInterpolant) {
                    var sourceMaxZoom = sourceCache.getSource().maxzoom;
                    var potentialOverzoom = coord.canonical.z === sourceMaxZoom ? Math.ceil(1 << painter.transform.maxZoom - coord.canonical.z) : 1;
                    var lineLength = bucket.maxLineLength / performance.EXTENT;
                    var maxTilePixelSize = 1024;
                    var maxTextureCoverage = lineLength * maxTilePixelSize * potentialOverzoom;
                    textureResolution = performance.clamp(performance.nextPowerOfTwo(maxTextureCoverage), 256, context.maxTextureSize);
                }
                layerGradient.gradient = performance.renderColorRamp({
                    expression: layer.gradientExpression(),
                    evaluationKey: 'lineProgress',
                    resolution: textureResolution,
                    image: layerGradient.gradient || undefined,
                    clips: bucket.lineClipsArray
                });
                if (layerGradient.texture) {
                    layerGradient.texture.update(layerGradient.gradient);
                } else {
                    layerGradient.texture = new performance.Texture(context, layerGradient.gradient, gl.RGBA);
                }
                layerGradient.version = layer.gradientVersion;
                gradientTexture = layerGradient.texture;
            }
            context.activeTexture.set(gl.TEXTURE0);
            gradientTexture.bind(layer.stepInterpolant ? gl.NEAREST : gl.LINEAR, gl.CLAMP_TO_EDGE);
        }
        program.draw(context, gl.TRIANGLES, depthMode, painter.stencilModeForClipping(coord), colorMode, CullFaceMode.disabled, uniformValues, layer.id, bucket.layoutVertexBuffer, bucket.indexBuffer, bucket.segments, layer.paint, painter.transform.zoom, programConfiguration, bucket.layoutVertexBuffer2);
        firstTile = false;
    }
}

function drawFill(painter, sourceCache, layer, coords) {
    var color = layer.paint.get('fill-color');
    var opacity = layer.paint.get('fill-opacity');
    if (opacity.constantOr(1) === 0) {
        return;
    }
    var colorMode = painter.colorModeForRenderPass();
    var pattern = layer.paint.get('fill-pattern');
    var pass = painter.opaquePassEnabledForLayer() && (!pattern.constantOr(1) && color.constantOr(performance.Color.transparent).a === 1 && opacity.constantOr(0) === 1) ? 'opaque' : 'translucent';
    if (painter.renderPass === pass) {
        var depthMode = painter.depthModeForSublayer(1, painter.renderPass === 'opaque' ? DepthMode.ReadWrite : DepthMode.ReadOnly);
        drawFillTiles(painter, sourceCache, layer, coords, depthMode, colorMode, false);
    }
    if (painter.renderPass === 'translucent' && layer.paint.get('fill-antialias')) {
        var depthMode$1 = painter.depthModeForSublayer(layer.getPaintProperty('fill-outline-color') ? 2 : 0, DepthMode.ReadOnly);
        drawFillTiles(painter, sourceCache, layer, coords, depthMode$1, colorMode, true);
    }
}
function drawFillTiles(painter, sourceCache, layer, coords, depthMode, colorMode, isOutline) {
    var gl = painter.context.gl;
    var patternProperty = layer.paint.get('fill-pattern');
    var image = patternProperty && patternProperty.constantOr(1);
    var crossfade = layer.getCrossfadeParameters();
    var drawMode, programName, uniformValues, indexBuffer, segments;
    if (!isOutline) {
        programName = image ? 'fillPattern' : 'fill';
        drawMode = gl.TRIANGLES;
    } else {
        programName = image && !layer.getPaintProperty('fill-outline-color') ? 'fillOutlinePattern' : 'fillOutline';
        drawMode = gl.LINES;
    }
    for (var i = 0, list = coords; i < list.length; i += 1) {
        var coord = list[i];
        var tile = sourceCache.getTile(coord);
        if (image && !tile.patternsLoaded()) {
            continue;
        }
        var bucket = tile.getBucket(layer);
        if (!bucket) {
            continue;
        }
        var programConfiguration = bucket.programConfigurations.get(layer.id);
        var program = painter.useProgram(programName, programConfiguration);
        if (image) {
            painter.context.activeTexture.set(gl.TEXTURE0);
            tile.imageAtlasTexture.bind(gl.LINEAR, gl.CLAMP_TO_EDGE);
            programConfiguration.updatePaintBuffers(crossfade);
        }
        var constantPattern = patternProperty.constantOr(null);
        if (constantPattern && tile.imageAtlas) {
            var atlas = tile.imageAtlas;
            var posTo = atlas.patternPositions[constantPattern.to.toString()];
            var posFrom = atlas.patternPositions[constantPattern.from.toString()];
            if (posTo && posFrom) {
                programConfiguration.setConstantPatternPositions(posTo, posFrom);
            }
        }
        var tileMatrix = painter.translatePosMatrix(coord.posMatrix, tile, layer.paint.get('fill-translate'), layer.paint.get('fill-translate-anchor'));
        if (!isOutline) {
            indexBuffer = bucket.indexBuffer;
            segments = bucket.segments;
            uniformValues = image ? fillPatternUniformValues(tileMatrix, painter, crossfade, tile) : fillUniformValues(tileMatrix);
        } else {
            indexBuffer = bucket.indexBuffer2;
            segments = bucket.segments2;
            var drawingBufferSize = [
                gl.drawingBufferWidth,
                gl.drawingBufferHeight
            ];
            uniformValues = programName === 'fillOutlinePattern' && image ? fillOutlinePatternUniformValues(tileMatrix, painter, crossfade, tile, drawingBufferSize) : fillOutlineUniformValues(tileMatrix, drawingBufferSize);
        }
        program.draw(painter.context, drawMode, depthMode, painter.stencilModeForClipping(coord), colorMode, CullFaceMode.disabled, uniformValues, layer.id, bucket.layoutVertexBuffer, indexBuffer, segments, layer.paint, painter.transform.zoom, programConfiguration);
    }
}

function draw(painter, source, layer, coords) {
    var opacity = layer.paint.get('fill-extrusion-opacity');
    if (opacity === 0) {
        return;
    }
    if (painter.renderPass === 'translucent') {
        var depthMode = new DepthMode(painter.context.gl.LEQUAL, DepthMode.ReadWrite, painter.depthRangeFor3D);
        if (opacity === 1 && !layer.paint.get('fill-extrusion-pattern').constantOr(1)) {
            var colorMode = painter.colorModeForRenderPass();
            drawExtrusionTiles(painter, source, layer, coords, depthMode, StencilMode.disabled, colorMode);
        } else {
            drawExtrusionTiles(painter, source, layer, coords, depthMode, StencilMode.disabled, ColorMode.disabled);
            drawExtrusionTiles(painter, source, layer, coords, depthMode, painter.stencilModeFor3D(), painter.colorModeForRenderPass());
        }
    }
}
function drawExtrusionTiles(painter, source, layer, coords, depthMode, stencilMode, colorMode) {
    var context = painter.context;
    var gl = context.gl;
    var patternProperty = layer.paint.get('fill-extrusion-pattern');
    var image = patternProperty.constantOr(1);
    var crossfade = layer.getCrossfadeParameters();
    var opacity = layer.paint.get('fill-extrusion-opacity');
    for (var i = 0, list = coords; i < list.length; i += 1) {
        var coord = list[i];
        var tile = source.getTile(coord);
        var bucket = tile.getBucket(layer);
        if (!bucket) {
            continue;
        }
        var programConfiguration = bucket.programConfigurations.get(layer.id);
        var program = painter.useProgram(image ? 'fillExtrusionPattern' : 'fillExtrusion', programConfiguration);
        if (image) {
            painter.context.activeTexture.set(gl.TEXTURE0);
            tile.imageAtlasTexture.bind(gl.LINEAR, gl.CLAMP_TO_EDGE);
            programConfiguration.updatePaintBuffers(crossfade);
        }
        var constantPattern = patternProperty.constantOr(null);
        if (constantPattern && tile.imageAtlas) {
            var atlas = tile.imageAtlas;
            var posTo = atlas.patternPositions[constantPattern.to.toString()];
            var posFrom = atlas.patternPositions[constantPattern.from.toString()];
            if (posTo && posFrom) {
                programConfiguration.setConstantPatternPositions(posTo, posFrom);
            }
        }
        var matrix = painter.translatePosMatrix(coord.posMatrix, tile, layer.paint.get('fill-extrusion-translate'), layer.paint.get('fill-extrusion-translate-anchor'));
        var shouldUseVerticalGradient = layer.paint.get('fill-extrusion-vertical-gradient');
        var uniformValues = image ? fillExtrusionPatternUniformValues(matrix, painter, shouldUseVerticalGradient, opacity, coord, crossfade, tile) : fillExtrusionUniformValues(matrix, painter, shouldUseVerticalGradient, opacity);
        program.draw(context, context.gl.TRIANGLES, depthMode, stencilMode, colorMode, CullFaceMode.backCCW, uniformValues, layer.id, bucket.layoutVertexBuffer, bucket.indexBuffer, bucket.segments, layer.paint, painter.transform.zoom, programConfiguration);
    }
}

function drawHillshade(painter, sourceCache, layer, tileIDs) {
    if (painter.renderPass !== 'offscreen' && painter.renderPass !== 'translucent') {
        return;
    }
    var context = painter.context;
    var depthMode = painter.depthModeForSublayer(0, DepthMode.ReadOnly);
    var colorMode = painter.colorModeForRenderPass();
    var ref = painter.renderPass === 'translucent' ? painter.stencilConfigForOverlap(tileIDs) : [
        {},
        tileIDs
    ];
    var stencilModes = ref[0];
    var coords = ref[1];
    for (var i = 0, list = coords; i < list.length; i += 1) {
        var coord = list[i];
        var tile = sourceCache.getTile(coord);
        if (tile.needsHillshadePrepare && painter.renderPass === 'offscreen') {
            prepareHillshade(painter, tile, layer, depthMode, StencilMode.disabled, colorMode);
        } else if (painter.renderPass === 'translucent') {
            renderHillshade(painter, tile, layer, depthMode, stencilModes[coord.overscaledZ], colorMode);
        }
    }
    context.viewport.set([
        0,
        0,
        painter.width,
        painter.height
    ]);
}
function renderHillshade(painter, tile, layer, depthMode, stencilMode, colorMode) {
    var context = painter.context;
    var gl = context.gl;
    var fbo = tile.fbo;
    if (!fbo) {
        return;
    }
    var program = painter.useProgram('hillshade');
    context.activeTexture.set(gl.TEXTURE0);
    gl.bindTexture(gl.TEXTURE_2D, fbo.colorAttachment.get());
    var uniformValues = hillshadeUniformValues(painter, tile, layer);
    program.draw(context, gl.TRIANGLES, depthMode, stencilMode, colorMode, CullFaceMode.disabled, uniformValues, layer.id, painter.rasterBoundsBuffer, painter.quadTriangleIndexBuffer, painter.rasterBoundsSegments);
}
function prepareHillshade(painter, tile, layer, depthMode, stencilMode, colorMode) {
    var context = painter.context;
    var gl = context.gl;
    var dem = tile.dem;
    if (dem && dem.data) {
        var tileSize = dem.dim;
        var textureStride = dem.stride;
        var pixelData = dem.getPixels();
        context.activeTexture.set(gl.TEXTURE1);
        context.pixelStoreUnpackPremultiplyAlpha.set(false);
        tile.demTexture = tile.demTexture || painter.getTileTexture(textureStride);
        if (tile.demTexture) {
            var demTexture = tile.demTexture;
            demTexture.update(pixelData, { premultiply: false });
            demTexture.bind(gl.NEAREST, gl.CLAMP_TO_EDGE);
        } else {
            tile.demTexture = new performance.Texture(context, pixelData, gl.RGBA, { premultiply: false });
            tile.demTexture.bind(gl.NEAREST, gl.CLAMP_TO_EDGE);
        }
        context.activeTexture.set(gl.TEXTURE0);
        var fbo = tile.fbo;
        if (!fbo) {
            var renderTexture = new performance.Texture(context, {
                width: tileSize,
                height: tileSize,
                data: null
            }, gl.RGBA);
            renderTexture.bind(gl.LINEAR, gl.CLAMP_TO_EDGE);
            fbo = tile.fbo = context.createFramebuffer(tileSize, tileSize, true);
            fbo.colorAttachment.set(renderTexture.texture);
        }
        context.bindFramebuffer.set(fbo.framebuffer);
        context.viewport.set([
            0,
            0,
            tileSize,
            tileSize
        ]);
        painter.useProgram('hillshadePrepare').draw(context, gl.TRIANGLES, depthMode, stencilMode, colorMode, CullFaceMode.disabled, hillshadeUniformPrepareValues(tile.tileID, dem), layer.id, painter.rasterBoundsBuffer, painter.quadTriangleIndexBuffer, painter.rasterBoundsSegments);
        tile.needsHillshadePrepare = false;
    }
}

function drawRaster(painter, sourceCache, layer, tileIDs) {
    if (painter.renderPass !== 'translucent') {
        return;
    }
    if (layer.paint.get('raster-opacity') === 0) {
        return;
    }
    if (!tileIDs.length) {
        return;
    }
    var context = painter.context;
    var gl = context.gl;
    var source = sourceCache.getSource();
    var program = painter.useProgram('raster');
    var colorMode = painter.colorModeForRenderPass();
    var ref = source instanceof ImageSource ? [
        {},
        tileIDs
    ] : painter.stencilConfigForOverlap(tileIDs);
    var stencilModes = ref[0];
    var coords = ref[1];
    var minTileZ = coords[coords.length - 1].overscaledZ;
    var align = !painter.options.moving;
    for (var i = 0, list = coords; i < list.length; i += 1) {
        var coord = list[i];
        var depthMode = painter.depthModeForSublayer(coord.overscaledZ - minTileZ, layer.paint.get('raster-opacity') === 1 ? DepthMode.ReadWrite : DepthMode.ReadOnly, gl.LESS);
        var tile = sourceCache.getTile(coord);
        var posMatrix = painter.transform.calculatePosMatrix(coord.toUnwrapped(), align);
        tile.registerFadeDuration(layer.paint.get('raster-fade-duration'));
        var parentTile = sourceCache.findLoadedParent(coord, 0), fade = getFadeValues(tile, parentTile, sourceCache, layer, painter.transform);
        var parentScaleBy = void 0, parentTL = void 0;
        var textureFilter = layer.paint.get('raster-resampling') === 'nearest' ? gl.NEAREST : gl.LINEAR;
        context.activeTexture.set(gl.TEXTURE0);
        tile.texture.bind(textureFilter, gl.CLAMP_TO_EDGE, gl.LINEAR_MIPMAP_NEAREST);
        context.activeTexture.set(gl.TEXTURE1);
        if (parentTile) {
            parentTile.texture.bind(textureFilter, gl.CLAMP_TO_EDGE, gl.LINEAR_MIPMAP_NEAREST);
            parentScaleBy = Math.pow(2, parentTile.tileID.overscaledZ - tile.tileID.overscaledZ);
            parentTL = [
                tile.tileID.canonical.x * parentScaleBy % 1,
                tile.tileID.canonical.y * parentScaleBy % 1
            ];
        } else {
            tile.texture.bind(textureFilter, gl.CLAMP_TO_EDGE, gl.LINEAR_MIPMAP_NEAREST);
        }
        var uniformValues = rasterUniformValues(posMatrix, parentTL || [
            0,
            0
        ], parentScaleBy || 1, fade, layer);
        if (source instanceof ImageSource) {
            program.draw(context, gl.TRIANGLES, depthMode, StencilMode.disabled, colorMode, CullFaceMode.disabled, uniformValues, layer.id, source.boundsBuffer, painter.quadTriangleIndexBuffer, source.boundsSegments);
        } else {
            program.draw(context, gl.TRIANGLES, depthMode, stencilModes[coord.overscaledZ], colorMode, CullFaceMode.disabled, uniformValues, layer.id, painter.rasterBoundsBuffer, painter.quadTriangleIndexBuffer, painter.rasterBoundsSegments);
        }
    }
}
function getFadeValues(tile, parentTile, sourceCache, layer, transform) {
    var fadeDuration = layer.paint.get('raster-fade-duration');
    if (fadeDuration > 0) {
        var now = performance.browser.now();
        var sinceTile = (now - tile.timeAdded) / fadeDuration;
        var sinceParent = parentTile ? (now - parentTile.timeAdded) / fadeDuration : -1;
        var source = sourceCache.getSource();
        var idealZ = transform.coveringZoomLevel({
            tileSize: source.tileSize,
            roundZoom: source.roundZoom
        });
        var fadeIn = !parentTile || Math.abs(parentTile.tileID.overscaledZ - idealZ) > Math.abs(tile.tileID.overscaledZ - idealZ);
        var childOpacity = fadeIn && tile.refreshedUponExpiration ? 1 : performance.clamp(fadeIn ? sinceTile : 1 - sinceParent, 0, 1);
        if (tile.refreshedUponExpiration && sinceTile >= 1) {
            tile.refreshedUponExpiration = false;
        }
        if (parentTile) {
            return {
                opacity: 1,
                mix: 1 - childOpacity
            };
        } else {
            return {
                opacity: childOpacity,
                mix: 0
            };
        }
    } else {
        return {
            opacity: 1,
            mix: 0
        };
    }
}

function drawBackground(painter, sourceCache, layer) {
    var color = layer.paint.get('background-color');
    var opacity = layer.paint.get('background-opacity');
    if (opacity === 0) {
        return;
    }
    var context = painter.context;
    var gl = context.gl;
    var transform = painter.transform;
    var tileSize = transform.tileSize;
    var image = layer.paint.get('background-pattern');
    if (painter.isPatternMissing(image)) {
        return;
    }
    var pass = !image && color.a === 1 && opacity === 1 && painter.opaquePassEnabledForLayer() ? 'opaque' : 'translucent';
    if (painter.renderPass !== pass) {
        return;
    }
    var stencilMode = StencilMode.disabled;
    var depthMode = painter.depthModeForSublayer(0, pass === 'opaque' ? DepthMode.ReadWrite : DepthMode.ReadOnly);
    var colorMode = painter.colorModeForRenderPass();
    var program = painter.useProgram(image ? 'backgroundPattern' : 'background');
    var tileIDs = transform.coveringTiles({ tileSize: tileSize });
    if (image) {
        context.activeTexture.set(gl.TEXTURE0);
        painter.imageManager.bind(painter.context);
    }
    var crossfade = layer.getCrossfadeParameters();
    for (var i = 0, list = tileIDs; i < list.length; i += 1) {
        var tileID = list[i];
        var matrix = painter.transform.calculatePosMatrix(tileID.toUnwrapped());
        var uniformValues = image ? backgroundPatternUniformValues(matrix, opacity, painter, image, {
            tileID: tileID,
            tileSize: tileSize
        }, crossfade) : backgroundUniformValues(matrix, opacity, color);
        program.draw(context, gl.TRIANGLES, depthMode, stencilMode, colorMode, CullFaceMode.disabled, uniformValues, layer.id, painter.tileExtentBuffer, painter.quadTriangleIndexBuffer, painter.tileExtentSegments);
    }
}

var topColor = new performance.Color(1, 0, 0, 1);
var btmColor = new performance.Color(0, 1, 0, 1);
var leftColor = new performance.Color(0, 0, 1, 1);
var rightColor = new performance.Color(1, 0, 1, 1);
var centerColor = new performance.Color(0, 1, 1, 1);
function drawDebugPadding(painter) {
    var padding = painter.transform.padding;
    var lineWidth = 3;
    drawHorizontalLine(painter, painter.transform.height - (padding.top || 0), lineWidth, topColor);
    drawHorizontalLine(painter, padding.bottom || 0, lineWidth, btmColor);
    drawVerticalLine(painter, padding.left || 0, lineWidth, leftColor);
    drawVerticalLine(painter, painter.transform.width - (padding.right || 0), lineWidth, rightColor);
    var center = painter.transform.centerPoint;
    drawCrosshair(painter, center.x, painter.transform.height - center.y, centerColor);
}
function drawCrosshair(painter, x, y, color) {
    var size = 20;
    var lineWidth = 2;
    drawDebugSSRect(painter, x - lineWidth / 2, y - size / 2, lineWidth, size, color);
    drawDebugSSRect(painter, x - size / 2, y - lineWidth / 2, size, lineWidth, color);
}
function drawHorizontalLine(painter, y, lineWidth, color) {
    drawDebugSSRect(painter, 0, y + lineWidth / 2, painter.transform.width, lineWidth, color);
}
function drawVerticalLine(painter, x, lineWidth, color) {
    drawDebugSSRect(painter, x - lineWidth / 2, 0, lineWidth, painter.transform.height, color);
}
function drawDebugSSRect(painter, x, y, width, height, color) {
    var context = painter.context;
    var gl = context.gl;
    gl.enable(gl.SCISSOR_TEST);
    gl.scissor(x * performance.browser.devicePixelRatio, y * performance.browser.devicePixelRatio, width * performance.browser.devicePixelRatio, height * performance.browser.devicePixelRatio);
    context.clear({ color: color });
    gl.disable(gl.SCISSOR_TEST);
}
function drawDebug(painter, sourceCache, coords) {
    for (var i = 0; i < coords.length; i++) {
        drawDebugTile(painter, sourceCache, coords[i]);
    }
}
function drawDebugTile(painter, sourceCache, coord) {
    var context = painter.context;
    var gl = context.gl;
    var posMatrix = coord.posMatrix;
    var program = painter.useProgram('debug');
    var depthMode = DepthMode.disabled;
    var stencilMode = StencilMode.disabled;
    var colorMode = painter.colorModeForRenderPass();
    var id = '$debug';
    context.activeTexture.set(gl.TEXTURE0);
    painter.emptyTexture.bind(gl.LINEAR, gl.CLAMP_TO_EDGE);
    program.draw(context, gl.LINE_STRIP, depthMode, stencilMode, colorMode, CullFaceMode.disabled, debugUniformValues(posMatrix, performance.Color.red), id, painter.debugBuffer, painter.tileBorderIndexBuffer, painter.debugSegments);
    var tileRawData = sourceCache.getTileByID(coord.key).latestRawTileData;
    var tileByteLength = tileRawData && tileRawData.byteLength || 0;
    var tileSizeKb = Math.floor(tileByteLength / 1024);
    var tileSize = sourceCache.getTile(coord).tileSize;
    var scaleRatio = 512 / Math.min(tileSize, 512) * (coord.overscaledZ / painter.transform.zoom) * 0.5;
    var tileIdText = coord.canonical.toString();
    if (coord.overscaledZ !== coord.canonical.z) {
        tileIdText += ' => ' + coord.overscaledZ;
    }
    var tileLabel = tileIdText + ' ' + tileSizeKb + 'kb';
    drawTextToOverlay(painter, tileLabel);
    program.draw(context, gl.TRIANGLES, depthMode, stencilMode, ColorMode.alphaBlended, CullFaceMode.disabled, debugUniformValues(posMatrix, performance.Color.transparent, scaleRatio), id, painter.debugBuffer, painter.quadTriangleIndexBuffer, painter.debugSegments);
}
function drawTextToOverlay(painter, text) {
    painter.initDebugOverlayCanvas();
    var canvas = painter.debugOverlayCanvas;
    var gl = painter.context.gl;
    var ctx2d = painter.debugOverlayCanvas.getContext('2d');
    ctx2d.clearRect(0, 0, canvas.width, canvas.height);
    ctx2d.shadowColor = 'white';
    ctx2d.shadowBlur = 2;
    ctx2d.lineWidth = 1.5;
    ctx2d.strokeStyle = 'white';
    ctx2d.textBaseline = 'top';
    ctx2d.font = 'bold ' + 36 + 'px Open Sans, sans-serif';
    ctx2d.fillText(text, 5, 5);
    ctx2d.strokeText(text, 5, 5);
    painter.debugOverlayTexture.update(canvas);
    painter.debugOverlayTexture.bind(gl.LINEAR, gl.CLAMP_TO_EDGE);
}

function drawCustom(painter, sourceCache, layer) {
    var context = painter.context;
    var implementation = layer.implementation;
    if (painter.renderPass === 'offscreen') {
        var prerender = implementation.prerender;
        if (prerender) {
            painter.setCustomLayerDefaults();
            context.setColorMode(painter.colorModeForRenderPass());
            prerender.call(implementation, context.gl, painter.transform.customLayerMatrix());
            context.setDirty();
            painter.setBaseState();
        }
    } else if (painter.renderPass === 'translucent') {
        painter.setCustomLayerDefaults();
        context.setColorMode(painter.colorModeForRenderPass());
        context.setStencilMode(StencilMode.disabled);
        var depthMode = implementation.renderingMode === '3d' ? new DepthMode(painter.context.gl.LEQUAL, DepthMode.ReadWrite, painter.depthRangeFor3D) : painter.depthModeForSublayer(0, DepthMode.ReadOnly);
        context.setDepthMode(depthMode);
        implementation.render(context.gl, painter.transform.customLayerMatrix());
        context.setDirty();
        painter.setBaseState();
        context.bindFramebuffer.set(null);
    }
}

var draw$1 = {
    symbol: drawSymbols,
    circle: drawCircles,
    heatmap: drawHeatmap,
    line: drawLine,
    fill: drawFill,
    'fill-extrusion': draw,
    hillshade: drawHillshade,
    raster: drawRaster,
    background: drawBackground,
    debug: drawDebug,
    custom: drawCustom
};
var Painter = function Painter(gl, transform) {
    this.context = new Context(gl);
    this.transform = transform;
    this._tileTextures = {};
    this.setup();
    this.numSublayers = SourceCache.maxUnderzooming + SourceCache.maxOverzooming + 1;
    this.depthEpsilon = 1 / Math.pow(2, 16);
    this.crossTileSymbolIndex = new CrossTileSymbolIndex();
    this.gpuTimers = {};
};
Painter.prototype.resize = function resize(width, height) {
    this.width = width * performance.browser.devicePixelRatio;
    this.height = height * performance.browser.devicePixelRatio;
    this.context.viewport.set([
        0,
        0,
        this.width,
        this.height
    ]);
    if (this.style) {
        for (var i = 0, list = this.style._order; i < list.length; i += 1) {
            var layerId = list[i];
            this.style._layers[layerId].resize();
        }
    }
};
Painter.prototype.setup = function setup() {
    var context = this.context;
    var tileExtentArray = new performance.StructArrayLayout2i4();
    tileExtentArray.emplaceBack(0, 0);
    tileExtentArray.emplaceBack(performance.EXTENT, 0);
    tileExtentArray.emplaceBack(0, performance.EXTENT);
    tileExtentArray.emplaceBack(performance.EXTENT, performance.EXTENT);
    this.tileExtentBuffer = context.createVertexBuffer(tileExtentArray, posAttributes.members);
    this.tileExtentSegments = performance.SegmentVector.simpleSegment(0, 0, 4, 2);
    var debugArray = new performance.StructArrayLayout2i4();
    debugArray.emplaceBack(0, 0);
    debugArray.emplaceBack(performance.EXTENT, 0);
    debugArray.emplaceBack(0, performance.EXTENT);
    debugArray.emplaceBack(performance.EXTENT, performance.EXTENT);
    this.debugBuffer = context.createVertexBuffer(debugArray, posAttributes.members);
    this.debugSegments = performance.SegmentVector.simpleSegment(0, 0, 4, 5);
    var rasterBoundsArray = new performance.StructArrayLayout4i8();
    rasterBoundsArray.emplaceBack(0, 0, 0, 0);
    rasterBoundsArray.emplaceBack(performance.EXTENT, 0, performance.EXTENT, 0);
    rasterBoundsArray.emplaceBack(0, performance.EXTENT, 0, performance.EXTENT);
    rasterBoundsArray.emplaceBack(performance.EXTENT, performance.EXTENT, performance.EXTENT, performance.EXTENT);
    this.rasterBoundsBuffer = context.createVertexBuffer(rasterBoundsArray, rasterBoundsAttributes.members);
    this.rasterBoundsSegments = performance.SegmentVector.simpleSegment(0, 0, 4, 2);
    var viewportArray = new performance.StructArrayLayout2i4();
    viewportArray.emplaceBack(0, 0);
    viewportArray.emplaceBack(1, 0);
    viewportArray.emplaceBack(0, 1);
    viewportArray.emplaceBack(1, 1);
    this.viewportBuffer = context.createVertexBuffer(viewportArray, posAttributes.members);
    this.viewportSegments = performance.SegmentVector.simpleSegment(0, 0, 4, 2);
    var tileLineStripIndices = new performance.StructArrayLayout1ui2();
    tileLineStripIndices.emplaceBack(0);
    tileLineStripIndices.emplaceBack(1);
    tileLineStripIndices.emplaceBack(3);
    tileLineStripIndices.emplaceBack(2);
    tileLineStripIndices.emplaceBack(0);
    this.tileBorderIndexBuffer = context.createIndexBuffer(tileLineStripIndices);
    var quadTriangleIndices = new performance.StructArrayLayout3ui6();
    quadTriangleIndices.emplaceBack(0, 1, 2);
    quadTriangleIndices.emplaceBack(2, 1, 3);
    this.quadTriangleIndexBuffer = context.createIndexBuffer(quadTriangleIndices);
    this.emptyTexture = new performance.Texture(context, {
        width: 1,
        height: 1,
        data: new Uint8Array([
            0,
            0,
            0,
            0
        ])
    }, context.gl.RGBA);
    var gl = this.context.gl;
    this.stencilClearMode = new StencilMode({
        func: gl.ALWAYS,
        mask: 0
    }, 0, 255, gl.ZERO, gl.ZERO, gl.ZERO);
};
Painter.prototype.clearStencil = function clearStencil() {
    var context = this.context;
    var gl = context.gl;
    this.nextStencilID = 1;
    this.currentStencilSource = undefined;
    var matrix = performance.create();
    performance.ortho(matrix, 0, this.width, this.height, 0, 0, 1);
    performance.scale(matrix, matrix, [
        gl.drawingBufferWidth,
        gl.drawingBufferHeight,
        0
    ]);
    this.useProgram('clippingMask').draw(context, gl.TRIANGLES, DepthMode.disabled, this.stencilClearMode, ColorMode.disabled, CullFaceMode.disabled, clippingMaskUniformValues(matrix), '$clipping', this.viewportBuffer, this.quadTriangleIndexBuffer, this.viewportSegments);
};
Painter.prototype._renderTileClippingMasks = function _renderTileClippingMasks(layer, tileIDs) {
    if (this.currentStencilSource === layer.source || !layer.isTileClipped() || !tileIDs || !tileIDs.length) {
        return;
    }
    this.currentStencilSource = layer.source;
    var context = this.context;
    var gl = context.gl;
    if (this.nextStencilID + tileIDs.length > 256) {
        this.clearStencil();
    }
    context.setColorMode(ColorMode.disabled);
    context.setDepthMode(DepthMode.disabled);
    var program = this.useProgram('clippingMask');
    this._tileClippingMaskIDs = {};
    for (var i = 0, list = tileIDs; i < list.length; i += 1) {
        var tileID = list[i];
        var id = this._tileClippingMaskIDs[tileID.key] = this.nextStencilID++;
        program.draw(context, gl.TRIANGLES, DepthMode.disabled, new StencilMode({
            func: gl.ALWAYS,
            mask: 0
        }, id, 255, gl.KEEP, gl.KEEP, gl.REPLACE), ColorMode.disabled, CullFaceMode.disabled, clippingMaskUniformValues(tileID.posMatrix), '$clipping', this.tileExtentBuffer, this.quadTriangleIndexBuffer, this.tileExtentSegments);
    }
};
Painter.prototype.stencilModeFor3D = function stencilModeFor3D() {
    this.currentStencilSource = undefined;
    if (this.nextStencilID + 1 > 256) {
        this.clearStencil();
    }
    var id = this.nextStencilID++;
    var gl = this.context.gl;
    return new StencilMode({
        func: gl.NOTEQUAL,
        mask: 255
    }, id, 255, gl.KEEP, gl.KEEP, gl.REPLACE);
};
Painter.prototype.stencilModeForClipping = function stencilModeForClipping(tileID) {
    var gl = this.context.gl;
    return new StencilMode({
        func: gl.EQUAL,
        mask: 255
    }, this._tileClippingMaskIDs[tileID.key], 0, gl.KEEP, gl.KEEP, gl.REPLACE);
};
Painter.prototype.stencilConfigForOverlap = function stencilConfigForOverlap(tileIDs) {
    var obj;
    var gl = this.context.gl;
    var coords = tileIDs.sort(function (a, b) {
        return b.overscaledZ - a.overscaledZ;
    });
    var minTileZ = coords[coords.length - 1].overscaledZ;
    var stencilValues = coords[0].overscaledZ - minTileZ + 1;
    if (stencilValues > 1) {
        this.currentStencilSource = undefined;
        if (this.nextStencilID + stencilValues > 256) {
            this.clearStencil();
        }
        var zToStencilMode = {};
        for (var i = 0; i < stencilValues; i++) {
            zToStencilMode[i + minTileZ] = new StencilMode({
                func: gl.GEQUAL,
                mask: 255
            }, i + this.nextStencilID, 255, gl.KEEP, gl.KEEP, gl.REPLACE);
        }
        this.nextStencilID += stencilValues;
        return [
            zToStencilMode,
            coords
        ];
    }
    return [
        (obj = {}, obj[minTileZ] = StencilMode.disabled, obj),
        coords
    ];
};
Painter.prototype.colorModeForRenderPass = function colorModeForRenderPass() {
    var gl = this.context.gl;
    if (this._showOverdrawInspector) {
        var numOverdrawSteps = 8;
        var a = 1 / numOverdrawSteps;
        return new ColorMode([
            gl.CONSTANT_COLOR,
            gl.ONE
        ], new performance.Color(a, a, a, 0), [
            true,
            true,
            true,
            true
        ]);
    } else if (this.renderPass === 'opaque') {
        return ColorMode.unblended;
    } else {
        return ColorMode.alphaBlended;
    }
};
Painter.prototype.depthModeForSublayer = function depthModeForSublayer(n, mask, func) {
    if (!this.opaquePassEnabledForLayer()) {
        return DepthMode.disabled;
    }
    var depth = 1 - ((1 + this.currentLayer) * this.numSublayers + n) * this.depthEpsilon;
    return new DepthMode(func || this.context.gl.LEQUAL, mask, [
        depth,
        depth
    ]);
};
Painter.prototype.opaquePassEnabledForLayer = function opaquePassEnabledForLayer() {
    return this.currentLayer < this.opaquePassCutoff;
};
Painter.prototype.render = function render(style, options) {
    var this$1 = this;
    this.style = style;
    this.options = options;
    this.lineAtlas = style.lineAtlas;
    this.imageManager = style.imageManager;
    this.glyphManager = style.glyphManager;
    this.symbolFadeChange = style.placement.symbolFadeChange(performance.browser.now());
    this.imageManager.beginFrame();
    var layerIds = this.style._order;
    var sourceCaches = this.style.sourceCaches;
    for (var id in sourceCaches) {
        var sourceCache = sourceCaches[id];
        if (sourceCache.used) {
            sourceCache.prepare(this.context);
        }
    }
    var coordsAscending = {};
    var coordsDescending = {};
    var coordsDescendingSymbol = {};
    for (var id$1 in sourceCaches) {
        var sourceCache$1 = sourceCaches[id$1];
        coordsAscending[id$1] = sourceCache$1.getVisibleCoordinates();
        coordsDescending[id$1] = coordsAscending[id$1].slice().reverse();
        coordsDescendingSymbol[id$1] = sourceCache$1.getVisibleCoordinates(true).reverse();
    }
    this.opaquePassCutoff = Infinity;
    for (var i = 0; i < layerIds.length; i++) {
        var layerId = layerIds[i];
        if (this.style._layers[layerId].is3D()) {
            this.opaquePassCutoff = i;
            break;
        }
    }
    this.renderPass = 'offscreen';
    for (var i$1 = 0, list = layerIds; i$1 < list.length; i$1 += 1) {
        var layerId$1 = list[i$1];
        var layer = this.style._layers[layerId$1];
        if (!layer.hasOffscreenPass() || layer.isHidden(this.transform.zoom)) {
            continue;
        }
        var coords = coordsDescending[layer.source];
        if (layer.type !== 'custom' && !coords.length) {
            continue;
        }
        this.renderLayer(this, sourceCaches[layer.source], layer, coords);
    }
    this.context.bindFramebuffer.set(null);
    this.context.clear({
        color: options.showOverdrawInspector ? performance.Color.black : performance.Color.transparent,
        depth: 1
    });
    this.clearStencil();
    this._showOverdrawInspector = options.showOverdrawInspector;
    this.depthRangeFor3D = [
        0,
        1 - (style._order.length + 2) * this.numSublayers * this.depthEpsilon
    ];
    this.renderPass = 'opaque';
    for (this.currentLayer = layerIds.length - 1; this.currentLayer >= 0; this.currentLayer--) {
        var layer$1 = this.style._layers[layerIds[this.currentLayer]];
        var sourceCache$2 = sourceCaches[layer$1.source];
        var coords$1 = coordsAscending[layer$1.source];
        this._renderTileClippingMasks(layer$1, coords$1);
        this.renderLayer(this, sourceCache$2, layer$1, coords$1);
    }
    this.renderPass = 'translucent';
    for (this.currentLayer = 0; this.currentLayer < layerIds.length; this.currentLayer++) {
        var layer$2 = this.style._layers[layerIds[this.currentLayer]];
        var sourceCache$3 = sourceCaches[layer$2.source];
        var coords$2 = (layer$2.type === 'symbol' ? coordsDescendingSymbol : coordsDescending)[layer$2.source];
        this._renderTileClippingMasks(layer$2, coordsAscending[layer$2.source]);
        this.renderLayer(this, sourceCache$3, layer$2, coords$2);
    }
    if (this.options.showTileBoundaries) {
        var selectedSource;
        var sourceCache$4;
        var layers = performance.values(this.style._layers);
        layers.forEach(function (layer) {
            if (layer.source && !layer.isHidden(this$1.transform.zoom)) {
                if (layer.source !== (sourceCache$4 && sourceCache$4.id)) {
                    sourceCache$4 = this$1.style.sourceCaches[layer.source];
                }
                if (!selectedSource || selectedSource.getSource().maxzoom < sourceCache$4.getSource().maxzoom) {
                    selectedSource = sourceCache$4;
                }
            }
        });
        if (selectedSource) {
            draw$1.debug(this, selectedSource, selectedSource.getVisibleCoordinates());
        }
    }
    if (this.options.showPadding) {
        drawDebugPadding(this);
    }
    this.context.setDefault();
};
Painter.prototype.renderLayer = function renderLayer(painter, sourceCache, layer, coords) {
    if (layer.isHidden(this.transform.zoom)) {
        return;
    }
    if (layer.type !== 'background' && layer.type !== 'custom' && !coords.length) {
        return;
    }
    this.id = layer.id;
    this.gpuTimingStart(layer);
    draw$1[layer.type](painter, sourceCache, layer, coords, this.style.placement.variableOffsets);
    this.gpuTimingEnd();
};
Painter.prototype.gpuTimingStart = function gpuTimingStart(layer) {
    if (!this.options.gpuTiming) {
        return;
    }
    var ext = this.context.extTimerQuery;
    var layerTimer = this.gpuTimers[layer.id];
    if (!layerTimer) {
        layerTimer = this.gpuTimers[layer.id] = {
            calls: 0,
            cpuTime: 0,
            query: ext.createQueryEXT()
        };
    }
    layerTimer.calls++;
    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, layerTimer.query);
};
Painter.prototype.gpuTimingEnd = function gpuTimingEnd() {
    if (!this.options.gpuTiming) {
        return;
    }
    var ext = this.context.extTimerQuery;
    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);
};
Painter.prototype.collectGpuTimers = function collectGpuTimers() {
    var currentLayerTimers = this.gpuTimers;
    this.gpuTimers = {};
    return currentLayerTimers;
};
Painter.prototype.queryGpuTimers = function queryGpuTimers(gpuTimers) {
    var layers = {};
    for (var layerId in gpuTimers) {
        var gpuTimer = gpuTimers[layerId];
        var ext = this.context.extTimerQuery;
        var gpuTime = ext.getQueryObjectEXT(gpuTimer.query, ext.QUERY_RESULT_EXT) / (1000 * 1000);
        ext.deleteQueryEXT(gpuTimer.query);
        layers[layerId] = gpuTime;
    }
    return layers;
};
Painter.prototype.translatePosMatrix = function translatePosMatrix(matrix, tile, translate, translateAnchor, inViewportPixelUnitsUnits) {
    if (!translate[0] && !translate[1]) {
        return matrix;
    }
    var angle = inViewportPixelUnitsUnits ? translateAnchor === 'map' ? this.transform.angle : 0 : translateAnchor === 'viewport' ? -this.transform.angle : 0;
    if (angle) {
        var sinA = Math.sin(angle);
        var cosA = Math.cos(angle);
        translate = [
            translate[0] * cosA - translate[1] * sinA,
            translate[0] * sinA + translate[1] * cosA
        ];
    }
    var translation = [
        inViewportPixelUnitsUnits ? translate[0] : pixelsToTileUnits(tile, translate[0], this.transform.zoom),
        inViewportPixelUnitsUnits ? translate[1] : pixelsToTileUnits(tile, translate[1], this.transform.zoom),
        0
    ];
    var translatedMatrix = new Float32Array(16);
    performance.translate(translatedMatrix, matrix, translation);
    return translatedMatrix;
};
Painter.prototype.saveTileTexture = function saveTileTexture(texture) {
    var textures = this._tileTextures[texture.size[0]];
    if (!textures) {
        this._tileTextures[texture.size[0]] = [texture];
    } else {
        textures.push(texture);
    }
};
Painter.prototype.getTileTexture = function getTileTexture(size) {
    var textures = this._tileTextures[size];
    return textures && textures.length > 0 ? textures.pop() : null;
};
Painter.prototype.isPatternMissing = function isPatternMissing(image) {
    if (!image) {
        return false;
    }
    if (!image.from || !image.to) {
        return true;
    }
    var imagePosA = this.imageManager.getPattern(image.from.toString());
    var imagePosB = this.imageManager.getPattern(image.to.toString());
    return !imagePosA || !imagePosB;
};
Painter.prototype.useProgram = function useProgram(name, programConfiguration) {
    this.cache = this.cache || {};
    var key = '' + name + (programConfiguration ? programConfiguration.cacheKey : '') + (this._showOverdrawInspector ? '/overdraw' : '');
    if (!this.cache[key]) {
        this.cache[key] = new Program$1(this.context, name, shaders[name], programConfiguration, programUniforms[name], this._showOverdrawInspector);
    }
    return this.cache[key];
};
Painter.prototype.setCustomLayerDefaults = function setCustomLayerDefaults() {
    this.context.unbindVAO();
    this.context.cullFace.setDefault();
    this.context.activeTexture.setDefault();
    this.context.pixelStoreUnpack.setDefault();
    this.context.pixelStoreUnpackPremultiplyAlpha.setDefault();
    this.context.pixelStoreUnpackFlipY.setDefault();
};
Painter.prototype.setBaseState = function setBaseState() {
    var gl = this.context.gl;
    this.context.cullFace.set(false);
    this.context.viewport.set([
        0,
        0,
        this.width,
        this.height
    ]);
    this.context.blendEquation.set(gl.FUNC_ADD);
};
Painter.prototype.initDebugOverlayCanvas = function initDebugOverlayCanvas() {
    if (this.debugOverlayCanvas == null) {
        this.debugOverlayCanvas = performance.window.document.createElement('canvas');
        this.debugOverlayCanvas.width = 512;
        this.debugOverlayCanvas.height = 512;
        var gl = this.context.gl;
        this.debugOverlayTexture = new performance.Texture(this.context, this.debugOverlayCanvas, gl.RGBA);
    }
};
Painter.prototype.destroy = function destroy() {
    this.emptyTexture.destroy();
    if (this.debugOverlayTexture) {
        this.debugOverlayTexture.destroy();
    }
};

var Frustum = function Frustum(points_, planes_) {
    this.points = points_;
    this.planes = planes_;
};
Frustum.fromInvProjectionMatrix = function fromInvProjectionMatrix(invProj, worldSize, zoom) {
    var clipSpaceCorners = [
        [
            -1,
            1,
            -1,
            1
        ],
        [
            1,
            1,
            -1,
            1
        ],
        [
            1,
            -1,
            -1,
            1
        ],
        [
            -1,
            -1,
            -1,
            1
        ],
        [
            -1,
            1,
            1,
            1
        ],
        [
            1,
            1,
            1,
            1
        ],
        [
            1,
            -1,
            1,
            1
        ],
        [
            -1,
            -1,
            1,
            1
        ]
    ];
    var scale = Math.pow(2, zoom);
    var frustumCoords = clipSpaceCorners.map(function (v) {
        return performance.transformMat4([], v, invProj);
    }).map(function (v) {
        return performance.scale$1([], v, 1 / v[3] / worldSize * scale);
    });
    var frustumPlanePointIndices = [
        [
            0,
            1,
            2
        ],
        [
            6,
            5,
            4
        ],
        [
            0,
            3,
            7
        ],
        [
            2,
            1,
            5
        ],
        [
            3,
            2,
            6
        ],
        [
            0,
            4,
            5
        ]
    ];
    var frustumPlanes = frustumPlanePointIndices.map(function (p) {
        var a = performance.sub([], frustumCoords[p[0]], frustumCoords[p[1]]);
        var b = performance.sub([], frustumCoords[p[2]], frustumCoords[p[1]]);
        var n = performance.normalize([], performance.cross([], a, b));
        var d = -performance.dot(n, frustumCoords[p[1]]);
        return n.concat(d);
    });
    return new Frustum(frustumCoords, frustumPlanes);
};
var Aabb = function Aabb(min_, max_) {
    this.min = min_;
    this.max = max_;
    this.center = performance.scale$2([], performance.add([], this.min, this.max), 0.5);
};
Aabb.prototype.quadrant = function quadrant(index) {
    var split = [
        index % 2 === 0,
        index < 2
    ];
    var qMin = performance.clone$2(this.min);
    var qMax = performance.clone$2(this.max);
    for (var axis = 0; axis < split.length; axis++) {
        qMin[axis] = split[axis] ? this.min[axis] : this.center[axis];
        qMax[axis] = split[axis] ? this.center[axis] : this.max[axis];
    }
    qMax[2] = this.max[2];
    return new Aabb(qMin, qMax);
};
Aabb.prototype.distanceX = function distanceX(point) {
    var pointOnAabb = Math.max(Math.min(this.max[0], point[0]), this.min[0]);
    return pointOnAabb - point[0];
};
Aabb.prototype.distanceY = function distanceY(point) {
    var pointOnAabb = Math.max(Math.min(this.max[1], point[1]), this.min[1]);
    return pointOnAabb - point[1];
};
Aabb.prototype.intersects = function intersects(frustum) {
    var aabbPoints = [
        [
            this.min[0],
            this.min[1],
            0,
            1
        ],
        [
            this.max[0],
            this.min[1],
            0,
            1
        ],
        [
            this.max[0],
            this.max[1],
            0,
            1
        ],
        [
            this.min[0],
            this.max[1],
            0,
            1
        ]
    ];
    var fullyInside = true;
    for (var p = 0; p < frustum.planes.length; p++) {
        var plane = frustum.planes[p];
        var pointsInside = 0;
        for (var i = 0; i < aabbPoints.length; i++) {
            pointsInside += performance.dot$1(plane, aabbPoints[i]) >= 0;
        }
        if (pointsInside === 0) {
            return 0;
        }
        if (pointsInside !== aabbPoints.length) {
            fullyInside = false;
        }
    }
    if (fullyInside) {
        return 2;
    }
    for (var axis = 0; axis < 3; axis++) {
        var projMin = Number.MAX_VALUE;
        var projMax = -Number.MAX_VALUE;
        for (var p$1 = 0; p$1 < frustum.points.length; p$1++) {
            var projectedPoint = frustum.points[p$1][axis] - this.min[axis];
            projMin = Math.min(projMin, projectedPoint);
            projMax = Math.max(projMax, projectedPoint);
        }
        if (projMax < 0 || projMin > this.max[axis] - this.min[axis]) {
            return 0;
        }
    }
    return 1;
};

var EdgeInsets = function EdgeInsets(top, bottom, left, right) {
    if (top === void 0)
        top = 0;
    if (bottom === void 0)
        bottom = 0;
    if (left === void 0)
        left = 0;
    if (right === void 0)
        right = 0;
    if (isNaN(top) || top < 0 || isNaN(bottom) || bottom < 0 || isNaN(left) || left < 0 || isNaN(right) || right < 0) {
        throw new Error('Invalid value for edge-insets, top, bottom, left and right must all be numbers');
    }
    this.top = top;
    this.bottom = bottom;
    this.left = left;
    this.right = right;
};
EdgeInsets.prototype.interpolate = function interpolate(start, target, t) {
    if (target.top != null && start.top != null) {
        this.top = performance.number(start.top, target.top, t);
    }
    if (target.bottom != null && start.bottom != null) {
        this.bottom = performance.number(start.bottom, target.bottom, t);
    }
    if (target.left != null && start.left != null) {
        this.left = performance.number(start.left, target.left, t);
    }
    if (target.right != null && start.right != null) {
        this.right = performance.number(start.right, target.right, t);
    }
    return this;
};
EdgeInsets.prototype.getCenter = function getCenter(width, height) {
    var x = performance.clamp((this.left + width - this.right) / 2, 0, width);
    var y = performance.clamp((this.top + height - this.bottom) / 2, 0, height);
    return new performance.Point(x, y);
};
EdgeInsets.prototype.equals = function equals(other) {
    return this.top === other.top && this.bottom === other.bottom && this.left === other.left && this.right === other.right;
};
EdgeInsets.prototype.clone = function clone() {
    return new EdgeInsets(this.top, this.bottom, this.left, this.right);
};
EdgeInsets.prototype.toJSON = function toJSON() {
    return {
        top: this.top,
        bottom: this.bottom,
        left: this.left,
        right: this.right
    };
};

var Transform = function Transform(minZoom, maxZoom, minPitch, maxPitch, renderWorldCopies) {
    this.tileSize = 512;
    this.maxValidLatitude = 85.051129;
    this._renderWorldCopies = renderWorldCopies === undefined ? true : renderWorldCopies;
    this._minZoom = minZoom || 0;
    this._maxZoom = maxZoom || 22;
    this._minPitch = minPitch === undefined || minPitch === null ? 0 : minPitch;
    this._maxPitch = maxPitch === undefined || maxPitch === null ? 60 : maxPitch;
    this.setMaxBounds();
    this.width = 0;
    this.height = 0;
    this._center = new performance.LngLat(0, 0);
    this.zoom = 0;
    this.angle = 0;
    this._fov = 0.6435011087932844;
    this._pitch = 0;
    this._unmodified = true;
    this._edgeInsets = new EdgeInsets();
    this._posMatrixCache = {};
    this._alignedPosMatrixCache = {};
};
var prototypeAccessors = {
    minZoom: { configurable: true },
    maxZoom: { configurable: true },
    minPitch: { configurable: true },
    maxPitch: { configurable: true },
    renderWorldCopies: { configurable: true },
    worldSize: { configurable: true },
    centerOffset: { configurable: true },
    size: { configurable: true },
    bearing: { configurable: true },
    pitch: { configurable: true },
    fov: { configurable: true },
    zoom: { configurable: true },
    center: { configurable: true },
    padding: { configurable: true },
    centerPoint: { configurable: true },
    unmodified: { configurable: true },
    point: { configurable: true }
};
Transform.prototype.clone = function clone() {
    var clone = new Transform(this._minZoom, this._maxZoom, this._minPitch, this.maxPitch, this._renderWorldCopies);
    clone.tileSize = this.tileSize;
    clone.latRange = this.latRange;
    clone.width = this.width;
    clone.height = this.height;
    clone._center = this._center;
    clone.zoom = this.zoom;
    clone.angle = this.angle;
    clone._fov = this._fov;
    clone._pitch = this._pitch;
    clone._unmodified = this._unmodified;
    clone._edgeInsets = this._edgeInsets.clone();
    clone._calcMatrices();
    return clone;
};
prototypeAccessors.minZoom.get = function () {
    return this._minZoom;
};
prototypeAccessors.minZoom.set = function (zoom) {
    if (this._minZoom === zoom) {
        return;
    }
    this._minZoom = zoom;
    this.zoom = Math.max(this.zoom, zoom);
};
prototypeAccessors.maxZoom.get = function () {
    return this._maxZoom;
};
prototypeAccessors.maxZoom.set = function (zoom) {
    if (this._maxZoom === zoom) {
        return;
    }
    this._maxZoom = zoom;
    this.zoom = Math.min(this.zoom, zoom);
};
prototypeAccessors.minPitch.get = function () {
    return this._minPitch;
};
prototypeAccessors.minPitch.set = function (pitch) {
    if (this._minPitch === pitch) {
        return;
    }
    this._minPitch = pitch;
    this.pitch = Math.max(this.pitch, pitch);
};
prototypeAccessors.maxPitch.get = function () {
    return this._maxPitch;
};
prototypeAccessors.maxPitch.set = function (pitch) {
    if (this._maxPitch === pitch) {
        return;
    }
    this._maxPitch = pitch;
    this.pitch = Math.min(this.pitch, pitch);
};
prototypeAccessors.renderWorldCopies.get = function () {
    return this._renderWorldCopies;
};
prototypeAccessors.renderWorldCopies.set = function (renderWorldCopies) {
    if (renderWorldCopies === undefined) {
        renderWorldCopies = true;
    } else if (renderWorldCopies === null) {
        renderWorldCopies = false;
    }
    this._renderWorldCopies = renderWorldCopies;
};
prototypeAccessors.worldSize.get = function () {
    return this.tileSize * this.scale;
};
prototypeAccessors.centerOffset.get = function () {
    return this.centerPoint._sub(this.size._div(2));
};
prototypeAccessors.size.get = function () {
    return new performance.Point(this.width, this.height);
};
prototypeAccessors.bearing.get = function () {
    return -this.angle / Math.PI * 180;
};
prototypeAccessors.bearing.set = function (bearing) {
    var b = -performance.wrap(bearing, -180, 180) * Math.PI / 180;
    if (this.angle === b) {
        return;
    }
    this._unmodified = false;
    this.angle = b;
    this._calcMatrices();
    this.rotationMatrix = performance.create$2();
    performance.rotate(this.rotationMatrix, this.rotationMatrix, this.angle);
};
prototypeAccessors.pitch.get = function () {
    return this._pitch / Math.PI * 180;
};
prototypeAccessors.pitch.set = function (pitch) {
    var p = performance.clamp(pitch, this.minPitch, this.maxPitch) / 180 * Math.PI;
    if (this._pitch === p) {
        return;
    }
    this._unmodified = false;
    this._pitch = p;
    this._calcMatrices();
};
prototypeAccessors.fov.get = function () {
    return this._fov / Math.PI * 180;
};
prototypeAccessors.fov.set = function (fov) {
    fov = Math.max(0.01, Math.min(60, fov));
    if (this._fov === fov) {
        return;
    }
    this._unmodified = false;
    this._fov = fov / 180 * Math.PI;
    this._calcMatrices();
};
prototypeAccessors.zoom.get = function () {
    return this._zoom;
};
prototypeAccessors.zoom.set = function (zoom) {
    var z = Math.min(Math.max(zoom, this.minZoom), this.maxZoom);
    if (this._zoom === z) {
        return;
    }
    this._unmodified = false;
    this._zoom = z;
    this.scale = this.zoomScale(z);
    this.tileZoom = Math.floor(z);
    this.zoomFraction = z - this.tileZoom;
    this._constrain();
    this._calcMatrices();
};
prototypeAccessors.center.get = function () {
    return this._center;
};
prototypeAccessors.center.set = function (center) {
    if (center.lat === this._center.lat && center.lng === this._center.lng) {
        return;
    }
    this._unmodified = false;
    this._center = center;
    this._constrain();
    this._calcMatrices();
};
prototypeAccessors.padding.get = function () {
    return this._edgeInsets.toJSON();
};
prototypeAccessors.padding.set = function (padding) {
    if (this._edgeInsets.equals(padding)) {
        return;
    }
    this._unmodified = false;
    this._edgeInsets.interpolate(this._edgeInsets, padding, 1);
    this._calcMatrices();
};
prototypeAccessors.centerPoint.get = function () {
    return this._edgeInsets.getCenter(this.width, this.height);
};
Transform.prototype.isPaddingEqual = function isPaddingEqual(padding) {
    return this._edgeInsets.equals(padding);
};
Transform.prototype.interpolatePadding = function interpolatePadding(start, target, t) {
    this._unmodified = false;
    this._edgeInsets.interpolate(start, target, t);
    this._constrain();
    this._calcMatrices();
};
Transform.prototype.coveringZoomLevel = function coveringZoomLevel(options) {
    var z = (options.roundZoom ? Math.round : Math.floor)(this.zoom + this.scaleZoom(this.tileSize / options.tileSize));
    return Math.max(0, z);
};
Transform.prototype.getVisibleUnwrappedCoordinates = function getVisibleUnwrappedCoordinates(tileID) {
    var result = [new performance.UnwrappedTileID(0, tileID)];
    if (this._renderWorldCopies) {
        var utl = this.pointCoordinate(new performance.Point(0, 0));
        var utr = this.pointCoordinate(new performance.Point(this.width, 0));
        var ubl = this.pointCoordinate(new performance.Point(this.width, this.height));
        var ubr = this.pointCoordinate(new performance.Point(0, this.height));
        var w0 = Math.floor(Math.min(utl.x, utr.x, ubl.x, ubr.x));
        var w1 = Math.floor(Math.max(utl.x, utr.x, ubl.x, ubr.x));
        var extraWorldCopy = 1;
        for (var w = w0 - extraWorldCopy; w <= w1 + extraWorldCopy; w++) {
            if (w === 0) {
                continue;
            }
            result.push(new performance.UnwrappedTileID(w, tileID));
        }
    }
    return result;
};
Transform.prototype.coveringTiles = function coveringTiles(options) {
    var z = this.coveringZoomLevel(options);
    var actualZ = z;
    if (options.minzoom !== undefined && z < options.minzoom) {
        return [];
    }
    if (options.maxzoom !== undefined && z > options.maxzoom) {
        z = options.maxzoom;
    }
    var centerCoord = performance.MercatorCoordinate.fromLngLat(this.center);
    var numTiles = Math.pow(2, z);
    var centerPoint = [
        numTiles * centerCoord.x,
        numTiles * centerCoord.y,
        0
    ];
    var cameraFrustum = Frustum.fromInvProjectionMatrix(this.invProjMatrix, this.worldSize, z);
    var minZoom = options.minzoom || 0;
    if (this.pitch <= 60 && this._edgeInsets.top < 0.1) {
        minZoom = z;
    }
    var radiusOfMaxLvlLodInTiles = 3;
    var newRootTile = function (wrap) {
        return {
            aabb: new Aabb([
                wrap * numTiles,
                0,
                0
            ], [
                (wrap + 1) * numTiles,
                numTiles,
                0
            ]),
            zoom: 0,
            x: 0,
            y: 0,
            wrap: wrap,
            fullyVisible: false
        };
    };
    var stack = [];
    var result = [];
    var maxZoom = z;
    var overscaledZ = options.reparseOverscaled ? actualZ : z;
    if (this._renderWorldCopies) {
        for (var i = 1; i <= 3; i++) {
            stack.push(newRootTile(-i));
            stack.push(newRootTile(i));
        }
    }
    stack.push(newRootTile(0));
    while (stack.length > 0) {
        var it = stack.pop();
        var x = it.x;
        var y = it.y;
        var fullyVisible = it.fullyVisible;
        if (!fullyVisible) {
            var intersectResult = it.aabb.intersects(cameraFrustum);
            if (intersectResult === 0) {
                continue;
            }
            fullyVisible = intersectResult === 2;
        }
        var distanceX = it.aabb.distanceX(centerPoint);
        var distanceY = it.aabb.distanceY(centerPoint);
        var longestDim = Math.max(Math.abs(distanceX), Math.abs(distanceY));
        var distToSplit = radiusOfMaxLvlLodInTiles + (1 << maxZoom - it.zoom) - 2;
        if (it.zoom === maxZoom || longestDim > distToSplit && it.zoom >= minZoom) {
            result.push({
                tileID: new performance.OverscaledTileID(it.zoom === maxZoom ? overscaledZ : it.zoom, it.wrap, it.zoom, x, y),
                distanceSq: performance.sqrLen([
                    centerPoint[0] - 0.5 - x,
                    centerPoint[1] - 0.5 - y
                ])
            });
            continue;
        }
        for (var i$1 = 0; i$1 < 4; i$1++) {
            var childX = (x << 1) + i$1 % 2;
            var childY = (y << 1) + (i$1 >> 1);
            stack.push({
                aabb: it.aabb.quadrant(i$1),
                zoom: it.zoom + 1,
                x: childX,
                y: childY,
                wrap: it.wrap,
                fullyVisible: fullyVisible
            });
        }
    }
    return result.sort(function (a, b) {
        return a.distanceSq - b.distanceSq;
    }).map(function (a) {
        return a.tileID;
    });
};
Transform.prototype.resize = function resize(width, height) {
    this.width = width;
    this.height = height;
    this.pixelsToGLUnits = [
        2 / width,
        -2 / height
    ];
    this._constrain();
    this._calcMatrices();
};
prototypeAccessors.unmodified.get = function () {
    return this._unmodified;
};
Transform.prototype.zoomScale = function zoomScale(zoom) {
    return Math.pow(2, zoom);
};
Transform.prototype.scaleZoom = function scaleZoom(scale) {
    return Math.log(scale) / Math.LN2;
};
Transform.prototype.project = function project(lnglat) {
    var lat = performance.clamp(lnglat.lat, -this.maxValidLatitude, this.maxValidLatitude);
    return new performance.Point(performance.mercatorXfromLng(lnglat.lng) * this.worldSize, performance.mercatorYfromLat(lat) * this.worldSize);
};
Transform.prototype.unproject = function unproject(point) {
    return new performance.MercatorCoordinate(point.x / this.worldSize, point.y / this.worldSize).toLngLat();
};
prototypeAccessors.point.get = function () {
    return this.project(this.center);
};
Transform.prototype.setLocationAtPoint = function setLocationAtPoint(lnglat, point) {
    var a = this.pointCoordinate(point);
    var b = this.pointCoordinate(this.centerPoint);
    var loc = this.locationCoordinate(lnglat);
    var newCenter = new performance.MercatorCoordinate(loc.x - (a.x - b.x), loc.y - (a.y - b.y));
    this.center = this.coordinateLocation(newCenter);
    if (this._renderWorldCopies) {
        this.center = this.center.wrap();
    }
};
Transform.prototype.locationPoint = function locationPoint(lnglat) {
    return this.coordinatePoint(this.locationCoordinate(lnglat));
};
Transform.prototype.pointLocation = function pointLocation(p) {
    return this.coordinateLocation(this.pointCoordinate(p));
};
Transform.prototype.locationCoordinate = function locationCoordinate(lnglat) {
    return performance.MercatorCoordinate.fromLngLat(lnglat);
};
Transform.prototype.coordinateLocation = function coordinateLocation(coord) {
    return coord.toLngLat();
};
Transform.prototype.pointCoordinate = function pointCoordinate(p) {
    var targetZ = 0;
    var coord0 = [
        p.x,
        p.y,
        0,
        1
    ];
    var coord1 = [
        p.x,
        p.y,
        1,
        1
    ];
    performance.transformMat4(coord0, coord0, this.pixelMatrixInverse);
    performance.transformMat4(coord1, coord1, this.pixelMatrixInverse);
    var w0 = coord0[3];
    var w1 = coord1[3];
    var x0 = coord0[0] / w0;
    var x1 = coord1[0] / w1;
    var y0 = coord0[1] / w0;
    var y1 = coord1[1] / w1;
    var z0 = coord0[2] / w0;
    var z1 = coord1[2] / w1;
    var t = z0 === z1 ? 0 : (targetZ - z0) / (z1 - z0);
    return new performance.MercatorCoordinate(performance.number(x0, x1, t) / this.worldSize, performance.number(y0, y1, t) / this.worldSize);
};
Transform.prototype.coordinatePoint = function coordinatePoint(coord) {
    var p = [
        coord.x * this.worldSize,
        coord.y * this.worldSize,
        0,
        1
    ];
    performance.transformMat4(p, p, this.pixelMatrix);
    return new performance.Point(p[0] / p[3], p[1] / p[3]);
};
Transform.prototype.getBounds = function getBounds() {
    return new performance.LngLatBounds().extend(this.pointLocation(new performance.Point(0, 0))).extend(this.pointLocation(new performance.Point(this.width, 0))).extend(this.pointLocation(new performance.Point(this.width, this.height))).extend(this.pointLocation(new performance.Point(0, this.height)));
};
Transform.prototype.getMaxBounds = function getMaxBounds() {
    if (!this.latRange || this.latRange.length !== 2 || !this.lngRange || this.lngRange.length !== 2) {
        return null;
    }
    return new performance.LngLatBounds([
        this.lngRange[0],
        this.latRange[0]
    ], [
        this.lngRange[1],
        this.latRange[1]
    ]);
};
Transform.prototype.setMaxBounds = function setMaxBounds(bounds) {
    if (bounds) {
        this.lngRange = [
            bounds.getWest(),
            bounds.getEast()
        ];
        this.latRange = [
            bounds.getSouth(),
            bounds.getNorth()
        ];
        this._constrain();
    } else {
        this.lngRange = null;
        this.latRange = [
            -this.maxValidLatitude,
            this.maxValidLatitude
        ];
    }
};
Transform.prototype.calculatePosMatrix = function calculatePosMatrix(unwrappedTileID, aligned) {
    if (aligned === void 0)
        aligned = false;
    var posMatrixKey = unwrappedTileID.key;
    var cache = aligned ? this._alignedPosMatrixCache : this._posMatrixCache;
    if (cache[posMatrixKey]) {
        return cache[posMatrixKey];
    }
    var canonical = unwrappedTileID.canonical;
    var scale = this.worldSize / this.zoomScale(canonical.z);
    var unwrappedX = canonical.x + Math.pow(2, canonical.z) * unwrappedTileID.wrap;
    var posMatrix = performance.identity(new Float64Array(16));
    performance.translate(posMatrix, posMatrix, [
        unwrappedX * scale,
        canonical.y * scale,
        0
    ]);
    performance.scale(posMatrix, posMatrix, [
        scale / performance.EXTENT,
        scale / performance.EXTENT,
        1
    ]);
    performance.multiply(posMatrix, aligned ? this.alignedProjMatrix : this.projMatrix, posMatrix);
    cache[posMatrixKey] = new Float32Array(posMatrix);
    return cache[posMatrixKey];
};
Transform.prototype.customLayerMatrix = function customLayerMatrix() {
    return this.mercatorMatrix.slice();
};
Transform.prototype._constrain = function _constrain() {
    if (!this.center || !this.width || !this.height || this._constraining) {
        return;
    }
    this._constraining = true;
    var minY = -90;
    var maxY = 90;
    var minX = -180;
    var maxX = 180;
    var sy, sx, x2, y2;
    var size = this.size, unmodified = this._unmodified;
    if (this.latRange) {
        var latRange = this.latRange;
        minY = performance.mercatorYfromLat(latRange[1]) * this.worldSize;
        maxY = performance.mercatorYfromLat(latRange[0]) * this.worldSize;
        sy = maxY - minY < size.y ? size.y / (maxY - minY) : 0;
    }
    if (this.lngRange) {
        var lngRange = this.lngRange;
        minX = performance.mercatorXfromLng(lngRange[0]) * this.worldSize;
        maxX = performance.mercatorXfromLng(lngRange[1]) * this.worldSize;
        sx = maxX - minX < size.x ? size.x / (maxX - minX) : 0;
    }
    var point = this.point;
    var s = Math.max(sx || 0, sy || 0);
    if (s) {
        this.center = this.unproject(new performance.Point(sx ? (maxX + minX) / 2 : point.x, sy ? (maxY + minY) / 2 : point.y));
        this.zoom += this.scaleZoom(s);
        this._unmodified = unmodified;
        this._constraining = false;
        return;
    }
    if (this.latRange) {
        var y = point.y, h2 = size.y / 2;
        if (y - h2 < minY) {
            y2 = minY + h2;
        }
        if (y + h2 > maxY) {
            y2 = maxY - h2;
        }
    }
    if (this.lngRange) {
        var x = point.x, w2 = size.x / 2;
        if (x - w2 < minX) {
            x2 = minX + w2;
        }
        if (x + w2 > maxX) {
            x2 = maxX - w2;
        }
    }
    if (x2 !== undefined || y2 !== undefined) {
        this.center = this.unproject(new performance.Point(x2 !== undefined ? x2 : point.x, y2 !== undefined ? y2 : point.y));
    }
    this._unmodified = unmodified;
    this._constraining = false;
};
Transform.prototype._calcMatrices = function _calcMatrices() {
    if (!this.height) {
        return;
    }
    var halfFov = this._fov / 2;
    var offset = this.centerOffset;
    this.cameraToCenterDistance = 0.5 / Math.tan(halfFov) * this.height;
    var groundAngle = Math.PI / 2 + this._pitch;
    var fovAboveCenter = this._fov * (0.5 + offset.y / this.height);
    var topHalfSurfaceDistance = Math.sin(fovAboveCenter) * this.cameraToCenterDistance / Math.sin(performance.clamp(Math.PI - groundAngle - fovAboveCenter, 0.01, Math.PI - 0.01));
    var point = this.point;
    var x = point.x, y = point.y;
    var furthestDistance = Math.cos(Math.PI / 2 - this._pitch) * topHalfSurfaceDistance + this.cameraToCenterDistance;
    var farZ = furthestDistance * 1.01;
    var nearZ = this.height / 50;
    var m = new Float64Array(16);
    performance.perspective(m, this._fov, this.width / this.height, nearZ, farZ);
    m[8] = -offset.x * 2 / this.width;
    m[9] = offset.y * 2 / this.height;
    performance.scale(m, m, [
        1,
        -1,
        1
    ]);
    performance.translate(m, m, [
        0,
        0,
        -this.cameraToCenterDistance
    ]);
    performance.rotateX(m, m, this._pitch);
    performance.rotateZ(m, m, this.angle);
    performance.translate(m, m, [
        -x,
        -y,
        0
    ]);
    this.mercatorMatrix = performance.scale([], m, [
        this.worldSize,
        this.worldSize,
        this.worldSize
    ]);
    performance.scale(m, m, [
        1,
        1,
        performance.mercatorZfromAltitude(1, this.center.lat) * this.worldSize,
        1
    ]);
    this.projMatrix = m;
    this.invProjMatrix = performance.invert([], this.projMatrix);
    var xShift = this.width % 2 / 2, yShift = this.height % 2 / 2, angleCos = Math.cos(this.angle), angleSin = Math.sin(this.angle), dx = x - Math.round(x) + angleCos * xShift + angleSin * yShift, dy = y - Math.round(y) + angleCos * yShift + angleSin * xShift;
    var alignedM = new Float64Array(m);
    performance.translate(alignedM, alignedM, [
        dx > 0.5 ? dx - 1 : dx,
        dy > 0.5 ? dy - 1 : dy,
        0
    ]);
    this.alignedProjMatrix = alignedM;
    m = performance.create();
    performance.scale(m, m, [
        this.width / 2,
        -this.height / 2,
        1
    ]);
    performance.translate(m, m, [
        1,
        -1,
        0
    ]);
    this.labelPlaneMatrix = m;
    m = performance.create();
    performance.scale(m, m, [
        1,
        -1,
        1
    ]);
    performance.translate(m, m, [
        -1,
        -1,
        0
    ]);
    performance.scale(m, m, [
        2 / this.width,
        2 / this.height,
        1
    ]);
    this.glCoordMatrix = m;
    this.pixelMatrix = performance.multiply(new Float64Array(16), this.labelPlaneMatrix, this.projMatrix);
    m = performance.invert(new Float64Array(16), this.pixelMatrix);
    if (!m) {
        throw new Error('failed to invert matrix');
    }
    this.pixelMatrixInverse = m;
    this._posMatrixCache = {};
    this._alignedPosMatrixCache = {};
};
Transform.prototype.maxPitchScaleFactor = function maxPitchScaleFactor() {
    if (!this.pixelMatrixInverse) {
        return 1;
    }
    var coord = this.pointCoordinate(new performance.Point(0, 0));
    var p = [
        coord.x * this.worldSize,
        coord.y * this.worldSize,
        0,
        1
    ];
    var topPoint = performance.transformMat4(p, p, this.pixelMatrix);
    return topPoint[3] / this.cameraToCenterDistance;
};
Transform.prototype.getCameraPoint = function getCameraPoint() {
    var pitch = this._pitch;
    var yOffset = Math.tan(pitch) * (this.cameraToCenterDistance || 1);
    return this.centerPoint.add(new performance.Point(0, yOffset));
};
Transform.prototype.getCameraQueryGeometry = function getCameraQueryGeometry(queryGeometry) {
    var c = this.getCameraPoint();
    if (queryGeometry.length === 1) {
        return [
            queryGeometry[0],
            c
        ];
    } else {
        var minX = c.x;
        var minY = c.y;
        var maxX = c.x;
        var maxY = c.y;
        for (var i = 0, list = queryGeometry; i < list.length; i += 1) {
            var p = list[i];
            minX = Math.min(minX, p.x);
            minY = Math.min(minY, p.y);
            maxX = Math.max(maxX, p.x);
            maxY = Math.max(maxY, p.y);
        }
        return [
            new performance.Point(minX, minY),
            new performance.Point(maxX, minY),
            new performance.Point(maxX, maxY),
            new performance.Point(minX, maxY),
            new performance.Point(minX, minY)
        ];
    }
};
Object.defineProperties(Transform.prototype, prototypeAccessors);

function throttle(fn, time) {
    var pending = false;
    var timerId = null;
    var later = function () {
        timerId = null;
        if (pending) {
            fn();
            timerId = setTimeout(later, time);
            pending = false;
        }
    };
    return function () {
        pending = true;
        if (!timerId) {
            later();
        }
        return timerId;
    };
}

var Hash = function Hash(hashName) {
    this._hashName = hashName && encodeURIComponent(hashName);
    performance.bindAll([
        '_getCurrentHash',
        '_onHashChange',
        '_updateHash'
    ], this);
    this._updateHash = throttle(this._updateHashUnthrottled.bind(this), 30 * 1000 / 100);
};
Hash.prototype.addTo = function addTo(map) {
    this._map = map;
    performance.window.addEventListener('hashchange', this._onHashChange, false);
    this._map.on('moveend', this._updateHash);
    return this;
};
Hash.prototype.remove = function remove() {
    performance.window.removeEventListener('hashchange', this._onHashChange, false);
    this._map.off('moveend', this._updateHash);
    clearTimeout(this._updateHash());
    delete this._map;
    return this;
};
Hash.prototype.getHashString = function getHashString(mapFeedback) {
    var center = this._map.getCenter(), zoom = Math.round(this._map.getZoom() * 100) / 100, precision = Math.ceil((zoom * Math.LN2 + Math.log(512 / 360 / 0.5)) / Math.LN10), m = Math.pow(10, precision), lng = Math.round(center.lng * m) / m, lat = Math.round(center.lat * m) / m, bearing = this._map.getBearing(), pitch = this._map.getPitch();
    var hash = '';
    if (mapFeedback) {
        hash += '/' + lng + '/' + lat + '/' + zoom;
    } else {
        hash += zoom + '/' + lat + '/' + lng;
    }
    if (bearing || pitch) {
        hash += '/' + Math.round(bearing * 10) / 10;
    }
    if (pitch) {
        hash += '/' + Math.round(pitch);
    }
    if (this._hashName) {
        var hashName = this._hashName;
        var found = false;
        var parts = performance.window.location.hash.slice(1).split('&').map(function (part) {
            var key = part.split('=')[0];
            if (key === hashName) {
                found = true;
                return key + '=' + hash;
            }
            return part;
        }).filter(function (a) {
            return a;
        });
        if (!found) {
            parts.push(hashName + '=' + hash);
        }
        return '#' + parts.join('&');
    }
    return '#' + hash;
};
Hash.prototype._getCurrentHash = function _getCurrentHash() {
    var this$1 = this;
    var hash = performance.window.location.hash.replace('#', '');
    if (this._hashName) {
        var keyval;
        hash.split('&').map(function (part) {
            return part.split('=');
        }).forEach(function (part) {
            if (part[0] === this$1._hashName) {
                keyval = part;
            }
        });
        return (keyval ? keyval[1] || '' : '').split('/');
    }
    return hash.split('/');
};
Hash.prototype._onHashChange = function _onHashChange() {
    var loc = this._getCurrentHash();
    if (loc.length >= 3 && !loc.some(function (v) {
            return isNaN(v);
        })) {
        var bearing = this._map.dragRotate.isEnabled() && this._map.touchZoomRotate.isEnabled() ? +(loc[3] || 0) : this._map.getBearing();
        this._map.jumpTo({
            center: [
                +loc[2],
                +loc[1]
            ],
            zoom: +loc[0],
            bearing: bearing,
            pitch: +(loc[4] || 0)
        });
        return true;
    }
    return false;
};
Hash.prototype._updateHashUnthrottled = function _updateHashUnthrottled() {
    var location = performance.window.location.href.replace(/(#.+)?$/, this.getHashString());
    try {
        performance.window.history.replaceState(performance.window.history.state, null, location);
    } catch (SecurityError) {
    }
};

var defaultInertiaOptions = {
    linearity: 0.3,
    easing: performance.bezier(0, 0, 0.3, 1)
};
var defaultPanInertiaOptions = performance.extend({
    deceleration: 2500,
    maxSpeed: 1400
}, defaultInertiaOptions);
var defaultZoomInertiaOptions = performance.extend({
    deceleration: 20,
    maxSpeed: 1400
}, defaultInertiaOptions);
var defaultBearingInertiaOptions = performance.extend({
    deceleration: 1000,
    maxSpeed: 360
}, defaultInertiaOptions);
var defaultPitchInertiaOptions = performance.extend({
    deceleration: 1000,
    maxSpeed: 90
}, defaultInertiaOptions);
var HandlerInertia = function HandlerInertia(map) {
    this._map = map;
    this.clear();
};
HandlerInertia.prototype.clear = function clear() {
    this._inertiaBuffer = [];
};
HandlerInertia.prototype.record = function record(settings) {
    this._drainInertiaBuffer();
    this._inertiaBuffer.push({
        time: performance.browser.now(),
        settings: settings
    });
};
HandlerInertia.prototype._drainInertiaBuffer = function _drainInertiaBuffer() {
    var inertia = this._inertiaBuffer, now = performance.browser.now(), cutoff = 160;
    while (inertia.length > 0 && now - inertia[0].time > cutoff) {
        inertia.shift();
    }
};
HandlerInertia.prototype._onMoveEnd = function _onMoveEnd(panInertiaOptions) {
    this._drainInertiaBuffer();
    if (this._inertiaBuffer.length < 2) {
        return;
    }
    var deltas = {
        zoom: 0,
        bearing: 0,
        pitch: 0,
        pan: new performance.Point(0, 0),
        pinchAround: undefined,
        around: undefined
    };
    for (var i = 0, list = this._inertiaBuffer; i < list.length; i += 1) {
        var ref = list[i];
        var settings = ref.settings;
        deltas.zoom += settings.zoomDelta || 0;
        deltas.bearing += settings.bearingDelta || 0;
        deltas.pitch += settings.pitchDelta || 0;
        if (settings.panDelta) {
            deltas.pan._add(settings.panDelta);
        }
        if (settings.around) {
            deltas.around = settings.around;
        }
        if (settings.pinchAround) {
            deltas.pinchAround = settings.pinchAround;
        }
    }
    var lastEntry = this._inertiaBuffer[this._inertiaBuffer.length - 1];
    var duration = lastEntry.time - this._inertiaBuffer[0].time;
    var easeOptions = {};
    if (deltas.pan.mag()) {
        var result = calculateEasing(deltas.pan.mag(), duration, performance.extend({}, defaultPanInertiaOptions, panInertiaOptions || {}));
        easeOptions.offset = deltas.pan.mult(result.amount / deltas.pan.mag());
        easeOptions.center = this._map.transform.center;
        extendDuration(easeOptions, result);
    }
    if (deltas.zoom) {
        var result$1 = calculateEasing(deltas.zoom, duration, defaultZoomInertiaOptions);
        easeOptions.zoom = this._map.transform.zoom + result$1.amount;
        extendDuration(easeOptions, result$1);
    }
    if (deltas.bearing) {
        var result$2 = calculateEasing(deltas.bearing, duration, defaultBearingInertiaOptions);
        easeOptions.bearing = this._map.transform.bearing + performance.clamp(result$2.amount, -179, 179);
        extendDuration(easeOptions, result$2);
    }
    if (deltas.pitch) {
        var result$3 = calculateEasing(deltas.pitch, duration, defaultPitchInertiaOptions);
        easeOptions.pitch = this._map.transform.pitch + result$3.amount;
        extendDuration(easeOptions, result$3);
    }
    if (easeOptions.zoom || easeOptions.bearing) {
        var last = deltas.pinchAround === undefined ? deltas.around : deltas.pinchAround;
        easeOptions.around = last ? this._map.unproject(last) : this._map.getCenter();
    }
    this.clear();
    return performance.extend(easeOptions, { noMoveStart: true });
};
function extendDuration(easeOptions, result) {
    if (!easeOptions.duration || easeOptions.duration < result.duration) {
        easeOptions.duration = result.duration;
        easeOptions.easing = result.easing;
    }
}
function calculateEasing(amount, inertiaDuration, inertiaOptions) {
    var maxSpeed = inertiaOptions.maxSpeed;
    var linearity = inertiaOptions.linearity;
    var deceleration = inertiaOptions.deceleration;
    var speed = performance.clamp(amount * linearity / (inertiaDuration / 1000), -maxSpeed, maxSpeed);
    var duration = Math.abs(speed) / (deceleration * linearity);
    return {
        easing: inertiaOptions.easing,
        duration: duration * 1000,
        amount: speed * (duration / 2)
    };
}

var MapMouseEvent = function (Event) {
    function MapMouseEvent(type, map, originalEvent, data) {
        if (data === void 0)
            data = {};
        var point = DOM.mousePos(map.getCanvasContainer(), originalEvent);
        var lngLat = map.unproject(point);
        Event.call(this, type, performance.extend({
            point: point,
            lngLat: lngLat,
            originalEvent: originalEvent
        }, data));
        this._defaultPrevented = false;
        this.target = map;
    }
    if (Event)
        MapMouseEvent.__proto__ = Event;
    MapMouseEvent.prototype = Object.create(Event && Event.prototype);
    MapMouseEvent.prototype.constructor = MapMouseEvent;
    var prototypeAccessors = { defaultPrevented: { configurable: true } };
    MapMouseEvent.prototype.preventDefault = function preventDefault() {
        this._defaultPrevented = true;
    };
    prototypeAccessors.defaultPrevented.get = function () {
        return this._defaultPrevented;
    };
    Object.defineProperties(MapMouseEvent.prototype, prototypeAccessors);
    return MapMouseEvent;
}(performance.Event);
var MapTouchEvent = function (Event) {
    function MapTouchEvent(type, map, originalEvent) {
        var touches = type === 'touchend' ? originalEvent.changedTouches : originalEvent.touches;
        var points = DOM.touchPos(map.getCanvasContainer(), touches);
        var lngLats = points.map(function (t) {
            return map.unproject(t);
        });
        var point = points.reduce(function (prev, curr, i, arr) {
            return prev.add(curr.div(arr.length));
        }, new performance.Point(0, 0));
        var lngLat = map.unproject(point);
        Event.call(this, type, {
            points: points,
            point: point,
            lngLats: lngLats,
            lngLat: lngLat,
            originalEvent: originalEvent
        });
        this._defaultPrevented = false;
    }
    if (Event)
        MapTouchEvent.__proto__ = Event;
    MapTouchEvent.prototype = Object.create(Event && Event.prototype);
    MapTouchEvent.prototype.constructor = MapTouchEvent;
    var prototypeAccessors$1 = { defaultPrevented: { configurable: true } };
    MapTouchEvent.prototype.preventDefault = function preventDefault() {
        this._defaultPrevented = true;
    };
    prototypeAccessors$1.defaultPrevented.get = function () {
        return this._defaultPrevented;
    };
    Object.defineProperties(MapTouchEvent.prototype, prototypeAccessors$1);
    return MapTouchEvent;
}(performance.Event);
var MapWheelEvent = function (Event) {
    function MapWheelEvent(type, map, originalEvent) {
        Event.call(this, type, { originalEvent: originalEvent });
        this._defaultPrevented = false;
    }
    if (Event)
        MapWheelEvent.__proto__ = Event;
    MapWheelEvent.prototype = Object.create(Event && Event.prototype);
    MapWheelEvent.prototype.constructor = MapWheelEvent;
    var prototypeAccessors$2 = { defaultPrevented: { configurable: true } };
    MapWheelEvent.prototype.preventDefault = function preventDefault() {
        this._defaultPrevented = true;
    };
    prototypeAccessors$2.defaultPrevented.get = function () {
        return this._defaultPrevented;
    };
    Object.defineProperties(MapWheelEvent.prototype, prototypeAccessors$2);
    return MapWheelEvent;
}(performance.Event);

var MapEventHandler = function MapEventHandler(map, options) {
    this._map = map;
    this._clickTolerance = options.clickTolerance;
};
MapEventHandler.prototype.reset = function reset() {
    delete this._mousedownPos;
};
MapEventHandler.prototype.wheel = function wheel(e) {
    return this._firePreventable(new MapWheelEvent(e.type, this._map, e));
};
MapEventHandler.prototype.mousedown = function mousedown(e, point) {
    this._mousedownPos = point;
    return this._firePreventable(new MapMouseEvent(e.type, this._map, e));
};
MapEventHandler.prototype.mouseup = function mouseup(e) {
    this._map.fire(new MapMouseEvent(e.type, this._map, e));
};
MapEventHandler.prototype.click = function click(e, point) {
    if (this._mousedownPos && this._mousedownPos.dist(point) >= this._clickTolerance) {
        return;
    }
    this._map.fire(new MapMouseEvent(e.type, this._map, e));
};
MapEventHandler.prototype.dblclick = function dblclick(e) {
    return this._firePreventable(new MapMouseEvent(e.type, this._map, e));
};
MapEventHandler.prototype.mouseover = function mouseover(e) {
    this._map.fire(new MapMouseEvent(e.type, this._map, e));
};
MapEventHandler.prototype.mouseout = function mouseout(e) {
    this._map.fire(new MapMouseEvent(e.type, this._map, e));
};
MapEventHandler.prototype.touchstart = function touchstart(e) {
    return this._firePreventable(new MapTouchEvent(e.type, this._map, e));
};
MapEventHandler.prototype.touchmove = function touchmove(e) {
    this._map.fire(new MapTouchEvent(e.type, this._map, e));
};
MapEventHandler.prototype.touchend = function touchend(e) {
    this._map.fire(new MapTouchEvent(e.type, this._map, e));
};
MapEventHandler.prototype.touchcancel = function touchcancel(e) {
    this._map.fire(new MapTouchEvent(e.type, this._map, e));
};
MapEventHandler.prototype._firePreventable = function _firePreventable(mapEvent) {
    this._map.fire(mapEvent);
    if (mapEvent.defaultPrevented) {
        return {};
    }
};
MapEventHandler.prototype.isEnabled = function isEnabled() {
    return true;
};
MapEventHandler.prototype.isActive = function isActive() {
    return false;
};
MapEventHandler.prototype.enable = function enable() {
};
MapEventHandler.prototype.disable = function disable() {
};
var BlockableMapEventHandler = function BlockableMapEventHandler(map) {
    this._map = map;
};
BlockableMapEventHandler.prototype.reset = function reset() {
    this._delayContextMenu = false;
    delete this._contextMenuEvent;
};
BlockableMapEventHandler.prototype.mousemove = function mousemove(e) {
    this._map.fire(new MapMouseEvent(e.type, this._map, e));
};
BlockableMapEventHandler.prototype.mousedown = function mousedown() {
    this._delayContextMenu = true;
};
BlockableMapEventHandler.prototype.mouseup = function mouseup() {
    this._delayContextMenu = false;
    if (this._contextMenuEvent) {
        this._map.fire(new MapMouseEvent('contextmenu', this._map, this._contextMenuEvent));
        delete this._contextMenuEvent;
    }
};
BlockableMapEventHandler.prototype.contextmenu = function contextmenu(e) {
    if (this._delayContextMenu) {
        this._contextMenuEvent = e;
    } else {
        this._map.fire(new MapMouseEvent(e.type, this._map, e));
    }
    if (this._map.listens('contextmenu')) {
        e.preventDefault();
    }
};
BlockableMapEventHandler.prototype.isEnabled = function isEnabled() {
    return true;
};
BlockableMapEventHandler.prototype.isActive = function isActive() {
    return false;
};
BlockableMapEventHandler.prototype.enable = function enable() {
};
BlockableMapEventHandler.prototype.disable = function disable() {
};

var BoxZoomHandler = function BoxZoomHandler(map, options) {
    this._map = map;
    this._el = map.getCanvasContainer();
    this._container = map.getContainer();
    this._clickTolerance = options.clickTolerance || 1;
};
BoxZoomHandler.prototype.isEnabled = function isEnabled() {
    return !!this._enabled;
};
BoxZoomHandler.prototype.isActive = function isActive() {
    return !!this._active;
};
BoxZoomHandler.prototype.enable = function enable() {
    if (this.isEnabled()) {
        return;
    }
    this._enabled = true;
};
BoxZoomHandler.prototype.disable = function disable() {
    if (!this.isEnabled()) {
        return;
    }
    this._enabled = false;
};
BoxZoomHandler.prototype.mousedown = function mousedown(e, point) {
    if (!this.isEnabled()) {
        return;
    }
    if (!(e.shiftKey && e.button === 0)) {
        return;
    }
    DOM.disableDrag();
    this._startPos = this._lastPos = point;
    this._active = true;
};
BoxZoomHandler.prototype.mousemoveWindow = function mousemoveWindow(e, point) {
    if (!this._active) {
        return;
    }
    var pos = point;
    if (this._lastPos.equals(pos) || !this._box && pos.dist(this._startPos) < this._clickTolerance) {
        return;
    }
    var p0 = this._startPos;
    this._lastPos = pos;
    if (!this._box) {
        this._box = DOM.create('div', 'mapboxgl-boxzoom', this._container);
        this._container.classList.add('mapboxgl-crosshair');
        this._fireEvent('boxzoomstart', e);
    }
    var minX = Math.min(p0.x, pos.x), maxX = Math.max(p0.x, pos.x), minY = Math.min(p0.y, pos.y), maxY = Math.max(p0.y, pos.y);
    DOM.setTransform(this._box, 'translate(' + minX + 'px,' + minY + 'px)');
    this._box.style.width = maxX - minX + 'px';
    this._box.style.height = maxY - minY + 'px';
};
BoxZoomHandler.prototype.mouseupWindow = function mouseupWindow(e, point) {
    var this$1 = this;
    if (!this._active) {
        return;
    }
    if (e.button !== 0) {
        return;
    }
    var p0 = this._startPos, p1 = point;
    this.reset();
    DOM.suppressClick();
    if (p0.x === p1.x && p0.y === p1.y) {
        this._fireEvent('boxzoomcancel', e);
    } else {
        this._map.fire(new performance.Event('boxzoomend', { originalEvent: e }));
        return {
            cameraAnimation: function (map) {
                return map.fitScreenCoordinates(p0, p1, this$1._map.getBearing(), { linear: true });
            }
        };
    }
};
BoxZoomHandler.prototype.keydown = function keydown(e) {
    if (!this._active) {
        return;
    }
    if (e.keyCode === 27) {
        this.reset();
        this._fireEvent('boxzoomcancel', e);
    }
};
BoxZoomHandler.prototype.reset = function reset() {
    this._active = false;
    this._container.classList.remove('mapboxgl-crosshair');
    if (this._box) {
        DOM.remove(this._box);
        this._box = null;
    }
    DOM.enableDrag();
    delete this._startPos;
    delete this._lastPos;
};
BoxZoomHandler.prototype._fireEvent = function _fireEvent(type, e) {
    return this._map.fire(new performance.Event(type, { originalEvent: e }));
};

function indexTouches(touches, points) {
    var obj = {};
    for (var i = 0; i < touches.length; i++) {
        obj[touches[i].identifier] = points[i];
    }
    return obj;
}

function getCentroid(points) {
    var sum = new performance.Point(0, 0);
    for (var i = 0, list = points; i < list.length; i += 1) {
        var point = list[i];
        sum._add(point);
    }
    return sum.div(points.length);
}
var MAX_TAP_INTERVAL = 500;
var MAX_TOUCH_TIME = 500;
var MAX_DIST = 30;
var SingleTapRecognizer = function SingleTapRecognizer(options) {
    this.reset();
    this.numTouches = options.numTouches;
};
SingleTapRecognizer.prototype.reset = function reset() {
    delete this.centroid;
    delete this.startTime;
    delete this.touches;
    this.aborted = false;
};
SingleTapRecognizer.prototype.touchstart = function touchstart(e, points, mapTouches) {
    if (this.centroid || mapTouches.length > this.numTouches) {
        this.aborted = true;
    }
    if (this.aborted) {
        return;
    }
    if (this.startTime === undefined) {
        this.startTime = e.timeStamp;
    }
    if (mapTouches.length === this.numTouches) {
        this.centroid = getCentroid(points);
        this.touches = indexTouches(mapTouches, points);
    }
};
SingleTapRecognizer.prototype.touchmove = function touchmove(e, points, mapTouches) {
    if (this.aborted || !this.centroid) {
        return;
    }
    var newTouches = indexTouches(mapTouches, points);
    for (var id in this.touches) {
        var prevPos = this.touches[id];
        var pos = newTouches[id];
        if (!pos || pos.dist(prevPos) > MAX_DIST) {
            this.aborted = true;
        }
    }
};
SingleTapRecognizer.prototype.touchend = function touchend(e, points, mapTouches) {
    if (!this.centroid || e.timeStamp - this.startTime > MAX_TOUCH_TIME) {
        this.aborted = true;
    }
    if (mapTouches.length === 0) {
        var centroid = !this.aborted && this.centroid;
        this.reset();
        if (centroid) {
            return centroid;
        }
    }
};
var TapRecognizer = function TapRecognizer(options) {
    this.singleTap = new SingleTapRecognizer(options);
    this.numTaps = options.numTaps;
    this.reset();
};
TapRecognizer.prototype.reset = function reset() {
    this.lastTime = Infinity;
    delete this.lastTap;
    this.count = 0;
    this.singleTap.reset();
};
TapRecognizer.prototype.touchstart = function touchstart(e, points, mapTouches) {
    this.singleTap.touchstart(e, points, mapTouches);
};
TapRecognizer.prototype.touchmove = function touchmove(e, points, mapTouches) {
    this.singleTap.touchmove(e, points, mapTouches);
};
TapRecognizer.prototype.touchend = function touchend(e, points, mapTouches) {
    var tap = this.singleTap.touchend(e, points, mapTouches);
    if (tap) {
        var soonEnough = e.timeStamp - this.lastTime < MAX_TAP_INTERVAL;
        var closeEnough = !this.lastTap || this.lastTap.dist(tap) < MAX_DIST;
        if (!soonEnough || !closeEnough) {
            this.reset();
        }
        this.count++;
        this.lastTime = e.timeStamp;
        this.lastTap = tap;
        if (this.count === this.numTaps) {
            this.reset();
            return tap;
        }
    }
};

var TapZoomHandler = function TapZoomHandler() {
    this._zoomIn = new TapRecognizer({
        numTouches: 1,
        numTaps: 2
    });
    this._zoomOut = new TapRecognizer({
        numTouches: 2,
        numTaps: 1
    });
    this.reset();
};
TapZoomHandler.prototype.reset = function reset() {
    this._active = false;
    this._zoomIn.reset();
    this._zoomOut.reset();
};
TapZoomHandler.prototype.touchstart = function touchstart(e, points, mapTouches) {
    this._zoomIn.touchstart(e, points, mapTouches);
    this._zoomOut.touchstart(e, points, mapTouches);
};
TapZoomHandler.prototype.touchmove = function touchmove(e, points, mapTouches) {
    this._zoomIn.touchmove(e, points, mapTouches);
    this._zoomOut.touchmove(e, points, mapTouches);
};
TapZoomHandler.prototype.touchend = function touchend(e, points, mapTouches) {
    var this$1 = this;
    var zoomInPoint = this._zoomIn.touchend(e, points, mapTouches);
    var zoomOutPoint = this._zoomOut.touchend(e, points, mapTouches);
    if (zoomInPoint) {
        this._active = true;
        e.preventDefault();
        setTimeout(function () {
            return this$1.reset();
        }, 0);
        return {
            cameraAnimation: function (map) {
                return map.easeTo({
                    duration: 300,
                    zoom: map.getZoom() + 1,
                    around: map.unproject(zoomInPoint)
                }, { originalEvent: e });
            }
        };
    } else if (zoomOutPoint) {
        this._active = true;
        e.preventDefault();
        setTimeout(function () {
            return this$1.reset();
        }, 0);
        return {
            cameraAnimation: function (map) {
                return map.easeTo({
                    duration: 300,
                    zoom: map.getZoom() - 1,
                    around: map.unproject(zoomOutPoint)
                }, { originalEvent: e });
            }
        };
    }
};
TapZoomHandler.prototype.touchcancel = function touchcancel() {
    this.reset();
};
TapZoomHandler.prototype.enable = function enable() {
    this._enabled = true;
};
TapZoomHandler.prototype.disable = function disable() {
    this._enabled = false;
    this.reset();
};
TapZoomHandler.prototype.isEnabled = function isEnabled() {
    return this._enabled;
};
TapZoomHandler.prototype.isActive = function isActive() {
    return this._active;
};

var LEFT_BUTTON = 0;
var RIGHT_BUTTON = 2;
var BUTTONS_FLAGS = {};
BUTTONS_FLAGS[LEFT_BUTTON] = 1;
BUTTONS_FLAGS[RIGHT_BUTTON] = 2;
function buttonStillPressed(e, button) {
    var flag = BUTTONS_FLAGS[button];
    return e.buttons === undefined || (e.buttons & flag) !== flag;
}
var MouseHandler = function MouseHandler(options) {
    this.reset();
    this._clickTolerance = options.clickTolerance || 1;
};
MouseHandler.prototype.reset = function reset() {
    this._active = false;
    this._moved = false;
    delete this._lastPoint;
    delete this._eventButton;
};
MouseHandler.prototype._correctButton = function _correctButton(e, button) {
    return false;
};
MouseHandler.prototype._move = function _move(lastPoint, point) {
    return {};
};
MouseHandler.prototype.mousedown = function mousedown(e, point) {
    if (this._lastPoint) {
        return;
    }
    var eventButton = DOM.mouseButton(e);
    if (!this._correctButton(e, eventButton)) {
        return;
    }
    this._lastPoint = point;
    this._eventButton = eventButton;
};
MouseHandler.prototype.mousemoveWindow = function mousemoveWindow(e, point) {
    var lastPoint = this._lastPoint;
    if (!lastPoint) {
        return;
    }
    e.preventDefault();
    if (buttonStillPressed(e, this._eventButton)) {
        this.reset();
        return;
    }
    if (!this._moved && point.dist(lastPoint) < this._clickTolerance) {
        return;
    }
    this._moved = true;
    this._lastPoint = point;
    return this._move(lastPoint, point);
};
MouseHandler.prototype.mouseupWindow = function mouseupWindow(e) {
    if (!this._lastPoint) {
        return;
    }
    var eventButton = DOM.mouseButton(e);
    if (eventButton !== this._eventButton) {
        return;
    }
    if (this._moved) {
        DOM.suppressClick();
    }
    this.reset();
};
MouseHandler.prototype.enable = function enable() {
    this._enabled = true;
};
MouseHandler.prototype.disable = function disable() {
    this._enabled = false;
    this.reset();
};
MouseHandler.prototype.isEnabled = function isEnabled() {
    return this._enabled;
};
MouseHandler.prototype.isActive = function isActive() {
    return this._active;
};
var MousePanHandler = function (MouseHandler) {
    function MousePanHandler() {
        MouseHandler.apply(this, arguments);
    }
    if (MouseHandler)
        MousePanHandler.__proto__ = MouseHandler;
    MousePanHandler.prototype = Object.create(MouseHandler && MouseHandler.prototype);
    MousePanHandler.prototype.constructor = MousePanHandler;
    MousePanHandler.prototype.mousedown = function mousedown(e, point) {
        MouseHandler.prototype.mousedown.call(this, e, point);
        if (this._lastPoint) {
            this._active = true;
        }
    };
    MousePanHandler.prototype._correctButton = function _correctButton(e, button) {
        return button === LEFT_BUTTON && !e.ctrlKey;
    };
    MousePanHandler.prototype._move = function _move(lastPoint, point) {
        return {
            around: point,
            panDelta: point.sub(lastPoint)
        };
    };
    return MousePanHandler;
}(MouseHandler);
var MouseRotateHandler = function (MouseHandler) {
    function MouseRotateHandler() {
        MouseHandler.apply(this, arguments);
    }
    if (MouseHandler)
        MouseRotateHandler.__proto__ = MouseHandler;
    MouseRotateHandler.prototype = Object.create(MouseHandler && MouseHandler.prototype);
    MouseRotateHandler.prototype.constructor = MouseRotateHandler;
    MouseRotateHandler.prototype._correctButton = function _correctButton(e, button) {
        return button === LEFT_BUTTON && e.ctrlKey || button === RIGHT_BUTTON;
    };
    MouseRotateHandler.prototype._move = function _move(lastPoint, point) {
        var degreesPerPixelMoved = 0.8;
        var bearingDelta = (point.x - lastPoint.x) * degreesPerPixelMoved;
        if (bearingDelta) {
            this._active = true;
            return { bearingDelta: bearingDelta };
        }
    };
    MouseRotateHandler.prototype.contextmenu = function contextmenu(e) {
        e.preventDefault();
    };
    return MouseRotateHandler;
}(MouseHandler);
var MousePitchHandler = function (MouseHandler) {
    function MousePitchHandler() {
        MouseHandler.apply(this, arguments);
    }
    if (MouseHandler)
        MousePitchHandler.__proto__ = MouseHandler;
    MousePitchHandler.prototype = Object.create(MouseHandler && MouseHandler.prototype);
    MousePitchHandler.prototype.constructor = MousePitchHandler;
    MousePitchHandler.prototype._correctButton = function _correctButton(e, button) {
        return button === LEFT_BUTTON && e.ctrlKey || button === RIGHT_BUTTON;
    };
    MousePitchHandler.prototype._move = function _move(lastPoint, point) {
        var degreesPerPixelMoved = -0.5;
        var pitchDelta = (point.y - lastPoint.y) * degreesPerPixelMoved;
        if (pitchDelta) {
            this._active = true;
            return { pitchDelta: pitchDelta };
        }
    };
    MousePitchHandler.prototype.contextmenu = function contextmenu(e) {
        e.preventDefault();
    };
    return MousePitchHandler;
}(MouseHandler);

var TouchPanHandler = function TouchPanHandler(options) {
    this._minTouches = 1;
    this._clickTolerance = options.clickTolerance || 1;
    this.reset();
};
TouchPanHandler.prototype.reset = function reset() {
    this._active = false;
    this._touches = {};
    this._sum = new performance.Point(0, 0);
};
TouchPanHandler.prototype.touchstart = function touchstart(e, points, mapTouches) {
    return this._calculateTransform(e, points, mapTouches);
};
TouchPanHandler.prototype.touchmove = function touchmove(e, points, mapTouches) {
    if (!this._active || mapTouches.length < this._minTouches) {
        return;
    }
    e.preventDefault();
    return this._calculateTransform(e, points, mapTouches);
};
TouchPanHandler.prototype.touchend = function touchend(e, points, mapTouches) {
    this._calculateTransform(e, points, mapTouches);
    if (this._active && mapTouches.length < this._minTouches) {
        this.reset();
    }
};
TouchPanHandler.prototype.touchcancel = function touchcancel() {
    this.reset();
};
TouchPanHandler.prototype._calculateTransform = function _calculateTransform(e, points, mapTouches) {
    if (mapTouches.length > 0) {
        this._active = true;
    }
    var touches = indexTouches(mapTouches, points);
    var touchPointSum = new performance.Point(0, 0);
    var touchDeltaSum = new performance.Point(0, 0);
    var touchDeltaCount = 0;
    for (var identifier in touches) {
        var point = touches[identifier];
        var prevPoint = this._touches[identifier];
        if (prevPoint) {
            touchPointSum._add(point);
            touchDeltaSum._add(point.sub(prevPoint));
            touchDeltaCount++;
            touches[identifier] = point;
        }
    }
    this._touches = touches;
    if (touchDeltaCount < this._minTouches || !touchDeltaSum.mag()) {
        return;
    }
    var panDelta = touchDeltaSum.div(touchDeltaCount);
    this._sum._add(panDelta);
    if (this._sum.mag() < this._clickTolerance) {
        return;
    }
    var around = touchPointSum.div(touchDeltaCount);
    return {
        around: around,
        panDelta: panDelta
    };
};
TouchPanHandler.prototype.enable = function enable() {
    this._enabled = true;
};
TouchPanHandler.prototype.disable = function disable() {
    this._enabled = false;
    this.reset();
};
TouchPanHandler.prototype.isEnabled = function isEnabled() {
    return this._enabled;
};
TouchPanHandler.prototype.isActive = function isActive() {
    return this._active;
};

var TwoTouchHandler = function TwoTouchHandler() {
    this.reset();
};
TwoTouchHandler.prototype.reset = function reset() {
    this._active = false;
    delete this._firstTwoTouches;
};
TwoTouchHandler.prototype._start = function _start(points) {
};
TwoTouchHandler.prototype._move = function _move(points, pinchAround, e) {
    return {};
};
TwoTouchHandler.prototype.touchstart = function touchstart(e, points, mapTouches) {
    if (this._firstTwoTouches || mapTouches.length < 2) {
        return;
    }
    this._firstTwoTouches = [
        mapTouches[0].identifier,
        mapTouches[1].identifier
    ];
    this._start([
        points[0],
        points[1]
    ]);
};
TwoTouchHandler.prototype.touchmove = function touchmove(e, points, mapTouches) {
    if (!this._firstTwoTouches) {
        return;
    }
    e.preventDefault();
    var ref = this._firstTwoTouches;
    var idA = ref[0];
    var idB = ref[1];
    var a = getTouchById(mapTouches, points, idA);
    var b = getTouchById(mapTouches, points, idB);
    if (!a || !b) {
        return;
    }
    var pinchAround = this._aroundCenter ? null : a.add(b).div(2);
    return this._move([
        a,
        b
    ], pinchAround, e);
};
TwoTouchHandler.prototype.touchend = function touchend(e, points, mapTouches) {
    if (!this._firstTwoTouches) {
        return;
    }
    var ref = this._firstTwoTouches;
    var idA = ref[0];
    var idB = ref[1];
    var a = getTouchById(mapTouches, points, idA);
    var b = getTouchById(mapTouches, points, idB);
    if (a && b) {
        return;
    }
    if (this._active) {
        DOM.suppressClick();
    }
    this.reset();
};
TwoTouchHandler.prototype.touchcancel = function touchcancel() {
    this.reset();
};
TwoTouchHandler.prototype.enable = function enable(options) {
    this._enabled = true;
    this._aroundCenter = !!options && options.around === 'center';
};
TwoTouchHandler.prototype.disable = function disable() {
    this._enabled = false;
    this.reset();
};
TwoTouchHandler.prototype.isEnabled = function isEnabled() {
    return this._enabled;
};
TwoTouchHandler.prototype.isActive = function isActive() {
    return this._active;
};
function getTouchById(mapTouches, points, identifier) {
    for (var i = 0; i < mapTouches.length; i++) {
        if (mapTouches[i].identifier === identifier) {
            return points[i];
        }
    }
}
var ZOOM_THRESHOLD = 0.1;
function getZoomDelta(distance, lastDistance) {
    return Math.log(distance / lastDistance) / Math.LN2;
}
var TouchZoomHandler = function (TwoTouchHandler) {
    function TouchZoomHandler() {
        TwoTouchHandler.apply(this, arguments);
    }
    if (TwoTouchHandler)
        TouchZoomHandler.__proto__ = TwoTouchHandler;
    TouchZoomHandler.prototype = Object.create(TwoTouchHandler && TwoTouchHandler.prototype);
    TouchZoomHandler.prototype.constructor = TouchZoomHandler;
    TouchZoomHandler.prototype.reset = function reset() {
        TwoTouchHandler.prototype.reset.call(this);
        delete this._distance;
        delete this._startDistance;
    };
    TouchZoomHandler.prototype._start = function _start(points) {
        this._startDistance = this._distance = points[0].dist(points[1]);
    };
    TouchZoomHandler.prototype._move = function _move(points, pinchAround) {
        var lastDistance = this._distance;
        this._distance = points[0].dist(points[1]);
        if (!this._active && Math.abs(getZoomDelta(this._distance, this._startDistance)) < ZOOM_THRESHOLD) {
            return;
        }
        this._active = true;
        return {
            zoomDelta: getZoomDelta(this._distance, lastDistance),
            pinchAround: pinchAround
        };
    };
    return TouchZoomHandler;
}(TwoTouchHandler);
var ROTATION_THRESHOLD = 25;
function getBearingDelta(a, b) {
    return a.angleWith(b) * 180 / Math.PI;
}
var TouchRotateHandler = function (TwoTouchHandler) {
    function TouchRotateHandler() {
        TwoTouchHandler.apply(this, arguments);
    }
    if (TwoTouchHandler)
        TouchRotateHandler.__proto__ = TwoTouchHandler;
    TouchRotateHandler.prototype = Object.create(TwoTouchHandler && TwoTouchHandler.prototype);
    TouchRotateHandler.prototype.constructor = TouchRotateHandler;
    TouchRotateHandler.prototype.reset = function reset() {
        TwoTouchHandler.prototype.reset.call(this);
        delete this._minDiameter;
        delete this._startVector;
        delete this._vector;
    };
    TouchRotateHandler.prototype._start = function _start(points) {
        this._startVector = this._vector = points[0].sub(points[1]);
        this._minDiameter = points[0].dist(points[1]);
    };
    TouchRotateHandler.prototype._move = function _move(points, pinchAround) {
        var lastVector = this._vector;
        this._vector = points[0].sub(points[1]);
        if (!this._active && this._isBelowThreshold(this._vector)) {
            return;
        }
        this._active = true;
        return {
            bearingDelta: getBearingDelta(this._vector, lastVector),
            pinchAround: pinchAround
        };
    };
    TouchRotateHandler.prototype._isBelowThreshold = function _isBelowThreshold(vector) {
        this._minDiameter = Math.min(this._minDiameter, vector.mag());
        var circumference = Math.PI * this._minDiameter;
        var threshold = ROTATION_THRESHOLD / circumference * 360;
        var bearingDeltaSinceStart = getBearingDelta(vector, this._startVector);
        return Math.abs(bearingDeltaSinceStart) < threshold;
    };
    return TouchRotateHandler;
}(TwoTouchHandler);
function isVertical(vector) {
    return Math.abs(vector.y) > Math.abs(vector.x);
}
var ALLOWED_SINGLE_TOUCH_TIME = 100;
var TouchPitchHandler = function (TwoTouchHandler) {
    function TouchPitchHandler() {
        TwoTouchHandler.apply(this, arguments);
    }
    if (TwoTouchHandler)
        TouchPitchHandler.__proto__ = TwoTouchHandler;
    TouchPitchHandler.prototype = Object.create(TwoTouchHandler && TwoTouchHandler.prototype);
    TouchPitchHandler.prototype.constructor = TouchPitchHandler;
    TouchPitchHandler.prototype.reset = function reset() {
        TwoTouchHandler.prototype.reset.call(this);
        this._valid = undefined;
        delete this._firstMove;
        delete this._lastPoints;
    };
    TouchPitchHandler.prototype._start = function _start(points) {
        this._lastPoints = points;
        if (isVertical(points[0].sub(points[1]))) {
            this._valid = false;
        }
    };
    TouchPitchHandler.prototype._move = function _move(points, center, e) {
        var vectorA = points[0].sub(this._lastPoints[0]);
        var vectorB = points[1].sub(this._lastPoints[1]);
        this._valid = this.gestureBeginsVertically(vectorA, vectorB, e.timeStamp);
        if (!this._valid) {
            return;
        }
        this._lastPoints = points;
        this._active = true;
        var yDeltaAverage = (vectorA.y + vectorB.y) / 2;
        var degreesPerPixelMoved = -0.5;
        return { pitchDelta: yDeltaAverage * degreesPerPixelMoved };
    };
    TouchPitchHandler.prototype.gestureBeginsVertically = function gestureBeginsVertically(vectorA, vectorB, timeStamp) {
        if (this._valid !== undefined) {
            return this._valid;
        }
        var threshold = 2;
        var movedA = vectorA.mag() >= threshold;
        var movedB = vectorB.mag() >= threshold;
        if (!movedA && !movedB) {
            return;
        }
        if (!movedA || !movedB) {
            if (this._firstMove === undefined) {
                this._firstMove = timeStamp;
            }
            if (timeStamp - this._firstMove < ALLOWED_SINGLE_TOUCH_TIME) {
                return undefined;
            } else {
                return false;
            }
        }
        var isSameDirection = vectorA.y > 0 === vectorB.y > 0;
        return isVertical(vectorA) && isVertical(vectorB) && isSameDirection;
    };
    return TouchPitchHandler;
}(TwoTouchHandler);

var defaultOptions = {
    panStep: 100,
    bearingStep: 15,
    pitchStep: 10
};
var KeyboardHandler = function KeyboardHandler() {
    var stepOptions = defaultOptions;
    this._panStep = stepOptions.panStep;
    this._bearingStep = stepOptions.bearingStep;
    this._pitchStep = stepOptions.pitchStep;
    this._rotationDisabled = false;
};
KeyboardHandler.prototype.reset = function reset() {
    this._active = false;
};
KeyboardHandler.prototype.keydown = function keydown(e) {
    var this$1 = this;
    if (e.altKey || e.ctrlKey || e.metaKey) {
        return;
    }
    var zoomDir = 0;
    var bearingDir = 0;
    var pitchDir = 0;
    var xDir = 0;
    var yDir = 0;
    switch (e.keyCode) {
    case 61:
    case 107:
    case 171:
    case 187:
        zoomDir = 1;
        break;
    case 189:
    case 109:
    case 173:
        zoomDir = -1;
        break;
    case 37:
        if (e.shiftKey) {
            bearingDir = -1;
        } else {
            e.preventDefault();
            xDir = -1;
        }
        break;
    case 39:
        if (e.shiftKey) {
            bearingDir = 1;
        } else {
            e.preventDefault();
            xDir = 1;
        }
        break;
    case 38:
        if (e.shiftKey) {
            pitchDir = 1;
        } else {
            e.preventDefault();
            yDir = -1;
        }
        break;
    case 40:
        if (e.shiftKey) {
            pitchDir = -1;
        } else {
            e.preventDefault();
            yDir = 1;
        }
        break;
    default:
        return;
    }
    if (this._rotationDisabled) {
        bearingDir = 0;
        pitchDir = 0;
    }
    return {
        cameraAnimation: function (map) {
            var zoom = map.getZoom();
            map.easeTo({
                duration: 300,
                easeId: 'keyboardHandler',
                easing: easeOut,
                zoom: zoomDir ? Math.round(zoom) + zoomDir * (e.shiftKey ? 2 : 1) : zoom,
                bearing: map.getBearing() + bearingDir * this$1._bearingStep,
                pitch: map.getPitch() + pitchDir * this$1._pitchStep,
                offset: [
                    -xDir * this$1._panStep,
                    -yDir * this$1._panStep
                ],
                center: map.getCenter()
            }, { originalEvent: e });
        }
    };
};
KeyboardHandler.prototype.enable = function enable() {
    this._enabled = true;
};
KeyboardHandler.prototype.disable = function disable() {
    this._enabled = false;
    this.reset();
};
KeyboardHandler.prototype.isEnabled = function isEnabled() {
    return this._enabled;
};
KeyboardHandler.prototype.isActive = function isActive() {
    return this._active;
};
KeyboardHandler.prototype.disableRotation = function disableRotation() {
    this._rotationDisabled = true;
};
KeyboardHandler.prototype.enableRotation = function enableRotation() {
    this._rotationDisabled = false;
};
function easeOut(t) {
    return t * (2 - t);
}

var wheelZoomDelta = 4.000244140625;
var defaultZoomRate = 1 / 100;
var wheelZoomRate = 1 / 450;
var maxScalePerFrame = 2;
var ScrollZoomHandler = function ScrollZoomHandler(map, handler) {
    this._map = map;
    this._el = map.getCanvasContainer();
    this._handler = handler;
    this._delta = 0;
    this._defaultZoomRate = defaultZoomRate;
    this._wheelZoomRate = wheelZoomRate;
    performance.bindAll(['_onTimeout'], this);
};
ScrollZoomHandler.prototype.setZoomRate = function setZoomRate(zoomRate) {
    this._defaultZoomRate = zoomRate;
};
ScrollZoomHandler.prototype.setWheelZoomRate = function setWheelZoomRate(wheelZoomRate) {
    this._wheelZoomRate = wheelZoomRate;
};
ScrollZoomHandler.prototype.isEnabled = function isEnabled() {
    return !!this._enabled;
};
ScrollZoomHandler.prototype.isActive = function isActive() {
    return !!this._active || this._finishTimeout !== undefined;
};
ScrollZoomHandler.prototype.isZooming = function isZooming() {
    return !!this._zooming;
};
ScrollZoomHandler.prototype.enable = function enable(options) {
    if (this.isEnabled()) {
        return;
    }
    this._enabled = true;
    this._aroundCenter = options && options.around === 'center';
};
ScrollZoomHandler.prototype.disable = function disable() {
    if (!this.isEnabled()) {
        return;
    }
    this._enabled = false;
};
ScrollZoomHandler.prototype.wheel = function wheel(e) {
    if (!this.isEnabled()) {
        return;
    }
    var value = e.deltaMode === performance.window.WheelEvent.DOM_DELTA_LINE ? e.deltaY * 40 : e.deltaY;
    var now = performance.browser.now(), timeDelta = now - (this._lastWheelEventTime || 0);
    this._lastWheelEventTime = now;
    if (value !== 0 && value % wheelZoomDelta === 0) {
        this._type = 'wheel';
    } else if (value !== 0 && Math.abs(value) < 4) {
        this._type = 'trackpad';
    } else if (timeDelta > 400) {
        this._type = null;
        this._lastValue = value;
        this._timeout = setTimeout(this._onTimeout, 40, e);
    } else if (!this._type) {
        this._type = Math.abs(timeDelta * value) < 200 ? 'trackpad' : 'wheel';
        if (this._timeout) {
            clearTimeout(this._timeout);
            this._timeout = null;
            value += this._lastValue;
        }
    }
    if (e.shiftKey && value) {
        value = value / 4;
    }
    if (this._type) {
        this._lastWheelEvent = e;
        this._delta -= value;
        if (!this._active) {
            this._start(e);
        }
    }
    e.preventDefault();
};
ScrollZoomHandler.prototype._onTimeout = function _onTimeout(initialEvent) {
    this._type = 'wheel';
    this._delta -= this._lastValue;
    if (!this._active) {
        this._start(initialEvent);
    }
};
ScrollZoomHandler.prototype._start = function _start(e) {
    if (!this._delta) {
        return;
    }
    if (this._frameId) {
        this._frameId = null;
    }
    this._active = true;
    if (!this.isZooming()) {
        this._zooming = true;
    }
    if (this._finishTimeout) {
        clearTimeout(this._finishTimeout);
        delete this._finishTimeout;
    }
    var pos = DOM.mousePos(this._el, e);
    this._around = performance.LngLat.convert(this._aroundCenter ? this._map.getCenter() : this._map.unproject(pos));
    this._aroundPoint = this._map.transform.locationPoint(this._around);
    if (!this._frameId) {
        this._frameId = true;
        this._handler._triggerRenderFrame();
    }
};
ScrollZoomHandler.prototype.renderFrame = function renderFrame() {
    var this$1 = this;
    if (!this._frameId) {
        return;
    }
    this._frameId = null;
    if (!this.isActive()) {
        return;
    }
    var tr = this._map.transform;
    if (this._delta !== 0) {
        var zoomRate = this._type === 'wheel' && Math.abs(this._delta) > wheelZoomDelta ? this._wheelZoomRate : this._defaultZoomRate;
        var scale = maxScalePerFrame / (1 + Math.exp(-Math.abs(this._delta * zoomRate)));
        if (this._delta < 0 && scale !== 0) {
            scale = 1 / scale;
        }
        var fromScale = typeof this._targetZoom === 'number' ? tr.zoomScale(this._targetZoom) : tr.scale;
        this._targetZoom = Math.min(tr.maxZoom, Math.max(tr.minZoom, tr.scaleZoom(fromScale * scale)));
        if (this._type === 'wheel') {
            this._startZoom = tr.zoom;
            this._easing = this._smoothOutEasing(200);
        }
        this._delta = 0;
    }
    var targetZoom = typeof this._targetZoom === 'number' ? this._targetZoom : tr.zoom;
    var startZoom = this._startZoom;
    var easing = this._easing;
    var finished = false;
    var zoom;
    if (this._type === 'wheel' && startZoom && easing) {
        var t = Math.min((performance.browser.now() - this._lastWheelEventTime) / 200, 1);
        var k = easing(t);
        zoom = performance.number(startZoom, targetZoom, k);
        if (t < 1) {
            if (!this._frameId) {
                this._frameId = true;
            }
        } else {
            finished = true;
        }
    } else {
        zoom = targetZoom;
        finished = true;
    }
    this._active = true;
    if (finished) {
        this._active = false;
        this._finishTimeout = setTimeout(function () {
            this$1._zooming = false;
            this$1._handler._triggerRenderFrame();
            delete this$1._targetZoom;
            delete this$1._finishTimeout;
        }, 200);
    }
    return {
        noInertia: true,
        needsRenderFrame: !finished,
        zoomDelta: zoom - tr.zoom,
        around: this._aroundPoint,
        originalEvent: this._lastWheelEvent
    };
};
ScrollZoomHandler.prototype._smoothOutEasing = function _smoothOutEasing(duration) {
    var easing = performance.ease;
    if (this._prevEase) {
        var ease = this._prevEase, t = (performance.browser.now() - ease.start) / ease.duration, speed = ease.easing(t + 0.01) - ease.easing(t), x = 0.27 / Math.sqrt(speed * speed + 0.0001) * 0.01, y = Math.sqrt(0.27 * 0.27 - x * x);
        easing = performance.bezier(x, y, 0.25, 1);
    }
    this._prevEase = {
        start: performance.browser.now(),
        duration: duration,
        easing: easing
    };
    return easing;
};
ScrollZoomHandler.prototype.reset = function reset() {
    this._active = false;
};

var DoubleClickZoomHandler = function DoubleClickZoomHandler(clickZoom, TapZoom) {
    this._clickZoom = clickZoom;
    this._tapZoom = TapZoom;
};
DoubleClickZoomHandler.prototype.enable = function enable() {
    this._clickZoom.enable();
    this._tapZoom.enable();
};
DoubleClickZoomHandler.prototype.disable = function disable() {
    this._clickZoom.disable();
    this._tapZoom.disable();
};
DoubleClickZoomHandler.prototype.isEnabled = function isEnabled() {
    return this._clickZoom.isEnabled() && this._tapZoom.isEnabled();
};
DoubleClickZoomHandler.prototype.isActive = function isActive() {
    return this._clickZoom.isActive() || this._tapZoom.isActive();
};

var ClickZoomHandler = function ClickZoomHandler() {
    this.reset();
};
ClickZoomHandler.prototype.reset = function reset() {
    this._active = false;
};
ClickZoomHandler.prototype.dblclick = function dblclick(e, point) {
    e.preventDefault();
    return {
        cameraAnimation: function (map) {
            map.easeTo({
                duration: 300,
                zoom: map.getZoom() + (e.shiftKey ? -1 : 1),
                around: map.unproject(point)
            }, { originalEvent: e });
        }
    };
};
ClickZoomHandler.prototype.enable = function enable() {
    this._enabled = true;
};
ClickZoomHandler.prototype.disable = function disable() {
    this._enabled = false;
    this.reset();
};
ClickZoomHandler.prototype.isEnabled = function isEnabled() {
    return this._enabled;
};
ClickZoomHandler.prototype.isActive = function isActive() {
    return this._active;
};

var TapDragZoomHandler = function TapDragZoomHandler() {
    this._tap = new TapRecognizer({
        numTouches: 1,
        numTaps: 1
    });
    this.reset();
};
TapDragZoomHandler.prototype.reset = function reset() {
    this._active = false;
    delete this._swipePoint;
    delete this._swipeTouch;
    delete this._tapTime;
    this._tap.reset();
};
TapDragZoomHandler.prototype.touchstart = function touchstart(e, points, mapTouches) {
    if (this._swipePoint) {
        return;
    }
    if (this._tapTime && e.timeStamp - this._tapTime > MAX_TAP_INTERVAL) {
        this.reset();
    }
    if (!this._tapTime) {
        this._tap.touchstart(e, points, mapTouches);
    } else if (mapTouches.length > 0) {
        this._swipePoint = points[0];
        this._swipeTouch = mapTouches[0].identifier;
    }
};
TapDragZoomHandler.prototype.touchmove = function touchmove(e, points, mapTouches) {
    if (!this._tapTime) {
        this._tap.touchmove(e, points, mapTouches);
    } else if (this._swipePoint) {
        if (mapTouches[0].identifier !== this._swipeTouch) {
            return;
        }
        var newSwipePoint = points[0];
        var dist = newSwipePoint.y - this._swipePoint.y;
        this._swipePoint = newSwipePoint;
        e.preventDefault();
        this._active = true;
        return { zoomDelta: dist / 128 };
    }
};
TapDragZoomHandler.prototype.touchend = function touchend(e, points, mapTouches) {
    if (!this._tapTime) {
        var point = this._tap.touchend(e, points, mapTouches);
        if (point) {
            this._tapTime = e.timeStamp;
        }
    } else if (this._swipePoint) {
        if (mapTouches.length === 0) {
            this.reset();
        }
    }
};
TapDragZoomHandler.prototype.touchcancel = function touchcancel() {
    this.reset();
};
TapDragZoomHandler.prototype.enable = function enable() {
    this._enabled = true;
};
TapDragZoomHandler.prototype.disable = function disable() {
    this._enabled = false;
    this.reset();
};
TapDragZoomHandler.prototype.isEnabled = function isEnabled() {
    return this._enabled;
};
TapDragZoomHandler.prototype.isActive = function isActive() {
    return this._active;
};

var DragPanHandler = function DragPanHandler(el, mousePan, touchPan) {
    this._el = el;
    this._mousePan = mousePan;
    this._touchPan = touchPan;
};
DragPanHandler.prototype.enable = function enable(options) {
    this._inertiaOptions = options || {};
    this._mousePan.enable();
    this._touchPan.enable();
    this._el.classList.add('mapboxgl-touch-drag-pan');
};
DragPanHandler.prototype.disable = function disable() {
    this._mousePan.disable();
    this._touchPan.disable();
    this._el.classList.remove('mapboxgl-touch-drag-pan');
};
DragPanHandler.prototype.isEnabled = function isEnabled() {
    return this._mousePan.isEnabled() && this._touchPan.isEnabled();
};
DragPanHandler.prototype.isActive = function isActive() {
    return this._mousePan.isActive() || this._touchPan.isActive();
};

var DragRotateHandler = function DragRotateHandler(options, mouseRotate, mousePitch) {
    this._pitchWithRotate = options.pitchWithRotate;
    this._mouseRotate = mouseRotate;
    this._mousePitch = mousePitch;
};
DragRotateHandler.prototype.enable = function enable() {
    this._mouseRotate.enable();
    if (this._pitchWithRotate) {
        this._mousePitch.enable();
    }
};
DragRotateHandler.prototype.disable = function disable() {
    this._mouseRotate.disable();
    this._mousePitch.disable();
};
DragRotateHandler.prototype.isEnabled = function isEnabled() {
    return this._mouseRotate.isEnabled() && (!this._pitchWithRotate || this._mousePitch.isEnabled());
};
DragRotateHandler.prototype.isActive = function isActive() {
    return this._mouseRotate.isActive() || this._mousePitch.isActive();
};

var TouchZoomRotateHandler = function TouchZoomRotateHandler(el, touchZoom, touchRotate, tapDragZoom) {
    this._el = el;
    this._touchZoom = touchZoom;
    this._touchRotate = touchRotate;
    this._tapDragZoom = tapDragZoom;
    this._rotationDisabled = false;
    this._enabled = true;
};
TouchZoomRotateHandler.prototype.enable = function enable(options) {
    this._touchZoom.enable(options);
    if (!this._rotationDisabled) {
        this._touchRotate.enable(options);
    }
    this._tapDragZoom.enable();
    this._el.classList.add('mapboxgl-touch-zoom-rotate');
};
TouchZoomRotateHandler.prototype.disable = function disable() {
    this._touchZoom.disable();
    this._touchRotate.disable();
    this._tapDragZoom.disable();
    this._el.classList.remove('mapboxgl-touch-zoom-rotate');
};
TouchZoomRotateHandler.prototype.isEnabled = function isEnabled() {
    return this._touchZoom.isEnabled() && (this._rotationDisabled || this._touchRotate.isEnabled()) && this._tapDragZoom.isEnabled();
};
TouchZoomRotateHandler.prototype.isActive = function isActive() {
    return this._touchZoom.isActive() || this._touchRotate.isActive() || this._tapDragZoom.isActive();
};
TouchZoomRotateHandler.prototype.disableRotation = function disableRotation() {
    this._rotationDisabled = true;
    this._touchRotate.disable();
};
TouchZoomRotateHandler.prototype.enableRotation = function enableRotation() {
    this._rotationDisabled = false;
    if (this._touchZoom.isEnabled()) {
        this._touchRotate.enable();
    }
};

var isMoving = function (p) {
    return p.zoom || p.drag || p.pitch || p.rotate;
};
var RenderFrameEvent = function (Event) {
    function RenderFrameEvent() {
        Event.apply(this, arguments);
    }
    if (Event)
        RenderFrameEvent.__proto__ = Event;
    RenderFrameEvent.prototype = Object.create(Event && Event.prototype);
    RenderFrameEvent.prototype.constructor = RenderFrameEvent;
    return RenderFrameEvent;
}(performance.Event);
function hasChange(result) {
    return result.panDelta && result.panDelta.mag() || result.zoomDelta || result.bearingDelta || result.pitchDelta;
}
var HandlerManager = function HandlerManager(map, options) {
    this._map = map;
    this._el = this._map.getCanvasContainer();
    this._handlers = [];
    this._handlersById = {};
    this._changes = [];
    this._inertia = new HandlerInertia(map);
    this._bearingSnap = options.bearingSnap;
    this._previousActiveHandlers = {};
    this._eventsInProgress = {};
    this._addDefaultHandlers(options);
    performance.bindAll([
        'handleEvent',
        'handleWindowEvent'
    ], this);
    var el = this._el;
    this._listeners = [
        [
            el,
            'touchstart',
            { passive: true }
        ],
        [
            el,
            'touchmove',
            { passive: false }
        ],
        [
            el,
            'touchend',
            undefined
        ],
        [
            el,
            'touchcancel',
            undefined
        ],
        [
            el,
            'mousedown',
            undefined
        ],
        [
            el,
            'mousemove',
            undefined
        ],
        [
            el,
            'mouseup',
            undefined
        ],
        [
            performance.window.document,
            'mousemove',
            { capture: true }
        ],
        [
            performance.window.document,
            'mouseup',
            undefined
        ],
        [
            el,
            'mouseover',
            undefined
        ],
        [
            el,
            'mouseout',
            undefined
        ],
        [
            el,
            'dblclick',
            undefined
        ],
        [
            el,
            'click',
            undefined
        ],
        [
            el,
            'keydown',
            { capture: false }
        ],
        [
            el,
            'keyup',
            undefined
        ],
        [
            el,
            'wheel',
            { passive: false }
        ],
        [
            el,
            'contextmenu',
            undefined
        ],
        [
            performance.window,
            'blur',
            undefined
        ]
    ];
    for (var i = 0, list = this._listeners; i < list.length; i += 1) {
        var ref = list[i];
        var target = ref[0];
        var type = ref[1];
        var listenerOptions = ref[2];
        DOM.addEventListener(target, type, target === performance.window.document ? this.handleWindowEvent : this.handleEvent, listenerOptions);
    }
};
HandlerManager.prototype.destroy = function destroy() {
    for (var i = 0, list = this._listeners; i < list.length; i += 1) {
        var ref = list[i];
        var target = ref[0];
        var type = ref[1];
        var listenerOptions = ref[2];
        DOM.removeEventListener(target, type, target === performance.window.document ? this.handleWindowEvent : this.handleEvent, listenerOptions);
    }
};
HandlerManager.prototype._addDefaultHandlers = function _addDefaultHandlers(options) {
    var map = this._map;
    var el = map.getCanvasContainer();
    this._add('mapEvent', new MapEventHandler(map, options));
    var boxZoom = map.boxZoom = new BoxZoomHandler(map, options);
    this._add('boxZoom', boxZoom);
    var tapZoom = new TapZoomHandler();
    var clickZoom = new ClickZoomHandler();
    map.doubleClickZoom = new DoubleClickZoomHandler(clickZoom, tapZoom);
    this._add('tapZoom', tapZoom);
    this._add('clickZoom', clickZoom);
    var tapDragZoom = new TapDragZoomHandler();
    this._add('tapDragZoom', tapDragZoom);
    var touchPitch = map.touchPitch = new TouchPitchHandler();
    this._add('touchPitch', touchPitch);
    var mouseRotate = new MouseRotateHandler(options);
    var mousePitch = new MousePitchHandler(options);
    map.dragRotate = new DragRotateHandler(options, mouseRotate, mousePitch);
    this._add('mouseRotate', mouseRotate, ['mousePitch']);
    this._add('mousePitch', mousePitch, ['mouseRotate']);
    var mousePan = new MousePanHandler(options);
    var touchPan = new TouchPanHandler(options);
    map.dragPan = new DragPanHandler(el, mousePan, touchPan);
    this._add('mousePan', mousePan);
    this._add('touchPan', touchPan, [
        'touchZoom',
        'touchRotate'
    ]);
    var touchRotate = new TouchRotateHandler();
    var touchZoom = new TouchZoomHandler();
    map.touchZoomRotate = new TouchZoomRotateHandler(el, touchZoom, touchRotate, tapDragZoom);
    this._add('touchRotate', touchRotate, [
        'touchPan',
        'touchZoom'
    ]);
    this._add('touchZoom', touchZoom, [
        'touchPan',
        'touchRotate'
    ]);
    var scrollZoom = map.scrollZoom = new ScrollZoomHandler(map, this);
    this._add('scrollZoom', scrollZoom, ['mousePan']);
    var keyboard = map.keyboard = new KeyboardHandler();
    this._add('keyboard', keyboard);
    this._add('blockableMapEvent', new BlockableMapEventHandler(map));
    for (var i = 0, list = [
                'boxZoom',
                'doubleClickZoom',
                'tapDragZoom',
                'touchPitch',
                'dragRotate',
                'dragPan',
                'touchZoomRotate',
                'scrollZoom',
                'keyboard'
            ]; i < list.length; i += 1) {
        var name = list[i];
        if (options.interactive && options[name]) {
            map[name].enable(options[name]);
        }
    }
};
HandlerManager.prototype._add = function _add(handlerName, handler, allowed) {
    this._handlers.push({
        handlerName: handlerName,
        handler: handler,
        allowed: allowed
    });
    this._handlersById[handlerName] = handler;
};
HandlerManager.prototype.stop = function stop(allowEndAnimation) {
    if (this._updatingCamera) {
        return;
    }
    for (var i = 0, list = this._handlers; i < list.length; i += 1) {
        var ref = list[i];
        var handler = ref.handler;
        handler.reset();
    }
    this._inertia.clear();
    this._fireEvents({}, {}, allowEndAnimation);
    this._changes = [];
};
HandlerManager.prototype.isActive = function isActive() {
    for (var i = 0, list = this._handlers; i < list.length; i += 1) {
        var ref = list[i];
        var handler = ref.handler;
        if (handler.isActive()) {
            return true;
        }
    }
    return false;
};
HandlerManager.prototype.isZooming = function isZooming() {
    return !!this._eventsInProgress.zoom || this._map.scrollZoom.isZooming();
};
HandlerManager.prototype.isRotating = function isRotating() {
    return !!this._eventsInProgress.rotate;
};
HandlerManager.prototype.isMoving = function isMoving$1() {
    return Boolean(isMoving(this._eventsInProgress)) || this.isZooming();
};
HandlerManager.prototype._blockedByActive = function _blockedByActive(activeHandlers, allowed, myName) {
    for (var name in activeHandlers) {
        if (name === myName) {
            continue;
        }
        if (!allowed || allowed.indexOf(name) < 0) {
            return true;
        }
    }
    return false;
};
HandlerManager.prototype.handleWindowEvent = function handleWindowEvent(e) {
    this.handleEvent(e, e.type + 'Window');
};
HandlerManager.prototype._getMapTouches = function _getMapTouches(touches) {
    var mapTouches = [];
    for (var i = 0, list = touches; i < list.length; i += 1) {
        var t = list[i];
        var target = t.target;
        if (this._el.contains(target)) {
            mapTouches.push(t);
        }
    }
    return mapTouches;
};
HandlerManager.prototype.handleEvent = function handleEvent(e, eventName) {
    if (e.type === 'blur') {
        this.stop(true);
        return;
    }
    this._updatingCamera = true;
    var inputEvent = e.type === 'renderFrame' ? undefined : e;
    var mergedHandlerResult = { needsRenderFrame: false };
    var eventsInProgress = {};
    var activeHandlers = {};
    var mapTouches = e.touches ? this._getMapTouches(e.touches) : undefined;
    var points = mapTouches ? DOM.touchPos(this._el, mapTouches) : DOM.mousePos(this._el, e);
    for (var i = 0, list = this._handlers; i < list.length; i += 1) {
        var ref = list[i];
        var handlerName = ref.handlerName;
        var handler = ref.handler;
        var allowed = ref.allowed;
        if (!handler.isEnabled()) {
            continue;
        }
        var data = void 0;
        if (this._blockedByActive(activeHandlers, allowed, handlerName)) {
            handler.reset();
        } else {
            if (handler[eventName || e.type]) {
                data = handler[eventName || e.type](e, points, mapTouches);
                this.mergeHandlerResult(mergedHandlerResult, eventsInProgress, data, handlerName, inputEvent);
                if (data && data.needsRenderFrame) {
                    this._triggerRenderFrame();
                }
            }
        }
        if (data || handler.isActive()) {
            activeHandlers[handlerName] = handler;
        }
    }
    var deactivatedHandlers = {};
    for (var name in this._previousActiveHandlers) {
        if (!activeHandlers[name]) {
            deactivatedHandlers[name] = inputEvent;
        }
    }
    this._previousActiveHandlers = activeHandlers;
    if (Object.keys(deactivatedHandlers).length || hasChange(mergedHandlerResult)) {
        this._changes.push([
            mergedHandlerResult,
            eventsInProgress,
            deactivatedHandlers
        ]);
        this._triggerRenderFrame();
    }
    if (Object.keys(activeHandlers).length || hasChange(mergedHandlerResult)) {
        this._map._stop(true);
    }
    this._updatingCamera = false;
    var cameraAnimation = mergedHandlerResult.cameraAnimation;
    if (cameraAnimation) {
        this._inertia.clear();
        this._fireEvents({}, {}, true);
        this._changes = [];
        cameraAnimation(this._map);
    }
};
HandlerManager.prototype.mergeHandlerResult = function mergeHandlerResult(mergedHandlerResult, eventsInProgress, handlerResult, name, e) {
    if (!handlerResult) {
        return;
    }
    performance.extend(mergedHandlerResult, handlerResult);
    var eventData = {
        handlerName: name,
        originalEvent: handlerResult.originalEvent || e
    };
    if (handlerResult.zoomDelta !== undefined) {
        eventsInProgress.zoom = eventData;
    }
    if (handlerResult.panDelta !== undefined) {
        eventsInProgress.drag = eventData;
    }
    if (handlerResult.pitchDelta !== undefined) {
        eventsInProgress.pitch = eventData;
    }
    if (handlerResult.bearingDelta !== undefined) {
        eventsInProgress.rotate = eventData;
    }
};
HandlerManager.prototype._applyChanges = function _applyChanges() {
    var combined = {};
    var combinedEventsInProgress = {};
    var combinedDeactivatedHandlers = {};
    for (var i = 0, list = this._changes; i < list.length; i += 1) {
        var ref = list[i];
        var change = ref[0];
        var eventsInProgress = ref[1];
        var deactivatedHandlers = ref[2];
        if (change.panDelta) {
            combined.panDelta = (combined.panDelta || new performance.Point(0, 0))._add(change.panDelta);
        }
        if (change.zoomDelta) {
            combined.zoomDelta = (combined.zoomDelta || 0) + change.zoomDelta;
        }
        if (change.bearingDelta) {
            combined.bearingDelta = (combined.bearingDelta || 0) + change.bearingDelta;
        }
        if (change.pitchDelta) {
            combined.pitchDelta = (combined.pitchDelta || 0) + change.pitchDelta;
        }
        if (change.around !== undefined) {
            combined.around = change.around;
        }
        if (change.pinchAround !== undefined) {
            combined.pinchAround = change.pinchAround;
        }
        if (change.noInertia) {
            combined.noInertia = change.noInertia;
        }
        performance.extend(combinedEventsInProgress, eventsInProgress);
        performance.extend(combinedDeactivatedHandlers, deactivatedHandlers);
    }
    this._updateMapTransform(combined, combinedEventsInProgress, combinedDeactivatedHandlers);
    this._changes = [];
};
HandlerManager.prototype._updateMapTransform = function _updateMapTransform(combinedResult, combinedEventsInProgress, deactivatedHandlers) {
    var map = this._map;
    var tr = map.transform;
    if (!hasChange(combinedResult)) {
        return this._fireEvents(combinedEventsInProgress, deactivatedHandlers, true);
    }
    var panDelta = combinedResult.panDelta;
    var zoomDelta = combinedResult.zoomDelta;
    var bearingDelta = combinedResult.bearingDelta;
    var pitchDelta = combinedResult.pitchDelta;
    var around = combinedResult.around;
    var pinchAround = combinedResult.pinchAround;
    if (pinchAround !== undefined) {
        around = pinchAround;
    }
    map._stop(true);
    around = around || map.transform.centerPoint;
    var loc = tr.pointLocation(panDelta ? around.sub(panDelta) : around);
    if (bearingDelta) {
        tr.bearing += bearingDelta;
    }
    if (pitchDelta) {
        tr.pitch += pitchDelta;
    }
    if (zoomDelta) {
        tr.zoom += zoomDelta;
    }
    tr.setLocationAtPoint(loc, around);
    this._map._update();
    if (!combinedResult.noInertia) {
        this._inertia.record(combinedResult);
    }
    this._fireEvents(combinedEventsInProgress, deactivatedHandlers, true);
};
HandlerManager.prototype._fireEvents = function _fireEvents(newEventsInProgress, deactivatedHandlers, allowEndAnimation) {
    var this$1 = this;
    var wasMoving = isMoving(this._eventsInProgress);
    var nowMoving = isMoving(newEventsInProgress);
    var startEvents = {};
    for (var eventName in newEventsInProgress) {
        var ref = newEventsInProgress[eventName];
        var originalEvent = ref.originalEvent;
        if (!this._eventsInProgress[eventName]) {
            startEvents[eventName + 'start'] = originalEvent;
        }
        this._eventsInProgress[eventName] = newEventsInProgress[eventName];
    }
    if (!wasMoving && nowMoving) {
        this._fireEvent('movestart', nowMoving.originalEvent);
    }
    for (var name in startEvents) {
        this._fireEvent(name, startEvents[name]);
    }
    if (nowMoving) {
        this._fireEvent('move', nowMoving.originalEvent);
    }
    for (var eventName$1 in newEventsInProgress) {
        var ref$1 = newEventsInProgress[eventName$1];
        var originalEvent$1 = ref$1.originalEvent;
        this._fireEvent(eventName$1, originalEvent$1);
    }
    var endEvents = {};
    var originalEndEvent;
    for (var eventName$2 in this._eventsInProgress) {
        var ref$2 = this._eventsInProgress[eventName$2];
        var handlerName = ref$2.handlerName;
        var originalEvent$2 = ref$2.originalEvent;
        if (!this._handlersById[handlerName].isActive()) {
            delete this._eventsInProgress[eventName$2];
            originalEndEvent = deactivatedHandlers[handlerName] || originalEvent$2;
            endEvents[eventName$2 + 'end'] = originalEndEvent;
        }
    }
    for (var name$1 in endEvents) {
        this._fireEvent(name$1, endEvents[name$1]);
    }
    var stillMoving = isMoving(this._eventsInProgress);
    if (allowEndAnimation && (wasMoving || nowMoving) && !stillMoving) {
        this._updatingCamera = true;
        var inertialEase = this._inertia._onMoveEnd(this._map.dragPan._inertiaOptions);
        var shouldSnapToNorth = function (bearing) {
            return bearing !== 0 && -this$1._bearingSnap < bearing && bearing < this$1._bearingSnap;
        };
        if (inertialEase) {
            if (shouldSnapToNorth(inertialEase.bearing || this._map.getBearing())) {
                inertialEase.bearing = 0;
            }
            this._map.easeTo(inertialEase, { originalEvent: originalEndEvent });
        } else {
            this._map.fire(new performance.Event('moveend', { originalEvent: originalEndEvent }));
            if (shouldSnapToNorth(this._map.getBearing())) {
                this._map.resetNorth();
            }
        }
        this._updatingCamera = false;
    }
};
HandlerManager.prototype._fireEvent = function _fireEvent(type, e) {
    this._map.fire(new performance.Event(type, e ? { originalEvent: e } : {}));
};
HandlerManager.prototype._requestFrame = function _requestFrame() {
    var this$1 = this;
    this._map.triggerRepaint();
    return this._map._renderTaskQueue.add(function (timeStamp) {
        delete this$1._frameId;
        this$1.handleEvent(new RenderFrameEvent('renderFrame', { timeStamp: timeStamp }));
        this$1._applyChanges();
    });
};
HandlerManager.prototype._triggerRenderFrame = function _triggerRenderFrame() {
    if (this._frameId === undefined) {
        this._frameId = this._requestFrame();
    }
};

var Camera = function (Evented) {
    function Camera(transform, options) {
        Evented.call(this);
        this._moving = false;
        this._zooming = false;
        this.transform = transform;
        this._bearingSnap = options.bearingSnap;
        performance.bindAll(['_renderFrameCallback'], this);
    }
    if (Evented)
        Camera.__proto__ = Evented;
    Camera.prototype = Object.create(Evented && Evented.prototype);
    Camera.prototype.constructor = Camera;
    Camera.prototype.getCenter = function getCenter() {
        return new performance.LngLat(this.transform.center.lng, this.transform.center.lat);
    };
    Camera.prototype.setCenter = function setCenter(center, eventData) {
        return this.jumpTo({ center: center }, eventData);
    };
    Camera.prototype.panBy = function panBy(offset, options, eventData) {
        offset = performance.Point.convert(offset).mult(-1);
        return this.panTo(this.transform.center, performance.extend({ offset: offset }, options), eventData);
    };
    Camera.prototype.panTo = function panTo(lnglat, options, eventData) {
        return this.easeTo(performance.extend({ center: lnglat }, options), eventData);
    };
    Camera.prototype.getZoom = function getZoom() {
        return this.transform.zoom;
    };
    Camera.prototype.setZoom = function setZoom(zoom, eventData) {
        this.jumpTo({ zoom: zoom }, eventData);
        return this;
    };
    Camera.prototype.zoomTo = function zoomTo(zoom, options, eventData) {
        return this.easeTo(performance.extend({ zoom: zoom }, options), eventData);
    };
    Camera.prototype.zoomIn = function zoomIn(options, eventData) {
        this.zoomTo(this.getZoom() + 1, options, eventData);
        return this;
    };
    Camera.prototype.zoomOut = function zoomOut(options, eventData) {
        this.zoomTo(this.getZoom() - 1, options, eventData);
        return this;
    };
    Camera.prototype.getBearing = function getBearing() {
        return this.transform.bearing;
    };
    Camera.prototype.setBearing = function setBearing(bearing, eventData) {
        this.jumpTo({ bearing: bearing }, eventData);
        return this;
    };
    Camera.prototype.getPadding = function getPadding() {
        return this.transform.padding;
    };
    Camera.prototype.setPadding = function setPadding(padding, eventData) {
        this.jumpTo({ padding: padding }, eventData);
        return this;
    };
    Camera.prototype.rotateTo = function rotateTo(bearing, options, eventData) {
        return this.easeTo(performance.extend({ bearing: bearing }, options), eventData);
    };
    Camera.prototype.resetNorth = function resetNorth(options, eventData) {
        this.rotateTo(0, performance.extend({ duration: 1000 }, options), eventData);
        return this;
    };
    Camera.prototype.resetNorthPitch = function resetNorthPitch(options, eventData) {
        this.easeTo(performance.extend({
            bearing: 0,
            pitch: 0,
            duration: 1000
        }, options), eventData);
        return this;
    };
    Camera.prototype.snapToNorth = function snapToNorth(options, eventData) {
        if (Math.abs(this.getBearing()) < this._bearingSnap) {
            return this.resetNorth(options, eventData);
        }
        return this;
    };
    Camera.prototype.getPitch = function getPitch() {
        return this.transform.pitch;
    };
    Camera.prototype.setPitch = function setPitch(pitch, eventData) {
        this.jumpTo({ pitch: pitch }, eventData);
        return this;
    };
    Camera.prototype.cameraForBounds = function cameraForBounds(bounds, options) {
        bounds = performance.LngLatBounds.convert(bounds);
        var bearing = options && options.bearing || 0;
        return this._cameraForBoxAndBearing(bounds.getNorthWest(), bounds.getSouthEast(), bearing, options);
    };
    Camera.prototype._cameraForBoxAndBearing = function _cameraForBoxAndBearing(p0, p1, bearing, options) {
        var defaultPadding = {
            top: 0,
            bottom: 0,
            right: 0,
            left: 0
        };
        options = performance.extend({
            padding: defaultPadding,
            offset: [
                0,
                0
            ],
            maxZoom: this.transform.maxZoom
        }, options);
        if (typeof options.padding === 'number') {
            var p = options.padding;
            options.padding = {
                top: p,
                bottom: p,
                right: p,
                left: p
            };
        }
        options.padding = performance.extend(defaultPadding, options.padding);
        var tr = this.transform;
        var edgePadding = tr.padding;
        var p0world = tr.project(performance.LngLat.convert(p0));
        var p1world = tr.project(performance.LngLat.convert(p1));
        var p0rotated = p0world.rotate(-bearing * Math.PI / 180);
        var p1rotated = p1world.rotate(-bearing * Math.PI / 180);
        var upperRight = new performance.Point(Math.max(p0rotated.x, p1rotated.x), Math.max(p0rotated.y, p1rotated.y));
        var lowerLeft = new performance.Point(Math.min(p0rotated.x, p1rotated.x), Math.min(p0rotated.y, p1rotated.y));
        var size = upperRight.sub(lowerLeft);
        var scaleX = (tr.width - (edgePadding.left + edgePadding.right + options.padding.left + options.padding.right)) / size.x;
        var scaleY = (tr.height - (edgePadding.top + edgePadding.bottom + options.padding.top + options.padding.bottom)) / size.y;
        if (scaleY < 0 || scaleX < 0) {
            performance.warnOnce('Map cannot fit within canvas with the given bounds, padding, and/or offset.');
            return;
        }
        var zoom = Math.min(tr.scaleZoom(tr.scale * Math.min(scaleX, scaleY)), options.maxZoom);
        var offset = typeof options.offset.x === 'number' ? new performance.Point(options.offset.x, options.offset.y) : performance.Point.convert(options.offset);
        var paddingOffsetX = (options.padding.left - options.padding.right) / 2;
        var paddingOffsetY = (options.padding.top - options.padding.bottom) / 2;
        var paddingOffset = new performance.Point(paddingOffsetX, paddingOffsetY);
        var rotatedPaddingOffset = paddingOffset.rotate(bearing * Math.PI / 180);
        var offsetAtInitialZoom = offset.add(rotatedPaddingOffset);
        var offsetAtFinalZoom = offsetAtInitialZoom.mult(tr.scale / tr.zoomScale(zoom));
        var center = tr.unproject(p0world.add(p1world).div(2).sub(offsetAtFinalZoom));
        return {
            center: center,
            zoom: zoom,
            bearing: bearing
        };
    };
    Camera.prototype.fitBounds = function fitBounds(bounds, options, eventData) {
        return this._fitInternal(this.cameraForBounds(bounds, options), options, eventData);
    };
    Camera.prototype.fitScreenCoordinates = function fitScreenCoordinates(p0, p1, bearing, options, eventData) {
        return this._fitInternal(this._cameraForBoxAndBearing(this.transform.pointLocation(performance.Point.convert(p0)), this.transform.pointLocation(performance.Point.convert(p1)), bearing, options), options, eventData);
    };
    Camera.prototype._fitInternal = function _fitInternal(calculatedOptions, options, eventData) {
        if (!calculatedOptions) {
            return this;
        }
        options = performance.extend(calculatedOptions, options);
        delete options.padding;
        return options.linear ? this.easeTo(options, eventData) : this.flyTo(options, eventData);
    };
    Camera.prototype.jumpTo = function jumpTo(options, eventData) {
        this.stop();
        var tr = this.transform;
        var zoomChanged = false, bearingChanged = false, pitchChanged = false;
        if ('zoom' in options && tr.zoom !== +options.zoom) {
            zoomChanged = true;
            tr.zoom = +options.zoom;
        }
        if (options.center !== undefined) {
            tr.center = performance.LngLat.convert(options.center);
        }
        if ('bearing' in options && tr.bearing !== +options.bearing) {
            bearingChanged = true;
            tr.bearing = +options.bearing;
        }
        if ('pitch' in options && tr.pitch !== +options.pitch) {
            pitchChanged = true;
            tr.pitch = +options.pitch;
        }
        if (options.padding != null && !tr.isPaddingEqual(options.padding)) {
            tr.padding = options.padding;
        }
        this.fire(new performance.Event('movestart', eventData)).fire(new performance.Event('move', eventData));
        if (zoomChanged) {
            this.fire(new performance.Event('zoomstart', eventData)).fire(new performance.Event('zoom', eventData)).fire(new performance.Event('zoomend', eventData));
        }
        if (bearingChanged) {
            this.fire(new performance.Event('rotatestart', eventData)).fire(new performance.Event('rotate', eventData)).fire(new performance.Event('rotateend', eventData));
        }
        if (pitchChanged) {
            this.fire(new performance.Event('pitchstart', eventData)).fire(new performance.Event('pitch', eventData)).fire(new performance.Event('pitchend', eventData));
        }
        return this.fire(new performance.Event('moveend', eventData));
    };
    Camera.prototype.easeTo = function easeTo(options, eventData) {
        var this$1 = this;
        this._stop(false, options.easeId);
        options = performance.extend({
            offset: [
                0,
                0
            ],
            duration: 500,
            easing: performance.ease
        }, options);
        if (options.animate === false || !options.essential && performance.browser.prefersReducedMotion) {
            options.duration = 0;
        }
        var tr = this.transform, startZoom = this.getZoom(), startBearing = this.getBearing(), startPitch = this.getPitch(), startPadding = this.getPadding(), zoom = 'zoom' in options ? +options.zoom : startZoom, bearing = 'bearing' in options ? this._normalizeBearing(options.bearing, startBearing) : startBearing, pitch = 'pitch' in options ? +options.pitch : startPitch, padding = 'padding' in options ? options.padding : tr.padding;
        var offsetAsPoint = performance.Point.convert(options.offset);
        var pointAtOffset = tr.centerPoint.add(offsetAsPoint);
        var locationAtOffset = tr.pointLocation(pointAtOffset);
        var center = performance.LngLat.convert(options.center || locationAtOffset);
        this._normalizeCenter(center);
        var from = tr.project(locationAtOffset);
        var delta = tr.project(center).sub(from);
        var finalScale = tr.zoomScale(zoom - startZoom);
        var around, aroundPoint;
        if (options.around) {
            around = performance.LngLat.convert(options.around);
            aroundPoint = tr.locationPoint(around);
        }
        var currently = {
            moving: this._moving,
            zooming: this._zooming,
            rotating: this._rotating,
            pitching: this._pitching
        };
        this._zooming = this._zooming || zoom !== startZoom;
        this._rotating = this._rotating || startBearing !== bearing;
        this._pitching = this._pitching || pitch !== startPitch;
        this._padding = !tr.isPaddingEqual(padding);
        this._easeId = options.easeId;
        this._prepareEase(eventData, options.noMoveStart, currently);
        this._ease(function (k) {
            if (this$1._zooming) {
                tr.zoom = performance.number(startZoom, zoom, k);
            }
            if (this$1._rotating) {
                tr.bearing = performance.number(startBearing, bearing, k);
            }
            if (this$1._pitching) {
                tr.pitch = performance.number(startPitch, pitch, k);
            }
            if (this$1._padding) {
                tr.interpolatePadding(startPadding, padding, k);
                pointAtOffset = tr.centerPoint.add(offsetAsPoint);
            }
            if (around) {
                tr.setLocationAtPoint(around, aroundPoint);
            } else {
                var scale = tr.zoomScale(tr.zoom - startZoom);
                var base = zoom > startZoom ? Math.min(2, finalScale) : Math.max(0.5, finalScale);
                var speedup = Math.pow(base, 1 - k);
                var newCenter = tr.unproject(from.add(delta.mult(k * speedup)).mult(scale));
                tr.setLocationAtPoint(tr.renderWorldCopies ? newCenter.wrap() : newCenter, pointAtOffset);
            }
            this$1._fireMoveEvents(eventData);
        }, function (interruptingEaseId) {
            this$1._afterEase(eventData, interruptingEaseId);
        }, options);
        return this;
    };
    Camera.prototype._prepareEase = function _prepareEase(eventData, noMoveStart, currently) {
        if (currently === void 0)
            currently = {};
        this._moving = true;
        if (!noMoveStart && !currently.moving) {
            this.fire(new performance.Event('movestart', eventData));
        }
        if (this._zooming && !currently.zooming) {
            this.fire(new performance.Event('zoomstart', eventData));
        }
        if (this._rotating && !currently.rotating) {
            this.fire(new performance.Event('rotatestart', eventData));
        }
        if (this._pitching && !currently.pitching) {
            this.fire(new performance.Event('pitchstart', eventData));
        }
    };
    Camera.prototype._fireMoveEvents = function _fireMoveEvents(eventData) {
        this.fire(new performance.Event('move', eventData));
        if (this._zooming) {
            this.fire(new performance.Event('zoom', eventData));
        }
        if (this._rotating) {
            this.fire(new performance.Event('rotate', eventData));
        }
        if (this._pitching) {
            this.fire(new performance.Event('pitch', eventData));
        }
    };
    Camera.prototype._afterEase = function _afterEase(eventData, easeId) {
        if (this._easeId && easeId && this._easeId === easeId) {
            return;
        }
        delete this._easeId;
        var wasZooming = this._zooming;
        var wasRotating = this._rotating;
        var wasPitching = this._pitching;
        this._moving = false;
        this._zooming = false;
        this._rotating = false;
        this._pitching = false;
        this._padding = false;
        if (wasZooming) {
            this.fire(new performance.Event('zoomend', eventData));
        }
        if (wasRotating) {
            this.fire(new performance.Event('rotateend', eventData));
        }
        if (wasPitching) {
            this.fire(new performance.Event('pitchend', eventData));
        }
        this.fire(new performance.Event('moveend', eventData));
    };
    Camera.prototype.flyTo = function flyTo(options, eventData) {
        var this$1 = this;
        if (!options.essential && performance.browser.prefersReducedMotion) {
            var coercedOptions = performance.pick(options, [
                'center',
                'zoom',
                'bearing',
                'pitch',
                'around'
            ]);
            return this.jumpTo(coercedOptions, eventData);
        }
        this.stop();
        options = performance.extend({
            offset: [
                0,
                0
            ],
            speed: 1.2,
            curve: 1.42,
            easing: performance.ease
        }, options);
        var tr = this.transform, startZoom = this.getZoom(), startBearing = this.getBearing(), startPitch = this.getPitch(), startPadding = this.getPadding();
        var zoom = 'zoom' in options ? performance.clamp(+options.zoom, tr.minZoom, tr.maxZoom) : startZoom;
        var bearing = 'bearing' in options ? this._normalizeBearing(options.bearing, startBearing) : startBearing;
        var pitch = 'pitch' in options ? +options.pitch : startPitch;
        var padding = 'padding' in options ? options.padding : tr.padding;
        var scale = tr.zoomScale(zoom - startZoom);
        var offsetAsPoint = performance.Point.convert(options.offset);
        var pointAtOffset = tr.centerPoint.add(offsetAsPoint);
        var locationAtOffset = tr.pointLocation(pointAtOffset);
        var center = performance.LngLat.convert(options.center || locationAtOffset);
        this._normalizeCenter(center);
        var from = tr.project(locationAtOffset);
        var delta = tr.project(center).sub(from);
        var rho = options.curve;
        var w0 = Math.max(tr.width, tr.height), w1 = w0 / scale, u1 = delta.mag();
        if ('minZoom' in options) {
            var minZoom = performance.clamp(Math.min(options.minZoom, startZoom, zoom), tr.minZoom, tr.maxZoom);
            var wMax = w0 / tr.zoomScale(minZoom - startZoom);
            rho = Math.sqrt(wMax / u1 * 2);
        }
        var rho2 = rho * rho;
        function r(i) {
            var b = (w1 * w1 - w0 * w0 + (i ? -1 : 1) * rho2 * rho2 * u1 * u1) / (2 * (i ? w1 : w0) * rho2 * u1);
            return Math.log(Math.sqrt(b * b + 1) - b);
        }
        function sinh(n) {
            return (Math.exp(n) - Math.exp(-n)) / 2;
        }
        function cosh(n) {
            return (Math.exp(n) + Math.exp(-n)) / 2;
        }
        function tanh(n) {
            return sinh(n) / cosh(n);
        }
        var r0 = r(0);
        var w = function (s) {
            return cosh(r0) / cosh(r0 + rho * s);
        };
        var u = function (s) {
            return w0 * ((cosh(r0) * tanh(r0 + rho * s) - sinh(r0)) / rho2) / u1;
        };
        var S = (r(1) - r0) / rho;
        if (Math.abs(u1) < 0.000001 || !isFinite(S)) {
            if (Math.abs(w0 - w1) < 0.000001) {
                return this.easeTo(options, eventData);
            }
            var k = w1 < w0 ? -1 : 1;
            S = Math.abs(Math.log(w1 / w0)) / rho;
            u = function () {
                return 0;
            };
            w = function (s) {
                return Math.exp(k * rho * s);
            };
        }
        if ('duration' in options) {
            options.duration = +options.duration;
        } else {
            var V = 'screenSpeed' in options ? +options.screenSpeed / rho : +options.speed;
            options.duration = 1000 * S / V;
        }
        if (options.maxDuration && options.duration > options.maxDuration) {
            options.duration = 0;
        }
        this._zooming = true;
        this._rotating = startBearing !== bearing;
        this._pitching = pitch !== startPitch;
        this._padding = !tr.isPaddingEqual(padding);
        this._prepareEase(eventData, false);
        this._ease(function (k) {
            var s = k * S;
            var scale = 1 / w(s);
            tr.zoom = k === 1 ? zoom : startZoom + tr.scaleZoom(scale);
            if (this$1._rotating) {
                tr.bearing = performance.number(startBearing, bearing, k);
            }
            if (this$1._pitching) {
                tr.pitch = performance.number(startPitch, pitch, k);
            }
            if (this$1._padding) {
                tr.interpolatePadding(startPadding, padding, k);
                pointAtOffset = tr.centerPoint.add(offsetAsPoint);
            }
            var newCenter = k === 1 ? center : tr.unproject(from.add(delta.mult(u(s))).mult(scale));
            tr.setLocationAtPoint(tr.renderWorldCopies ? newCenter.wrap() : newCenter, pointAtOffset);
            this$1._fireMoveEvents(eventData);
        }, function () {
            return this$1._afterEase(eventData);
        }, options);
        return this;
    };
    Camera.prototype.isEasing = function isEasing() {
        return !!this._easeFrameId;
    };
    Camera.prototype.stop = function stop() {
        return this._stop();
    };
    Camera.prototype._stop = function _stop(allowGestures, easeId) {
        if (this._easeFrameId) {
            this._cancelRenderFrame(this._easeFrameId);
            delete this._easeFrameId;
            delete this._onEaseFrame;
        }
        if (this._onEaseEnd) {
            var onEaseEnd = this._onEaseEnd;
            delete this._onEaseEnd;
            onEaseEnd.call(this, easeId);
        }
        if (!allowGestures) {
            var handlers = this.handlers;
            if (handlers) {
                handlers.stop(false);
            }
        }
        return this;
    };
    Camera.prototype._ease = function _ease(frame, finish, options) {
        if (options.animate === false || options.duration === 0) {
            frame(1);
            finish();
        } else {
            this._easeStart = performance.browser.now();
            this._easeOptions = options;
            this._onEaseFrame = frame;
            this._onEaseEnd = finish;
            this._easeFrameId = this._requestRenderFrame(this._renderFrameCallback);
        }
    };
    Camera.prototype._renderFrameCallback = function _renderFrameCallback() {
        var t = Math.min((performance.browser.now() - this._easeStart) / this._easeOptions.duration, 1);
        this._onEaseFrame(this._easeOptions.easing(t));
        if (t < 1) {
            this._easeFrameId = this._requestRenderFrame(this._renderFrameCallback);
        } else {
            this.stop();
        }
    };
    Camera.prototype._normalizeBearing = function _normalizeBearing(bearing, currentBearing) {
        bearing = performance.wrap(bearing, -180, 180);
        var diff = Math.abs(bearing - currentBearing);
        if (Math.abs(bearing - 360 - currentBearing) < diff) {
            bearing -= 360;
        }
        if (Math.abs(bearing + 360 - currentBearing) < diff) {
            bearing += 360;
        }
        return bearing;
    };
    Camera.prototype._normalizeCenter = function _normalizeCenter(center) {
        var tr = this.transform;
        if (!tr.renderWorldCopies || tr.lngRange) {
            return;
        }
        var delta = center.lng - tr.center.lng;
        center.lng += delta > 180 ? -360 : delta < -180 ? 360 : 0;
    };
    return Camera;
}(performance.Evented);

var AttributionControl = function AttributionControl(options) {
    if (options === void 0)
        options = {};
    this.options = options;
    performance.bindAll([
        '_toggleAttribution',
        '_updateEditLink',
        '_updateData',
        '_updateCompact'
    ], this);
};
AttributionControl.prototype.getDefaultPosition = function getDefaultPosition() {
    return 'bottom-right';
};
AttributionControl.prototype.onAdd = function onAdd(map) {
    var compact = this.options && this.options.compact;
    this._map = map;
    this._container = DOM.create('div', 'mapboxgl-ctrl mapboxgl-ctrl-attrib');
    this._compactButton = DOM.create('button', 'mapboxgl-ctrl-attrib-button', this._container);
    this._compactButton.addEventListener('click', this._toggleAttribution);
    this._setElementTitle(this._compactButton, 'ToggleAttribution');
    this._innerContainer = DOM.create('div', 'mapboxgl-ctrl-attrib-inner', this._container);
    this._innerContainer.setAttribute('role', 'list');
    if (compact) {
        this._container.classList.add('mapboxgl-compact');
    }
    this._updateAttributions();
    this._updateEditLink();
    this._map.on('styledata', this._updateData);
    this._map.on('sourcedata', this._updateData);
    this._map.on('moveend', this._updateEditLink);
    if (compact === undefined) {
        this._map.on('resize', this._updateCompact);
        this._updateCompact();
    }
    return this._container;
};
AttributionControl.prototype.onRemove = function onRemove() {
    DOM.remove(this._container);
    this._map.off('styledata', this._updateData);
    this._map.off('sourcedata', this._updateData);
    this._map.off('moveend', this._updateEditLink);
    this._map.off('resize', this._updateCompact);
    this._map = undefined;
    this._attribHTML = undefined;
};
AttributionControl.prototype._setElementTitle = function _setElementTitle(element, title) {
    var str = this._map._getUIString('AttributionControl.' + title);
    element.title = str;
    element.setAttribute('aria-label', str);
};
AttributionControl.prototype._toggleAttribution = function _toggleAttribution() {
    if (this._container.classList.contains('mapboxgl-compact-show')) {
        this._container.classList.remove('mapboxgl-compact-show');
        this._compactButton.setAttribute('aria-pressed', 'false');
    } else {
        this._container.classList.add('mapboxgl-compact-show');
        this._compactButton.setAttribute('aria-pressed', 'true');
    }
};
AttributionControl.prototype._updateEditLink = function _updateEditLink() {
    var editLink = this._editLink;
    if (!editLink) {
        editLink = this._editLink = this._container.querySelector('.mapbox-improve-map');
    }
    var params = [
        {
            key: 'owner',
            value: this.styleOwner
        },
        {
            key: 'id',
            value: this.styleId
        },
        {
            key: 'access_token',
            value: this._map._requestManager._customAccessToken || performance.config.ACCESS_TOKEN
        }
    ];
    if (editLink) {
        var paramString = params.reduce(function (acc, next, i) {
            if (next.value) {
                acc += next.key + '=' + next.value + (i < params.length - 1 ? '&' : '');
            }
            return acc;
        }, '?');
        editLink.href = performance.config.FEEDBACK_URL + '/' + paramString + (this._map._hash ? this._map._hash.getHashString(true) : '');
        editLink.rel = 'noopener nofollow';
        this._setElementTitle(editLink, 'MapFeedback');
    }
};
AttributionControl.prototype._updateData = function _updateData(e) {
    if (e && (e.sourceDataType === 'metadata' || e.sourceDataType === 'visibility' || e.dataType === 'style')) {
        this._updateAttributions();
        this._updateEditLink();
    }
};
AttributionControl.prototype._updateAttributions = function _updateAttributions() {
    if (!this._map.style) {
        return;
    }
    var attributions = [];
    if (this.options.customAttribution) {
        if (Array.isArray(this.options.customAttribution)) {
            attributions = attributions.concat(this.options.customAttribution.map(function (attribution) {
                if (typeof attribution !== 'string') {
                    return '';
                }
                return attribution;
            }));
        } else if (typeof this.options.customAttribution === 'string') {
            attributions.push(this.options.customAttribution);
        }
    }
    if (this._map.style.stylesheet) {
        var stylesheet = this._map.style.stylesheet;
        this.styleOwner = stylesheet.owner;
        this.styleId = stylesheet.id;
    }
    var sourceCaches = this._map.style.sourceCaches;
    for (var id in sourceCaches) {
        var sourceCache = sourceCaches[id];
        if (sourceCache.used) {
            var source = sourceCache.getSource();
            if (source.attribution && attributions.indexOf(source.attribution) < 0) {
                attributions.push(source.attribution);
            }
        }
    }
    attributions.sort(function (a, b) {
        return a.length - b.length;
    });
    attributions = attributions.filter(function (attrib, i) {
        for (var j = i + 1; j < attributions.length; j++) {
            if (attributions[j].indexOf(attrib) >= 0) {
                return false;
            }
        }
        return true;
    });
    var attribHTML = attributions.join(' | ');
    if (attribHTML === this._attribHTML) {
        return;
    }
    this._attribHTML = attribHTML;
    if (attributions.length) {
        this._innerContainer.innerHTML = attribHTML;
        this._container.classList.remove('mapboxgl-attrib-empty');
    } else {
        this._container.classList.add('mapboxgl-attrib-empty');
    }
    this._editLink = null;
};
AttributionControl.prototype._updateCompact = function _updateCompact() {
    if (this._map.getCanvasContainer().offsetWidth <= 640) {
        this._container.classList.add('mapboxgl-compact');
    } else {
        this._container.classList.remove('mapboxgl-compact', 'mapboxgl-compact-show');
    }
};

var LogoControl = function LogoControl() {
    performance.bindAll(['_updateLogo'], this);
    performance.bindAll(['_updateCompact'], this);
};
LogoControl.prototype.onAdd = function onAdd(map) {
    this._map = map;
    this._container = DOM.create('div', 'mapboxgl-ctrl');
    var anchor = DOM.create('a', 'mapboxgl-ctrl-logo');
    anchor.target = '_blank';
    anchor.rel = 'noopener nofollow';
    anchor.href = 'https://www.mapbox.com/';
    anchor.setAttribute('aria-label', this._map._getUIString('LogoControl.Title'));
    anchor.setAttribute('rel', 'noopener nofollow');
    this._container.appendChild(anchor);
    this._container.style.display = 'none';
    this._map.on('sourcedata', this._updateLogo);
    this._updateLogo();
    this._map.on('resize', this._updateCompact);
    this._updateCompact();
    return this._container;
};
LogoControl.prototype.onRemove = function onRemove() {
    DOM.remove(this._container);
    this._map.off('sourcedata', this._updateLogo);
    this._map.off('resize', this._updateCompact);
};
LogoControl.prototype.getDefaultPosition = function getDefaultPosition() {
    return 'bottom-left';
};
LogoControl.prototype._updateLogo = function _updateLogo(e) {
    if (!e || e.sourceDataType === 'metadata') {
        this._container.style.display = this._logoRequired() ? 'block' : 'none';
    }
};
LogoControl.prototype._logoRequired = function _logoRequired() {
    if (!this._map.style) {
        return;
    }
    var sourceCaches = this._map.style.sourceCaches;
    for (var id in sourceCaches) {
        var source = sourceCaches[id].getSource();
        if (source.mapbox_logo) {
            return true;
        }
    }
    return false;
};
LogoControl.prototype._updateCompact = function _updateCompact() {
    var containerChildren = this._container.children;
    if (containerChildren.length) {
        var anchor = containerChildren[0];
        if (this._map.getCanvasContainer().offsetWidth < 250) {
            anchor.classList.add('mapboxgl-compact');
        } else {
            anchor.classList.remove('mapboxgl-compact');
        }
    }
};

var TaskQueue = function TaskQueue() {
    this._queue = [];
    this._id = 0;
    this._cleared = false;
    this._currentlyRunning = false;
};
TaskQueue.prototype.add = function add(callback) {
    var id = ++this._id;
    var queue = this._queue;
    queue.push({
        callback: callback,
        id: id,
        cancelled: false
    });
    return id;
};
TaskQueue.prototype.remove = function remove(id) {
    var running = this._currentlyRunning;
    var queue = running ? this._queue.concat(running) : this._queue;
    for (var i = 0, list = queue; i < list.length; i += 1) {
        var task = list[i];
        if (task.id === id) {
            task.cancelled = true;
            return;
        }
    }
};
TaskQueue.prototype.run = function run(timeStamp) {
    if (timeStamp === void 0)
        timeStamp = 0;
    var queue = this._currentlyRunning = this._queue;
    this._queue = [];
    for (var i = 0, list = queue; i < list.length; i += 1) {
        var task = list[i];
        if (task.cancelled) {
            continue;
        }
        task.callback(timeStamp);
        if (this._cleared) {
            break;
        }
    }
    this._cleared = false;
    this._currentlyRunning = false;
};
TaskQueue.prototype.clear = function clear() {
    if (this._currentlyRunning) {
        this._cleared = true;
    }
    this._queue = [];
};

var defaultLocale = {
    'AttributionControl.ToggleAttribution': 'Toggle attribution',
    'AttributionControl.MapFeedback': 'Map feedback',
    'FullscreenControl.Enter': 'Enter fullscreen',
    'FullscreenControl.Exit': 'Exit fullscreen',
    'GeolocateControl.FindMyLocation': 'Find my location',
    'GeolocateControl.LocationNotAvailable': 'Location not available',
    'LogoControl.Title': 'Mapbox logo',
    'NavigationControl.ResetBearing': 'Reset bearing to north',
    'NavigationControl.ZoomIn': 'Zoom in',
    'NavigationControl.ZoomOut': 'Zoom out',
    'ScaleControl.Feet': 'ft',
    'ScaleControl.Meters': 'm',
    'ScaleControl.Kilometers': 'km',
    'ScaleControl.Miles': 'mi',
    'ScaleControl.NauticalMiles': 'nm'
};

var HTMLImageElement = performance.window.HTMLImageElement;
var HTMLElement = performance.window.HTMLElement;
var ImageBitmap = performance.window.ImageBitmap;
var defaultMinZoom = -2;
var defaultMaxZoom = 22;
var defaultMinPitch = 0;
var defaultMaxPitch = 60;
var defaultOptions$1 = {
    center: [
        0,
        0
    ],
    zoom: 0,
    bearing: 0,
    pitch: 0,
    minZoom: defaultMinZoom,
    maxZoom: defaultMaxZoom,
    minPitch: defaultMinPitch,
    maxPitch: defaultMaxPitch,
    interactive: true,
    scrollZoom: true,
    boxZoom: true,
    dragRotate: true,
    dragPan: true,
    keyboard: true,
    doubleClickZoom: true,
    touchZoomRotate: true,
    touchPitch: true,
    bearingSnap: 7,
    clickTolerance: 3,
    pitchWithRotate: true,
    hash: false,
    attributionControl: true,
    failIfMajorPerformanceCaveat: false,
    preserveDrawingBuffer: false,
    trackResize: true,
    renderWorldCopies: true,
    refreshExpiredTiles: true,
    maxTileCacheSize: null,
    localIdeographFontFamily: 'sans-serif',
    transformRequest: null,
    accessToken: null,
    fadeDuration: 300,
    crossSourceCollisions: true
};
var Map = function (Camera) {
    function Map(options) {
        var this$1 = this;
        options = performance.extend({}, defaultOptions$1, options);
        if (options.minZoom != null && options.maxZoom != null && options.minZoom > options.maxZoom) {
            throw new Error('maxZoom must be greater than or equal to minZoom');
        }
        if (options.minPitch != null && options.maxPitch != null && options.minPitch > options.maxPitch) {
            throw new Error('maxPitch must be greater than or equal to minPitch');
        }
        if (options.minPitch != null && options.minPitch < defaultMinPitch) {
            throw new Error('minPitch must be greater than or equal to ' + defaultMinPitch);
        }
        if (options.maxPitch != null && options.maxPitch > defaultMaxPitch) {
            throw new Error('maxPitch must be less than or equal to ' + defaultMaxPitch);
        }
        var transform = new Transform(options.minZoom, options.maxZoom, options.minPitch, options.maxPitch, options.renderWorldCopies);
        Camera.call(this, transform, options);
        this._interactive = options.interactive;
        this._maxTileCacheSize = options.maxTileCacheSize;
        this._failIfMajorPerformanceCaveat = options.failIfMajorPerformanceCaveat;
        this._preserveDrawingBuffer = options.preserveDrawingBuffer;
        this._antialias = options.antialias;
        this._trackResize = options.trackResize;
        this._bearingSnap = options.bearingSnap;
        this._refreshExpiredTiles = options.refreshExpiredTiles;
        this._fadeDuration = options.fadeDuration;
        this._crossSourceCollisions = options.crossSourceCollisions;
        this._crossFadingFactor = 1;
        this._collectResourceTiming = options.collectResourceTiming;
        this._renderTaskQueue = new TaskQueue();
        this._controls = [];
        this._mapId = performance.uniqueId();
        this._locale = performance.extend({}, defaultLocale, options.locale);
        this._clickTolerance = options.clickTolerance;
        this._requestManager = new performance.RequestManager(options.transformRequest, options.accessToken);
        if (typeof options.container === 'string') {
            this._container = performance.window.document.getElementById(options.container);
            if (!this._container) {
                throw new Error('Container \'' + options.container + '\' not found.');
            }
        } else if (options.container instanceof HTMLElement) {
            this._container = options.container;
        } else {
            throw new Error('Invalid type: \'container\' must be a String or HTMLElement.');
        }
        if (options.maxBounds) {
            this.setMaxBounds(options.maxBounds);
        }
        performance.bindAll([
            '_onWindowOnline',
            '_onWindowResize',
            '_onMapScroll',
            '_contextLost',
            '_contextRestored'
        ], this);
        this._setupContainer();
        this._setupPainter();
        if (this.painter === undefined) {
            throw new Error('Failed to initialize WebGL.');
        }
        this.on('move', function () {
            return this$1._update(false);
        });
        this.on('moveend', function () {
            return this$1._update(false);
        });
        this.on('zoom', function () {
            return this$1._update(true);
        });
        if (typeof performance.window !== 'undefined') {
            performance.window.addEventListener('online', this._onWindowOnline, false);
            performance.window.addEventListener('resize', this._onWindowResize, false);
            performance.window.addEventListener('orientationchange', this._onWindowResize, false);
        }
        this.handlers = new HandlerManager(this, options);
        var hashName = typeof options.hash === 'string' && options.hash || undefined;
        this._hash = options.hash && new Hash(hashName).addTo(this);
        if (!this._hash || !this._hash._onHashChange()) {
            this.jumpTo({
                center: options.center,
                zoom: options.zoom,
                bearing: options.bearing,
                pitch: options.pitch
            });
            if (options.bounds) {
                this.resize();
                this.fitBounds(options.bounds, performance.extend({}, options.fitBoundsOptions, { duration: 0 }));
            }
        }
        this.resize();
        this._localIdeographFontFamily = options.localIdeographFontFamily;
        if (options.style) {
            this.setStyle(options.style, { localIdeographFontFamily: options.localIdeographFontFamily });
        }
        if (options.attributionControl) {
            this.addControl(new AttributionControl({ customAttribution: options.customAttribution }));
        }
        this.addControl(new LogoControl(), options.logoPosition);
        this.on('style.load', function () {
            if (this$1.transform.unmodified) {
                this$1.jumpTo(this$1.style.stylesheet);
            }
        });
        this.on('data', function (event) {
            this$1._update(event.dataType === 'style');
            this$1.fire(new performance.Event(event.dataType + 'data', event));
        });
        this.on('dataloading', function (event) {
            this$1.fire(new performance.Event(event.dataType + 'dataloading', event));
        });
    }
    if (Camera)
        Map.__proto__ = Camera;
    Map.prototype = Object.create(Camera && Camera.prototype);
    Map.prototype.constructor = Map;
    var prototypeAccessors = {
        showTileBoundaries: { configurable: true },
        showPadding: { configurable: true },
        showCollisionBoxes: { configurable: true },
        showOverdrawInspector: { configurable: true },
        repaint: { configurable: true },
        vertices: { configurable: true },
        version: { configurable: true }
    };
    Map.prototype._getMapId = function _getMapId() {
        return this._mapId;
    };
    Map.prototype.addControl = function addControl(control, position) {
        if (position === undefined) {
            if (control.getDefaultPosition) {
                position = control.getDefaultPosition();
            } else {
                position = 'top-right';
            }
        }
        if (!control || !control.onAdd) {
            return this.fire(new performance.ErrorEvent(new Error('Invalid argument to map.addControl(). Argument must be a control with onAdd and onRemove methods.')));
        }
        var controlElement = control.onAdd(this);
        this._controls.push(control);
        var positionContainer = this._controlPositions[position];
        if (position.indexOf('bottom') !== -1) {
            positionContainer.insertBefore(controlElement, positionContainer.firstChild);
        } else {
            positionContainer.appendChild(controlElement);
        }
        return this;
    };
    Map.prototype.removeControl = function removeControl(control) {
        if (!control || !control.onRemove) {
            return this.fire(new performance.ErrorEvent(new Error('Invalid argument to map.removeControl(). Argument must be a control with onAdd and onRemove methods.')));
        }
        var ci = this._controls.indexOf(control);
        if (ci > -1) {
            this._controls.splice(ci, 1);
        }
        control.onRemove(this);
        return this;
    };
    Map.prototype.hasControl = function hasControl(control) {
        return this._controls.indexOf(control) > -1;
    };
    Map.prototype.resize = function resize(eventData) {
        var dimensions = this._containerDimensions();
        var width = dimensions[0];
        var height = dimensions[1];
        this._resizeCanvas(width, height);
        this.transform.resize(width, height);
        this.painter.resize(width, height);
        var fireMoving = !this._moving;
        if (fireMoving) {
            this.stop();
            this.fire(new performance.Event('movestart', eventData)).fire(new performance.Event('move', eventData));
        }
        this.fire(new performance.Event('resize', eventData));
        if (fireMoving) {
            this.fire(new performance.Event('moveend', eventData));
        }
        return this;
    };
    Map.prototype.getBounds = function getBounds() {
        return this.transform.getBounds();
    };
    Map.prototype.getMaxBounds = function getMaxBounds() {
        return this.transform.getMaxBounds();
    };
    Map.prototype.setMaxBounds = function setMaxBounds(bounds) {
        this.transform.setMaxBounds(performance.LngLatBounds.convert(bounds));
        return this._update();
    };
    Map.prototype.setMinZoom = function setMinZoom(minZoom) {
        minZoom = minZoom === null || minZoom === undefined ? defaultMinZoom : minZoom;
        if (minZoom >= defaultMinZoom && minZoom <= this.transform.maxZoom) {
            this.transform.minZoom = minZoom;
            this._update();
            if (this.getZoom() < minZoom) {
                this.setZoom(minZoom);
            }
            return this;
        } else {
            throw new Error('minZoom must be between ' + defaultMinZoom + ' and the current maxZoom, inclusive');
        }
    };
    Map.prototype.getMinZoom = function getMinZoom() {
        return this.transform.minZoom;
    };
    Map.prototype.setMaxZoom = function setMaxZoom(maxZoom) {
        maxZoom = maxZoom === null || maxZoom === undefined ? defaultMaxZoom : maxZoom;
        if (maxZoom >= this.transform.minZoom) {
            this.transform.maxZoom = maxZoom;
            this._update();
            if (this.getZoom() > maxZoom) {
                this.setZoom(maxZoom);
            }
            return this;
        } else {
            throw new Error('maxZoom must be greater than the current minZoom');
        }
    };
    Map.prototype.getMaxZoom = function getMaxZoom() {
        return this.transform.maxZoom;
    };
    Map.prototype.setMinPitch = function setMinPitch(minPitch) {
        minPitch = minPitch === null || minPitch === undefined ? defaultMinPitch : minPitch;
        if (minPitch < defaultMinPitch) {
            throw new Error('minPitch must be greater than or equal to ' + defaultMinPitch);
        }
        if (minPitch >= defaultMinPitch && minPitch <= this.transform.maxPitch) {
            this.transform.minPitch = minPitch;
            this._update();
            if (this.getPitch() < minPitch) {
                this.setPitch(minPitch);
            }
            return this;
        } else {
            throw new Error('minPitch must be between ' + defaultMinPitch + ' and the current maxPitch, inclusive');
        }
    };
    Map.prototype.getMinPitch = function getMinPitch() {
        return this.transform.minPitch;
    };
    Map.prototype.setMaxPitch = function setMaxPitch(maxPitch) {
        maxPitch = maxPitch === null || maxPitch === undefined ? defaultMaxPitch : maxPitch;
        if (maxPitch > defaultMaxPitch) {
            throw new Error('maxPitch must be less than or equal to ' + defaultMaxPitch);
        }
        if (maxPitch >= this.transform.minPitch) {
            this.transform.maxPitch = maxPitch;
            this._update();
            if (this.getPitch() > maxPitch) {
                this.setPitch(maxPitch);
            }
            return this;
        } else {
            throw new Error('maxPitch must be greater than the current minPitch');
        }
    };
    Map.prototype.getMaxPitch = function getMaxPitch() {
        return this.transform.maxPitch;
    };
    Map.prototype.getRenderWorldCopies = function getRenderWorldCopies() {
        return this.transform.renderWorldCopies;
    };
    Map.prototype.setRenderWorldCopies = function setRenderWorldCopies(renderWorldCopies) {
        this.transform.renderWorldCopies = renderWorldCopies;
        return this._update();
    };
    Map.prototype.project = function project(lnglat) {
        return this.transform.locationPoint(performance.LngLat.convert(lnglat));
    };
    Map.prototype.unproject = function unproject(point) {
        return this.transform.pointLocation(performance.Point.convert(point));
    };
    Map.prototype.isMoving = function isMoving() {
        return this._moving || this.handlers.isMoving();
    };
    Map.prototype.isZooming = function isZooming() {
        return this._zooming || this.handlers.isZooming();
    };
    Map.prototype.isRotating = function isRotating() {
        return this._rotating || this.handlers.isRotating();
    };
    Map.prototype._createDelegatedListener = function _createDelegatedListener(type, layerId, listener) {
        var this$1 = this;
        var obj;
        if (type === 'mouseenter' || type === 'mouseover') {
            var mousein = false;
            var mousemove = function (e) {
                var features = this$1.getLayer(layerId) ? this$1.queryRenderedFeatures(e.point, { layers: [layerId] }) : [];
                if (!features.length) {
                    mousein = false;
                } else if (!mousein) {
                    mousein = true;
                    listener.call(this$1, new MapMouseEvent(type, this$1, e.originalEvent, { features: features }));
                }
            };
            var mouseout = function () {
                mousein = false;
            };
            return {
                layer: layerId,
                listener: listener,
                delegates: {
                    mousemove: mousemove,
                    mouseout: mouseout
                }
            };
        } else if (type === 'mouseleave' || type === 'mouseout') {
            var mousein$1 = false;
            var mousemove$1 = function (e) {
                var features = this$1.getLayer(layerId) ? this$1.queryRenderedFeatures(e.point, { layers: [layerId] }) : [];
                if (features.length) {
                    mousein$1 = true;
                } else if (mousein$1) {
                    mousein$1 = false;
                    listener.call(this$1, new MapMouseEvent(type, this$1, e.originalEvent));
                }
            };
            var mouseout$1 = function (e) {
                if (mousein$1) {
                    mousein$1 = false;
                    listener.call(this$1, new MapMouseEvent(type, this$1, e.originalEvent));
                }
            };
            return {
                layer: layerId,
                listener: listener,
                delegates: {
                    mousemove: mousemove$1,
                    mouseout: mouseout$1
                }
            };
        } else {
            var delegate = function (e) {
                var features = this$1.getLayer(layerId) ? this$1.queryRenderedFeatures(e.point, { layers: [layerId] }) : [];
                if (features.length) {
                    e.features = features;
                    listener.call(this$1, e);
                    delete e.features;
                }
            };
            return {
                layer: layerId,
                listener: listener,
                delegates: (obj = {}, obj[type] = delegate, obj)
            };
        }
    };
    Map.prototype.on = function on(type, layerId, listener) {
        if (listener === undefined) {
            return Camera.prototype.on.call(this, type, layerId);
        }
        var delegatedListener = this._createDelegatedListener(type, layerId, listener);
        this._delegatedListeners = this._delegatedListeners || {};
        this._delegatedListeners[type] = this._delegatedListeners[type] || [];
        this._delegatedListeners[type].push(delegatedListener);
        for (var event in delegatedListener.delegates) {
            this.on(event, delegatedListener.delegates[event]);
        }
        return this;
    };
    Map.prototype.once = function once(type, layerId, listener) {
        if (listener === undefined) {
            return Camera.prototype.once.call(this, type, layerId);
        }
        var delegatedListener = this._createDelegatedListener(type, layerId, listener);
        for (var event in delegatedListener.delegates) {
            this.once(event, delegatedListener.delegates[event]);
        }
        return this;
    };
    Map.prototype.off = function off(type, layerId, listener) {
        var this$1 = this;
        if (listener === undefined) {
            return Camera.prototype.off.call(this, type, layerId);
        }
        var removeDelegatedListener = function (delegatedListeners) {
            var listeners = delegatedListeners[type];
            for (var i = 0; i < listeners.length; i++) {
                var delegatedListener = listeners[i];
                if (delegatedListener.layer === layerId && delegatedListener.listener === listener) {
                    for (var event in delegatedListener.delegates) {
                        this$1.off(event, delegatedListener.delegates[event]);
                    }
                    listeners.splice(i, 1);
                    return this$1;
                }
            }
        };
        if (this._delegatedListeners && this._delegatedListeners[type]) {
            removeDelegatedListener(this._delegatedListeners);
        }
        return this;
    };
    Map.prototype.queryRenderedFeatures = function queryRenderedFeatures(geometry, options) {
        if (!this.style) {
            return [];
        }
        if (options === undefined && geometry !== undefined && !(geometry instanceof performance.Point) && !Array.isArray(geometry)) {
            options = geometry;
            geometry = undefined;
        }
        options = options || {};
        geometry = geometry || [
            [
                0,
                0
            ],
            [
                this.transform.width,
                this.transform.height
            ]
        ];
        var queryGeometry;
        if (geometry instanceof performance.Point || typeof geometry[0] === 'number') {
            queryGeometry = [performance.Point.convert(geometry)];
        } else {
            var tl = performance.Point.convert(geometry[0]);
            var br = performance.Point.convert(geometry[1]);
            queryGeometry = [
                tl,
                new performance.Point(br.x, tl.y),
                br,
                new performance.Point(tl.x, br.y),
                tl
            ];
        }
        return this.style.queryRenderedFeatures(queryGeometry, options, this.transform);
    };
    Map.prototype.querySourceFeatures = function querySourceFeatures(sourceId, parameters) {
        return this.style.querySourceFeatures(sourceId, parameters);
    };
    Map.prototype.setStyle = function setStyle(style, options) {
        options = performance.extend({}, { localIdeographFontFamily: this._localIdeographFontFamily }, options);
        if (options.diff !== false && options.localIdeographFontFamily === this._localIdeographFontFamily && this.style && style) {
            this._diffStyle(style, options);
            return this;
        } else {
            this._localIdeographFontFamily = options.localIdeographFontFamily;
            return this._updateStyle(style, options);
        }
    };
    Map.prototype._getUIString = function _getUIString(key) {
        var str = this._locale[key];
        if (str == null) {
            throw new Error('Missing UI string \'' + key + '\'');
        }
        return str;
    };
    Map.prototype._updateStyle = function _updateStyle(style, options) {
        if (this.style) {
            this.style.setEventedParent(null);
            this.style._remove();
        }
        if (!style) {
            delete this.style;
            return this;
        } else {
            this.style = new Style(this, options || {});
        }
        this.style.setEventedParent(this, { style: this.style });
        if (typeof style === 'string') {
            this.style.loadURL(style);
        } else {
            this.style.loadJSON(style);
        }
        return this;
    };
    Map.prototype._lazyInitEmptyStyle = function _lazyInitEmptyStyle() {
        if (!this.style) {
            this.style = new Style(this, {});
            this.style.setEventedParent(this, { style: this.style });
            this.style.loadEmpty();
        }
    };
    Map.prototype._diffStyle = function _diffStyle(style, options) {
        var this$1 = this;
        if (typeof style === 'string') {
            var url = this._requestManager.normalizeStyleURL(style);
            var request = this._requestManager.transformRequest(url, performance.ResourceType.Style);
            performance.getJSON(request, function (error, json) {
                if (error) {
                    this$1.fire(new performance.ErrorEvent(error));
                } else if (json) {
                    this$1._updateDiff(json, options);
                }
            });
        } else if (typeof style === 'object') {
            this._updateDiff(style, options);
        }
    };
    Map.prototype._updateDiff = function _updateDiff(style, options) {
        try {
            if (this.style.setState(style)) {
                this._update(true);
            }
        } catch (e) {
            performance.warnOnce('Unable to perform style diff: ' + (e.message || e.error || e) + '.  Rebuilding the style from scratch.');
            this._updateStyle(style, options);
        }
    };
    Map.prototype.getStyle = function getStyle() {
        if (this.style) {
            return this.style.serialize();
        }
    };
    Map.prototype.isStyleLoaded = function isStyleLoaded() {
        if (!this.style) {
            return performance.warnOnce('There is no style added to the map.');
        }
        return this.style.loaded();
    };
    Map.prototype.addSource = function addSource(id, source) {
        this._lazyInitEmptyStyle();
        this.style.addSource(id, source);
        return this._update(true);
    };
    Map.prototype.isSourceLoaded = function isSourceLoaded(id) {
        var source = this.style && this.style.sourceCaches[id];
        if (source === undefined) {
            this.fire(new performance.ErrorEvent(new Error('There is no source with ID \'' + id + '\'')));
            return;
        }
        return source.loaded();
    };
    Map.prototype.areTilesLoaded = function areTilesLoaded() {
        var sources = this.style && this.style.sourceCaches;
        for (var id in sources) {
            var source = sources[id];
            var tiles = source._tiles;
            for (var t in tiles) {
                var tile = tiles[t];
                if (!(tile.state === 'loaded' || tile.state === 'errored')) {
                    return false;
                }
            }
        }
        return true;
    };
    Map.prototype.addSourceType = function addSourceType(name, SourceType, callback) {
        this._lazyInitEmptyStyle();
        return this.style.addSourceType(name, SourceType, callback);
    };
    Map.prototype.removeSource = function removeSource(id) {
        this.style.removeSource(id);
        return this._update(true);
    };
    Map.prototype.getSource = function getSource(id) {
        return this.style.getSource(id);
    };
    Map.prototype.addImage = function addImage(id, image, ref) {
        if (ref === void 0)
            ref = {};
        var pixelRatio = ref.pixelRatio;
        if (pixelRatio === void 0)
            pixelRatio = 1;
        var sdf = ref.sdf;
        if (sdf === void 0)
            sdf = false;
        var stretchX = ref.stretchX;
        var stretchY = ref.stretchY;
        var content = ref.content;
        this._lazyInitEmptyStyle();
        var version = 0;
        if (image instanceof HTMLImageElement || ImageBitmap && image instanceof ImageBitmap) {
            var ref$1 = performance.browser.getImageData(image);
            var width = ref$1.width;
            var height = ref$1.height;
            var data = ref$1.data;
            this.style.addImage(id, {
                data: new performance.RGBAImage({
                    width: width,
                    height: height
                }, data),
                pixelRatio: pixelRatio,
                stretchX: stretchX,
                stretchY: stretchY,
                content: content,
                sdf: sdf,
                version: version
            });
        } else if (image.width === undefined || image.height === undefined) {
            return this.fire(new performance.ErrorEvent(new Error('Invalid arguments to map.addImage(). The second argument must be an `HTMLImageElement`, `ImageData`, `ImageBitmap`, ' + 'or object with `width`, `height`, and `data` properties with the same format as `ImageData`')));
        } else {
            var width$1 = image.width;
            var height$1 = image.height;
            var data$1 = image.data;
            var userImage = image;
            this.style.addImage(id, {
                data: new performance.RGBAImage({
                    width: width$1,
                    height: height$1
                }, new Uint8Array(data$1)),
                pixelRatio: pixelRatio,
                stretchX: stretchX,
                stretchY: stretchY,
                content: content,
                sdf: sdf,
                version: version,
                userImage: userImage
            });
            if (userImage.onAdd) {
                userImage.onAdd(this, id);
            }
        }
    };
    Map.prototype.updateImage = function updateImage(id, image) {
        var existingImage = this.style.getImage(id);
        if (!existingImage) {
            return this.fire(new performance.ErrorEvent(new Error('The map has no image with that id. If you are adding a new image use `map.addImage(...)` instead.')));
        }
        var imageData = image instanceof HTMLImageElement || ImageBitmap && image instanceof ImageBitmap ? performance.browser.getImageData(image) : image;
        var width = imageData.width;
        var height = imageData.height;
        var data = imageData.data;
        if (width === undefined || height === undefined) {
            return this.fire(new performance.ErrorEvent(new Error('Invalid arguments to map.updateImage(). The second argument must be an `HTMLImageElement`, `ImageData`, `ImageBitmap`, ' + 'or object with `width`, `height`, and `data` properties with the same format as `ImageData`')));
        }
        if (width !== existingImage.data.width || height !== existingImage.data.height) {
            return this.fire(new performance.ErrorEvent(new Error('The width and height of the updated image must be that same as the previous version of the image')));
        }
        var copy = !(image instanceof HTMLImageElement || ImageBitmap && image instanceof ImageBitmap);
        existingImage.data.replace(data, copy);
        this.style.updateImage(id, existingImage);
    };
    Map.prototype.hasImage = function hasImage(id) {
        if (!id) {
            this.fire(new performance.ErrorEvent(new Error('Missing required image id')));
            return false;
        }
        return !!this.style.getImage(id);
    };
    Map.prototype.removeImage = function removeImage(id) {
        this.style.removeImage(id);
    };
    Map.prototype.loadImage = function loadImage(url, callback) {
        performance.getImage(this._requestManager.transformRequest(url, performance.ResourceType.Image), callback);
    };
    Map.prototype.listImages = function listImages() {
        return this.style.listImages();
    };
    Map.prototype.addLayer = function addLayer(layer, beforeId) {
        this._lazyInitEmptyStyle();
        this.style.addLayer(layer, beforeId);
        return this._update(true);
    };
    Map.prototype.moveLayer = function moveLayer(id, beforeId) {
        this.style.moveLayer(id, beforeId);
        return this._update(true);
    };
    Map.prototype.removeLayer = function removeLayer(id) {
        this.style.removeLayer(id);
        return this._update(true);
    };
    Map.prototype.getLayer = function getLayer(id) {
        return this.style.getLayer(id);
    };
    Map.prototype.setLayerZoomRange = function setLayerZoomRange(layerId, minzoom, maxzoom) {
        this.style.setLayerZoomRange(layerId, minzoom, maxzoom);
        return this._update(true);
    };
    Map.prototype.setFilter = function setFilter(layerId, filter, options) {
        if (options === void 0)
            options = {};
        this.style.setFilter(layerId, filter, options);
        return this._update(true);
    };
    Map.prototype.getFilter = function getFilter(layerId) {
        return this.style.getFilter(layerId);
    };
    Map.prototype.setPaintProperty = function setPaintProperty(layerId, name, value, options) {
        if (options === void 0)
            options = {};
        this.style.setPaintProperty(layerId, name, value, options);
        return this._update(true);
    };
    Map.prototype.getPaintProperty = function getPaintProperty(layerId, name) {
        return this.style.getPaintProperty(layerId, name);
    };
    Map.prototype.setLayoutProperty = function setLayoutProperty(layerId, name, value, options) {
        if (options === void 0)
            options = {};
        this.style.setLayoutProperty(layerId, name, value, options);
        return this._update(true);
    };
    Map.prototype.getLayoutProperty = function getLayoutProperty(layerId, name) {
        return this.style.getLayoutProperty(layerId, name);
    };
    Map.prototype.setLight = function setLight(light, options) {
        if (options === void 0)
            options = {};
        this._lazyInitEmptyStyle();
        this.style.setLight(light, options);
        return this._update(true);
    };
    Map.prototype.getLight = function getLight() {
        return this.style.getLight();
    };
    Map.prototype.setFeatureState = function setFeatureState(feature, state) {
        this.style.setFeatureState(feature, state);
        return this._update();
    };
    Map.prototype.removeFeatureState = function removeFeatureState(target, key) {
        this.style.removeFeatureState(target, key);
        return this._update();
    };
    Map.prototype.getFeatureState = function getFeatureState(feature) {
        return this.style.getFeatureState(feature);
    };
    Map.prototype.getContainer = function getContainer() {
        return this._container;
    };
    Map.prototype.getCanvasContainer = function getCanvasContainer() {
        return this._canvasContainer;
    };
    Map.prototype.getCanvas = function getCanvas() {
        return this._canvas;
    };
    Map.prototype._containerDimensions = function _containerDimensions() {
        var width = 0;
        var height = 0;
        if (this._container) {
            width = this._container.clientWidth || 400;
            height = this._container.clientHeight || 300;
        }
        return [
            width,
            height
        ];
    };
    Map.prototype._detectMissingCSS = function _detectMissingCSS() {
        var computedColor = performance.window.getComputedStyle(this._missingCSSCanary).getPropertyValue('background-color');
        if (computedColor !== 'rgb(250, 128, 114)') {
            performance.warnOnce('This page appears to be missing CSS declarations for ' + 'Mapbox GL JS, which may cause the map to display incorrectly. ' + 'Please ensure your page includes mapbox-gl.css, as described ' + 'in https://www.mapbox.com/mapbox-gl-js/api/.');
        }
    };
    Map.prototype._setupContainer = function _setupContainer() {
        var container = this._container;
        container.classList.add('mapboxgl-map');
        var missingCSSCanary = this._missingCSSCanary = DOM.create('div', 'mapboxgl-canary', container);
        missingCSSCanary.style.visibility = 'hidden';
        this._detectMissingCSS();
        var canvasContainer = this._canvasContainer = DOM.create('div', 'mapboxgl-canvas-container', container);
        if (this._interactive) {
            canvasContainer.classList.add('mapboxgl-interactive');
        }
        this._canvas = DOM.create('canvas', 'mapboxgl-canvas', canvasContainer);
        this._canvas.addEventListener('webglcontextlost', this._contextLost, false);
        this._canvas.addEventListener('webglcontextrestored', this._contextRestored, false);
        this._canvas.setAttribute('tabindex', '0');
        this._canvas.setAttribute('aria-label', 'Map');
        this._canvas.setAttribute('role', 'region');
        var dimensions = this._containerDimensions();
        this._resizeCanvas(dimensions[0], dimensions[1]);
        var controlContainer = this._controlContainer = DOM.create('div', 'mapboxgl-control-container', container);
        var positions = this._controlPositions = {};
        [
            'top-left',
            'top-right',
            'bottom-left',
            'bottom-right'
        ].forEach(function (positionName) {
            positions[positionName] = DOM.create('div', 'mapboxgl-ctrl-' + positionName, controlContainer);
        });
        this._container.addEventListener('scroll', this._onMapScroll, false);
    };
    Map.prototype._resizeCanvas = function _resizeCanvas(width, height) {
        var pixelRatio = performance.browser.devicePixelRatio || 1;
        this._canvas.width = pixelRatio * width;
        this._canvas.height = pixelRatio * height;
        this._canvas.style.width = width + 'px';
        this._canvas.style.height = height + 'px';
    };
    Map.prototype._setupPainter = function _setupPainter() {
        var attributes = performance.extend({}, mapboxGlSupported.webGLContextAttributes, {
            failIfMajorPerformanceCaveat: this._failIfMajorPerformanceCaveat,
            preserveDrawingBuffer: this._preserveDrawingBuffer,
            antialias: this._antialias || false
        });
        var gl = this._canvas.getContext('webgl', attributes) || this._canvas.getContext('experimental-webgl', attributes);
        if (!gl) {
            this.fire(new performance.ErrorEvent(new Error('Failed to initialize WebGL')));
            return;
        }
        this.painter = new Painter(gl, this.transform);
        performance.webpSupported.testSupport(gl);
    };
    Map.prototype._contextLost = function _contextLost(event) {
        event.preventDefault();
        if (this._frame) {
            this._frame.cancel();
            this._frame = null;
        }
        this.fire(new performance.Event('webglcontextlost', { originalEvent: event }));
    };
    Map.prototype._contextRestored = function _contextRestored(event) {
        this._setupPainter();
        this.resize();
        this._update();
        this.fire(new performance.Event('webglcontextrestored', { originalEvent: event }));
    };
    Map.prototype._onMapScroll = function _onMapScroll(event) {
        if (event.target !== this._container) {
            return;
        }
        this._container.scrollTop = 0;
        this._container.scrollLeft = 0;
        return false;
    };
    Map.prototype.loaded = function loaded() {
        return !this._styleDirty && !this._sourcesDirty && !!this.style && this.style.loaded();
    };
    Map.prototype._update = function _update(updateStyle) {
        if (!this.style) {
            return this;
        }
        this._styleDirty = this._styleDirty || updateStyle;
        this._sourcesDirty = true;
        this.triggerRepaint();
        return this;
    };
    Map.prototype._requestRenderFrame = function _requestRenderFrame(callback) {
        this._update();
        return this._renderTaskQueue.add(callback);
    };
    Map.prototype._cancelRenderFrame = function _cancelRenderFrame(id) {
        this._renderTaskQueue.remove(id);
    };
    Map.prototype._render = function _render(paintStartTimeStamp) {
        var this$1 = this;
        var gpuTimer, frameStartTime = 0;
        var extTimerQuery = this.painter.context.extTimerQuery;
        if (this.listens('gpu-timing-frame')) {
            gpuTimer = extTimerQuery.createQueryEXT();
            extTimerQuery.beginQueryEXT(extTimerQuery.TIME_ELAPSED_EXT, gpuTimer);
            frameStartTime = performance.browser.now();
        }
        this.painter.context.setDirty();
        this.painter.setBaseState();
        this._renderTaskQueue.run(paintStartTimeStamp);
        if (this._removed) {
            return;
        }
        var crossFading = false;
        if (this.style && this._styleDirty) {
            this._styleDirty = false;
            var zoom = this.transform.zoom;
            var now = performance.browser.now();
            this.style.zoomHistory.update(zoom, now);
            var parameters = new performance.EvaluationParameters(zoom, {
                now: now,
                fadeDuration: this._fadeDuration,
                zoomHistory: this.style.zoomHistory,
                transition: this.style.getTransition()
            });
            var factor = parameters.crossFadingFactor();
            if (factor !== 1 || factor !== this._crossFadingFactor) {
                crossFading = true;
                this._crossFadingFactor = factor;
            }
            this.style.update(parameters);
        }
        if (this.style && this._sourcesDirty) {
            this._sourcesDirty = false;
            this.style._updateSources(this.transform);
        }
        this._placementDirty = this.style && this.style._updatePlacement(this.painter.transform, this.showCollisionBoxes, this._fadeDuration, this._crossSourceCollisions);
        this.painter.render(this.style, {
            showTileBoundaries: this.showTileBoundaries,
            showOverdrawInspector: this._showOverdrawInspector,
            rotating: this.isRotating(),
            zooming: this.isZooming(),
            moving: this.isMoving(),
            fadeDuration: this._fadeDuration,
            showPadding: this.showPadding,
            gpuTiming: !!this.listens('gpu-timing-layer')
        });
        this.fire(new performance.Event('render'));
        if (this.loaded() && !this._loaded) {
            this._loaded = true;
            this.fire(new performance.Event('load'));
        }
        if (this.style && (this.style.hasTransitions() || crossFading)) {
            this._styleDirty = true;
        }
        if (this.style && !this._placementDirty) {
            this.style._releaseSymbolFadeTiles();
        }
        if (this.listens('gpu-timing-frame')) {
            var renderCPUTime = performance.browser.now() - frameStartTime;
            extTimerQuery.endQueryEXT(extTimerQuery.TIME_ELAPSED_EXT, gpuTimer);
            setTimeout(function () {
                var renderGPUTime = extTimerQuery.getQueryObjectEXT(gpuTimer, extTimerQuery.QUERY_RESULT_EXT) / (1000 * 1000);
                extTimerQuery.deleteQueryEXT(gpuTimer);
                this$1.fire(new performance.Event('gpu-timing-frame', {
                    cpuTime: renderCPUTime,
                    gpuTime: renderGPUTime
                }));
            }, 50);
        }
        if (this.listens('gpu-timing-layer')) {
            var frameLayerQueries = this.painter.collectGpuTimers();
            setTimeout(function () {
                var renderedLayerTimes = this$1.painter.queryGpuTimers(frameLayerQueries);
                this$1.fire(new performance.Event('gpu-timing-layer', { layerTimes: renderedLayerTimes }));
            }, 50);
        }
        var somethingDirty = this._sourcesDirty || this._styleDirty || this._placementDirty;
        if (somethingDirty || this._repaint) {
            this.triggerRepaint();
        } else if (!this.isMoving() && this.loaded()) {
            this.fire(new performance.Event('idle'));
        }
        if (this._loaded && !this._fullyLoaded && !somethingDirty) {
            this._fullyLoaded = true;
        }
        return this;
    };
    Map.prototype.remove = function remove() {
        if (this._hash) {
            this._hash.remove();
        }
        for (var i = 0, list = this._controls; i < list.length; i += 1) {
            var control = list[i];
            control.onRemove(this);
        }
        this._controls = [];
        if (this._frame) {
            this._frame.cancel();
            this._frame = null;
        }
        this._renderTaskQueue.clear();
        this.painter.destroy();
        this.handlers.destroy();
        delete this.handlers;
        this.setStyle(null);
        if (typeof performance.window !== 'undefined') {
            performance.window.removeEventListener('resize', this._onWindowResize, false);
            performance.window.removeEventListener('orientationchange', this._onWindowResize, false);
            performance.window.removeEventListener('online', this._onWindowOnline, false);
        }
        var extension = this.painter.context.gl.getExtension('WEBGL_lose_context');
        if (extension) {
            extension.loseContext();
        }
        removeNode(this._canvasContainer);
        removeNode(this._controlContainer);
        removeNode(this._missingCSSCanary);
        this._container.classList.remove('mapboxgl-map');
        this._removed = true;
        this.fire(new performance.Event('remove'));
    };
    Map.prototype.triggerRepaint = function triggerRepaint() {
        var this$1 = this;
        if (this.style && !this._frame) {
            this._frame = performance.browser.frame(function (paintStartTimeStamp) {
                this$1._frame = null;
                this$1._render(paintStartTimeStamp);
            });
        }
    };
    Map.prototype._onWindowOnline = function _onWindowOnline() {
        this._update();
    };
    Map.prototype._onWindowResize = function _onWindowResize(event) {
        if (this._trackResize) {
            this.resize({ originalEvent: event })._update();
        }
    };
    prototypeAccessors.showTileBoundaries.get = function () {
        return !!this._showTileBoundaries;
    };
    prototypeAccessors.showTileBoundaries.set = function (value) {
        if (this._showTileBoundaries === value) {
            return;
        }
        this._showTileBoundaries = value;
        this._update();
    };
    prototypeAccessors.showPadding.get = function () {
        return !!this._showPadding;
    };
    prototypeAccessors.showPadding.set = function (value) {
        if (this._showPadding === value) {
            return;
        }
        this._showPadding = value;
        this._update();
    };
    prototypeAccessors.showCollisionBoxes.get = function () {
        return !!this._showCollisionBoxes;
    };
    prototypeAccessors.showCollisionBoxes.set = function (value) {
        if (this._showCollisionBoxes === value) {
            return;
        }
        this._showCollisionBoxes = value;
        if (value) {
            this.style._generateCollisionBoxes();
        } else {
            this._update();
        }
    };
    prototypeAccessors.showOverdrawInspector.get = function () {
        return !!this._showOverdrawInspector;
    };
    prototypeAccessors.showOverdrawInspector.set = function (value) {
        if (this._showOverdrawInspector === value) {
            return;
        }
        this._showOverdrawInspector = value;
        this._update();
    };
    prototypeAccessors.repaint.get = function () {
        return !!this._repaint;
    };
    prototypeAccessors.repaint.set = function (value) {
        if (this._repaint !== value) {
            this._repaint = value;
            this.triggerRepaint();
        }
    };
    prototypeAccessors.vertices.get = function () {
        return !!this._vertices;
    };
    prototypeAccessors.vertices.set = function (value) {
        this._vertices = value;
        this._update();
    };
    Map.prototype._setCacheLimits = function _setCacheLimits(limit, checkThreshold) {
        performance.setCacheLimits(limit, checkThreshold);
    };
    prototypeAccessors.version.get = function () {
        return performance.version;
    };
    Object.defineProperties(Map.prototype, prototypeAccessors);
    return Map;
}(Camera);
function removeNode(node) {
    if (node.parentNode) {
        node.parentNode.removeChild(node);
    }
}

var defaultOptions$2 = {
    showCompass: true,
    showZoom: true,
    visualizePitch: false
};
var NavigationControl = function NavigationControl(options) {
    var this$1 = this;
    this.options = performance.extend({}, defaultOptions$2, options);
    this._container = DOM.create('div', 'mapboxgl-ctrl mapboxgl-ctrl-group');
    this._container.addEventListener('contextmenu', function (e) {
        return e.preventDefault();
    });
    if (this.options.showZoom) {
        performance.bindAll([
            '_setButtonTitle',
            '_updateZoomButtons'
        ], this);
        this._zoomInButton = this._createButton('mapboxgl-ctrl-zoom-in', function (e) {
            return this$1._map.zoomIn({}, { originalEvent: e });
        });
        DOM.create('span', 'mapboxgl-ctrl-icon', this._zoomInButton).setAttribute('aria-hidden', true);
        this._zoomOutButton = this._createButton('mapboxgl-ctrl-zoom-out', function (e) {
            return this$1._map.zoomOut({}, { originalEvent: e });
        });
        DOM.create('span', 'mapboxgl-ctrl-icon', this._zoomOutButton).setAttribute('aria-hidden', true);
    }
    if (this.options.showCompass) {
        performance.bindAll(['_rotateCompassArrow'], this);
        this._compass = this._createButton('mapboxgl-ctrl-compass', function (e) {
            if (this$1.options.visualizePitch) {
                this$1._map.resetNorthPitch({}, { originalEvent: e });
            } else {
                this$1._map.resetNorth({}, { originalEvent: e });
            }
        });
        this._compassIcon = DOM.create('span', 'mapboxgl-ctrl-icon', this._compass);
        this._compassIcon.setAttribute('aria-hidden', true);
    }
};
NavigationControl.prototype._updateZoomButtons = function _updateZoomButtons() {
    var zoom = this._map.getZoom();
    var isMax = zoom === this._map.getMaxZoom();
    var isMin = zoom === this._map.getMinZoom();
    this._zoomInButton.disabled = isMax;
    this._zoomOutButton.disabled = isMin;
    this._zoomInButton.setAttribute('aria-disabled', isMax.toString());
    this._zoomOutButton.setAttribute('aria-disabled', isMin.toString());
};
NavigationControl.prototype._rotateCompassArrow = function _rotateCompassArrow() {
    var rotate = this.options.visualizePitch ? 'scale(' + 1 / Math.pow(Math.cos(this._map.transform.pitch * (Math.PI / 180)), 0.5) + ') rotateX(' + this._map.transform.pitch + 'deg) rotateZ(' + this._map.transform.angle * (180 / Math.PI) + 'deg)' : 'rotate(' + this._map.transform.angle * (180 / Math.PI) + 'deg)';
    this._compassIcon.style.transform = rotate;
};
NavigationControl.prototype.onAdd = function onAdd(map) {
    this._map = map;
    if (this.options.showZoom) {
        this._setButtonTitle(this._zoomInButton, 'ZoomIn');
        this._setButtonTitle(this._zoomOutButton, 'ZoomOut');
        this._map.on('zoom', this._updateZoomButtons);
        this._updateZoomButtons();
    }
    if (this.options.showCompass) {
        this._setButtonTitle(this._compass, 'ResetBearing');
        if (this.options.visualizePitch) {
            this._map.on('pitch', this._rotateCompassArrow);
        }
        this._map.on('rotate', this._rotateCompassArrow);
        this._rotateCompassArrow();
        this._handler = new MouseRotateWrapper(this._map, this._compass, this.options.visualizePitch);
    }
    return this._container;
};
NavigationControl.prototype.onRemove = function onRemove() {
    DOM.remove(this._container);
    if (this.options.showZoom) {
        this._map.off('zoom', this._updateZoomButtons);
    }
    if (this.options.showCompass) {
        if (this.options.visualizePitch) {
            this._map.off('pitch', this._rotateCompassArrow);
        }
        this._map.off('rotate', this._rotateCompassArrow);
        this._handler.off();
        delete this._handler;
    }
    delete this._map;
};
NavigationControl.prototype._createButton = function _createButton(className, fn) {
    var a = DOM.create('button', className, this._container);
    a.type = 'button';
    a.addEventListener('click', fn);
    return a;
};
NavigationControl.prototype._setButtonTitle = function _setButtonTitle(button, title) {
    var str = this._map._getUIString('NavigationControl.' + title);
    button.title = str;
    button.setAttribute('aria-label', str);
};
var MouseRotateWrapper = function MouseRotateWrapper(map, element, pitch) {
    if (pitch === void 0)
        pitch = false;
    this._clickTolerance = 10;
    this.element = element;
    this.mouseRotate = new MouseRotateHandler({ clickTolerance: map.dragRotate._mouseRotate._clickTolerance });
    this.map = map;
    if (pitch) {
        this.mousePitch = new MousePitchHandler({ clickTolerance: map.dragRotate._mousePitch._clickTolerance });
    }
    performance.bindAll([
        'mousedown',
        'mousemove',
        'mouseup',
        'touchstart',
        'touchmove',
        'touchend',
        'reset'
    ], this);
    DOM.addEventListener(element, 'mousedown', this.mousedown);
    DOM.addEventListener(element, 'touchstart', this.touchstart, { passive: false });
    DOM.addEventListener(element, 'touchmove', this.touchmove);
    DOM.addEventListener(element, 'touchend', this.touchend);
    DOM.addEventListener(element, 'touchcancel', this.reset);
};
MouseRotateWrapper.prototype.down = function down(e, point) {
    this.mouseRotate.mousedown(e, point);
    if (this.mousePitch) {
        this.mousePitch.mousedown(e, point);
    }
    DOM.disableDrag();
};
MouseRotateWrapper.prototype.move = function move(e, point) {
    var map = this.map;
    var r = this.mouseRotate.mousemoveWindow(e, point);
    if (r && r.bearingDelta) {
        map.setBearing(map.getBearing() + r.bearingDelta);
    }
    if (this.mousePitch) {
        var p = this.mousePitch.mousemoveWindow(e, point);
        if (p && p.pitchDelta) {
            map.setPitch(map.getPitch() + p.pitchDelta);
        }
    }
};
MouseRotateWrapper.prototype.off = function off() {
    var element = this.element;
    DOM.removeEventListener(element, 'mousedown', this.mousedown);
    DOM.removeEventListener(element, 'touchstart', this.touchstart, { passive: false });
    DOM.removeEventListener(element, 'touchmove', this.touchmove);
    DOM.removeEventListener(element, 'touchend', this.touchend);
    DOM.removeEventListener(element, 'touchcancel', this.reset);
    this.offTemp();
};
MouseRotateWrapper.prototype.offTemp = function offTemp() {
    DOM.enableDrag();
    DOM.removeEventListener(performance.window, 'mousemove', this.mousemove);
    DOM.removeEventListener(performance.window, 'mouseup', this.mouseup);
};
MouseRotateWrapper.prototype.mousedown = function mousedown(e) {
    this.down(performance.extend({}, e, {
        ctrlKey: true,
        preventDefault: function () {
            return e.preventDefault();
        }
    }), DOM.mousePos(this.element, e));
    DOM.addEventListener(performance.window, 'mousemove', this.mousemove);
    DOM.addEventListener(performance.window, 'mouseup', this.mouseup);
};
MouseRotateWrapper.prototype.mousemove = function mousemove(e) {
    this.move(e, DOM.mousePos(this.element, e));
};
MouseRotateWrapper.prototype.mouseup = function mouseup(e) {
    this.mouseRotate.mouseupWindow(e);
    if (this.mousePitch) {
        this.mousePitch.mouseupWindow(e);
    }
    this.offTemp();
};
MouseRotateWrapper.prototype.touchstart = function touchstart(e) {
    if (e.targetTouches.length !== 1) {
        this.reset();
    } else {
        this._startPos = this._lastPos = DOM.touchPos(this.element, e.targetTouches)[0];
        this.down({
            type: 'mousedown',
            button: 0,
            ctrlKey: true,
            preventDefault: function () {
                return e.preventDefault();
            }
        }, this._startPos);
    }
};
MouseRotateWrapper.prototype.touchmove = function touchmove(e) {
    if (e.targetTouches.length !== 1) {
        this.reset();
    } else {
        this._lastPos = DOM.touchPos(this.element, e.targetTouches)[0];
        this.move({
            preventDefault: function () {
                return e.preventDefault();
            }
        }, this._lastPos);
    }
};
MouseRotateWrapper.prototype.touchend = function touchend(e) {
    if (e.targetTouches.length === 0 && this._startPos && this._lastPos && this._startPos.dist(this._lastPos) < this._clickTolerance) {
        this.element.click();
    }
    this.reset();
};
MouseRotateWrapper.prototype.reset = function reset() {
    this.mouseRotate.reset();
    if (this.mousePitch) {
        this.mousePitch.reset();
    }
    delete this._startPos;
    delete this._lastPos;
    this.offTemp();
};

function smartWrap (lngLat, priorPos, transform) {
    lngLat = new performance.LngLat(lngLat.lng, lngLat.lat);
    if (priorPos) {
        var left = new performance.LngLat(lngLat.lng - 360, lngLat.lat);
        var right = new performance.LngLat(lngLat.lng + 360, lngLat.lat);
        var delta = transform.locationPoint(lngLat).distSqr(priorPos);
        if (transform.locationPoint(left).distSqr(priorPos) < delta) {
            lngLat = left;
        } else if (transform.locationPoint(right).distSqr(priorPos) < delta) {
            lngLat = right;
        }
    }
    while (Math.abs(lngLat.lng - transform.center.lng) > 180) {
        var pos = transform.locationPoint(lngLat);
        if (pos.x >= 0 && pos.y >= 0 && pos.x <= transform.width && pos.y <= transform.height) {
            break;
        }
        if (lngLat.lng > transform.center.lng) {
            lngLat.lng -= 360;
        } else {
            lngLat.lng += 360;
        }
    }
    return lngLat;
}

var anchorTranslate = {
    'center': 'translate(-50%,-50%)',
    'top': 'translate(-50%,0)',
    'top-left': 'translate(0,0)',
    'top-right': 'translate(-100%,0)',
    'bottom': 'translate(-50%,-100%)',
    'bottom-left': 'translate(0,-100%)',
    'bottom-right': 'translate(-100%,-100%)',
    'left': 'translate(0,-50%)',
    'right': 'translate(-100%,-50%)'
};
function applyAnchorClass(element, anchor, prefix) {
    var classList = element.classList;
    for (var key in anchorTranslate) {
        classList.remove('mapboxgl-' + prefix + '-anchor-' + key);
    }
    classList.add('mapboxgl-' + prefix + '-anchor-' + anchor);
}

var Marker = function (Evented) {
    function Marker(options, legacyOptions) {
        Evented.call(this);
        if (options instanceof performance.window.HTMLElement || legacyOptions) {
            options = performance.extend({ element: options }, legacyOptions);
        }
        performance.bindAll([
            '_update',
            '_onMove',
            '_onUp',
            '_addDragHandler',
            '_onMapClick',
            '_onKeyPress'
        ], this);
        this._anchor = options && options.anchor || 'center';
        this._color = options && options.color || '#3FB1CE';
        this._scale = options && options.scale || 1;
        this._draggable = options && options.draggable || false;
        this._clickTolerance = options && options.clickTolerance || 0;
        this._isDragging = false;
        this._state = 'inactive';
        this._rotation = options && options.rotation || 0;
        this._rotationAlignment = options && options.rotationAlignment || 'auto';
        this._pitchAlignment = options && options.pitchAlignment && options.pitchAlignment !== 'auto' ? options.pitchAlignment : this._rotationAlignment;
        if (!options || !options.element) {
            this._defaultMarker = true;
            this._element = DOM.create('div');
            this._element.setAttribute('aria-label', 'Map marker');
            var svg = DOM.createNS('http://www.w3.org/2000/svg', 'svg');
            var defaultHeight = 41;
            var defaultWidth = 27;
            svg.setAttributeNS(null, 'display', 'block');
            svg.setAttributeNS(null, 'height', defaultHeight + 'px');
            svg.setAttributeNS(null, 'width', defaultWidth + 'px');
            svg.setAttributeNS(null, 'viewBox', '0 0 ' + defaultWidth + ' ' + defaultHeight);
            var markerLarge = DOM.createNS('http://www.w3.org/2000/svg', 'g');
            markerLarge.setAttributeNS(null, 'stroke', 'none');
            markerLarge.setAttributeNS(null, 'stroke-width', '1');
            markerLarge.setAttributeNS(null, 'fill', 'none');
            markerLarge.setAttributeNS(null, 'fill-rule', 'evenodd');
            var page1 = DOM.createNS('http://www.w3.org/2000/svg', 'g');
            page1.setAttributeNS(null, 'fill-rule', 'nonzero');
            var shadow = DOM.createNS('http://www.w3.org/2000/svg', 'g');
            shadow.setAttributeNS(null, 'transform', 'translate(3.0, 29.0)');
            shadow.setAttributeNS(null, 'fill', '#000000');
            var ellipses = [
                {
                    'rx': '10.5',
                    'ry': '5.25002273'
                },
                {
                    'rx': '10.5',
                    'ry': '5.25002273'
                },
                {
                    'rx': '9.5',
                    'ry': '4.77275007'
                },
                {
                    'rx': '8.5',
                    'ry': '4.29549936'
                },
                {
                    'rx': '7.5',
                    'ry': '3.81822308'
                },
                {
                    'rx': '6.5',
                    'ry': '3.34094679'
                },
                {
                    'rx': '5.5',
                    'ry': '2.86367051'
                },
                {
                    'rx': '4.5',
                    'ry': '2.38636864'
                }
            ];
            for (var i = 0, list = ellipses; i < list.length; i += 1) {
                var data = list[i];
                var ellipse = DOM.createNS('http://www.w3.org/2000/svg', 'ellipse');
                ellipse.setAttributeNS(null, 'opacity', '0.04');
                ellipse.setAttributeNS(null, 'cx', '10.5');
                ellipse.setAttributeNS(null, 'cy', '5.80029008');
                ellipse.setAttributeNS(null, 'rx', data['rx']);
                ellipse.setAttributeNS(null, 'ry', data['ry']);
                shadow.appendChild(ellipse);
            }
            var background = DOM.createNS('http://www.w3.org/2000/svg', 'g');
            background.setAttributeNS(null, 'fill', this._color);
            var bgPath = DOM.createNS('http://www.w3.org/2000/svg', 'path');
            bgPath.setAttributeNS(null, 'd', 'M27,13.5 C27,19.074644 20.250001,27.000002 14.75,34.500002 C14.016665,35.500004 12.983335,35.500004 12.25,34.500002 C6.7499993,27.000002 0,19.222562 0,13.5 C0,6.0441559 6.0441559,0 13.5,0 C20.955844,0 27,6.0441559 27,13.5 Z');
            background.appendChild(bgPath);
            var border = DOM.createNS('http://www.w3.org/2000/svg', 'g');
            border.setAttributeNS(null, 'opacity', '0.25');
            border.setAttributeNS(null, 'fill', '#000000');
            var borderPath = DOM.createNS('http://www.w3.org/2000/svg', 'path');
            borderPath.setAttributeNS(null, 'd', 'M13.5,0 C6.0441559,0 0,6.0441559 0,13.5 C0,19.222562 6.7499993,27 12.25,34.5 C13,35.522727 14.016664,35.500004 14.75,34.5 C20.250001,27 27,19.074644 27,13.5 C27,6.0441559 20.955844,0 13.5,0 Z M13.5,1 C20.415404,1 26,6.584596 26,13.5 C26,15.898657 24.495584,19.181431 22.220703,22.738281 C19.945823,26.295132 16.705119,30.142167 13.943359,33.908203 C13.743445,34.180814 13.612715,34.322738 13.5,34.441406 C13.387285,34.322738 13.256555,34.180814 13.056641,33.908203 C10.284481,30.127985 7.4148684,26.314159 5.015625,22.773438 C2.6163816,19.232715 1,15.953538 1,13.5 C1,6.584596 6.584596,1 13.5,1 Z');
            border.appendChild(borderPath);
            var maki = DOM.createNS('http://www.w3.org/2000/svg', 'g');
            maki.setAttributeNS(null, 'transform', 'translate(6.0, 7.0)');
            maki.setAttributeNS(null, 'fill', '#FFFFFF');
            var circleContainer = DOM.createNS('http://www.w3.org/2000/svg', 'g');
            circleContainer.setAttributeNS(null, 'transform', 'translate(8.0, 8.0)');
            var circle1 = DOM.createNS('http://www.w3.org/2000/svg', 'circle');
            circle1.setAttributeNS(null, 'fill', '#000000');
            circle1.setAttributeNS(null, 'opacity', '0.25');
            circle1.setAttributeNS(null, 'cx', '5.5');
            circle1.setAttributeNS(null, 'cy', '5.5');
            circle1.setAttributeNS(null, 'r', '5.4999962');
            var circle2 = DOM.createNS('http://www.w3.org/2000/svg', 'circle');
            circle2.setAttributeNS(null, 'fill', '#FFFFFF');
            circle2.setAttributeNS(null, 'cx', '5.5');
            circle2.setAttributeNS(null, 'cy', '5.5');
            circle2.setAttributeNS(null, 'r', '5.4999962');
            circleContainer.appendChild(circle1);
            circleContainer.appendChild(circle2);
            page1.appendChild(shadow);
            page1.appendChild(background);
            page1.appendChild(border);
            page1.appendChild(maki);
            page1.appendChild(circleContainer);
            svg.appendChild(page1);
            svg.setAttributeNS(null, 'height', defaultHeight * this._scale + 'px');
            svg.setAttributeNS(null, 'width', defaultWidth * this._scale + 'px');
            this._element.appendChild(svg);
            this._offset = performance.Point.convert(options && options.offset || [
                0,
                -14
            ]);
        } else {
            this._element = options.element;
            this._offset = performance.Point.convert(options && options.offset || [
                0,
                0
            ]);
        }
        this._element.classList.add('mapboxgl-marker');
        this._element.addEventListener('dragstart', function (e) {
            e.preventDefault();
        });
        this._element.addEventListener('mousedown', function (e) {
            e.preventDefault();
        });
        applyAnchorClass(this._element, this._anchor, 'marker');
        this._popup = null;
    }
    if (Evented)
        Marker.__proto__ = Evented;
    Marker.prototype = Object.create(Evented && Evented.prototype);
    Marker.prototype.constructor = Marker;
    Marker.prototype.addTo = function addTo(map) {
        this.remove();
        this._map = map;
        map.getCanvasContainer().appendChild(this._element);
        map.on('move', this._update);
        map.on('moveend', this._update);
        this.setDraggable(this._draggable);
        this._update();
        this._map.on('click', this._onMapClick);
        return this;
    };
    Marker.prototype.remove = function remove() {
        if (this._map) {
            this._map.off('click', this._onMapClick);
            this._map.off('move', this._update);
            this._map.off('moveend', this._update);
            this._map.off('mousedown', this._addDragHandler);
            this._map.off('touchstart', this._addDragHandler);
            this._map.off('mouseup', this._onUp);
            this._map.off('touchend', this._onUp);
            this._map.off('mousemove', this._onMove);
            this._map.off('touchmove', this._onMove);
            delete this._map;
        }
        DOM.remove(this._element);
        if (this._popup) {
            this._popup.remove();
        }
        return this;
    };
    Marker.prototype.getLngLat = function getLngLat() {
        return this._lngLat;
    };
    Marker.prototype.setLngLat = function setLngLat(lnglat) {
        this._lngLat = performance.LngLat.convert(lnglat);
        this._pos = null;
        if (this._popup) {
            this._popup.setLngLat(this._lngLat);
        }
        this._update();
        return this;
    };
    Marker.prototype.getElement = function getElement() {
        return this._element;
    };
    Marker.prototype.setPopup = function setPopup(popup) {
        if (this._popup) {
            this._popup.remove();
            this._popup = null;
            this._element.removeEventListener('keypress', this._onKeyPress);
            if (!this._originalTabIndex) {
                this._element.removeAttribute('tabindex');
            }
        }
        if (popup) {
            if (!('offset' in popup.options)) {
                var markerHeight = 41 - 5.8 / 2;
                var markerRadius = 13.5;
                var linearOffset = Math.sqrt(Math.pow(markerRadius, 2) / 2);
                popup.options.offset = this._defaultMarker ? {
                    'top': [
                        0,
                        0
                    ],
                    'top-left': [
                        0,
                        0
                    ],
                    'top-right': [
                        0,
                        0
                    ],
                    'bottom': [
                        0,
                        -markerHeight
                    ],
                    'bottom-left': [
                        linearOffset,
                        (markerHeight - markerRadius + linearOffset) * -1
                    ],
                    'bottom-right': [
                        -linearOffset,
                        (markerHeight - markerRadius + linearOffset) * -1
                    ],
                    'left': [
                        markerRadius,
                        (markerHeight - markerRadius) * -1
                    ],
                    'right': [
                        -markerRadius,
                        (markerHeight - markerRadius) * -1
                    ]
                } : this._offset;
            }
            this._popup = popup;
            if (this._lngLat) {
                this._popup.setLngLat(this._lngLat);
            }
            this._originalTabIndex = this._element.getAttribute('tabindex');
            if (!this._originalTabIndex) {
                this._element.setAttribute('tabindex', '0');
            }
            this._element.addEventListener('keypress', this._onKeyPress);
        }
        return this;
    };
    Marker.prototype._onKeyPress = function _onKeyPress(e) {
        var code = e.code;
        var legacyCode = e.charCode || e.keyCode;
        if (code === 'Space' || code === 'Enter' || legacyCode === 32 || legacyCode === 13) {
            this.togglePopup();
        }
    };
    Marker.prototype._onMapClick = function _onMapClick(e) {
        var targetElement = e.originalEvent.target;
        var element = this._element;
        if (this._popup && (targetElement === element || element.contains(targetElement))) {
            this.togglePopup();
        }
    };
    Marker.prototype.getPopup = function getPopup() {
        return this._popup;
    };
    Marker.prototype.togglePopup = function togglePopup() {
        var popup = this._popup;
        if (!popup) {
            return this;
        } else if (popup.isOpen()) {
            popup.remove();
        } else {
            popup.addTo(this._map);
        }
        return this;
    };
    Marker.prototype._update = function _update(e) {
        if (!this._map) {
            return;
        }
        if (this._map.transform.renderWorldCopies) {
            this._lngLat = smartWrap(this._lngLat, this._pos, this._map.transform);
        }
        this._pos = this._map.project(this._lngLat)._add(this._offset);
        var rotation = '';
        if (this._rotationAlignment === 'viewport' || this._rotationAlignment === 'auto') {
            rotation = 'rotateZ(' + this._rotation + 'deg)';
        } else if (this._rotationAlignment === 'map') {
            rotation = 'rotateZ(' + (this._rotation - this._map.getBearing()) + 'deg)';
        }
        var pitch = '';
        if (this._pitchAlignment === 'viewport' || this._pitchAlignment === 'auto') {
            pitch = 'rotateX(0deg)';
        } else if (this._pitchAlignment === 'map') {
            pitch = 'rotateX(' + this._map.getPitch() + 'deg)';
        }
        if (!e || e.type === 'moveend') {
            this._pos = this._pos.round();
        }
        DOM.setTransform(this._element, anchorTranslate[this._anchor] + ' translate(' + this._pos.x + 'px, ' + this._pos.y + 'px) ' + pitch + ' ' + rotation);
    };
    Marker.prototype.getOffset = function getOffset() {
        return this._offset;
    };
    Marker.prototype.setOffset = function setOffset(offset) {
        this._offset = performance.Point.convert(offset);
        this._update();
        return this;
    };
    Marker.prototype._onMove = function _onMove(e) {
        if (!this._isDragging) {
            var clickTolerance = this._clickTolerance || this._map._clickTolerance;
            this._isDragging = e.point.dist(this._pointerdownPos) >= clickTolerance;
        }
        if (!this._isDragging) {
            return;
        }
        this._pos = e.point.sub(this._positionDelta);
        this._lngLat = this._map.unproject(this._pos);
        this.setLngLat(this._lngLat);
        this._element.style.pointerEvents = 'none';
        if (this._state === 'pending') {
            this._state = 'active';
            this.fire(new performance.Event('dragstart'));
        }
        this.fire(new performance.Event('drag'));
    };
    Marker.prototype._onUp = function _onUp() {
        this._element.style.pointerEvents = 'auto';
        this._positionDelta = null;
        this._pointerdownPos = null;
        this._isDragging = false;
        this._map.off('mousemove', this._onMove);
        this._map.off('touchmove', this._onMove);
        if (this._state === 'active') {
            this.fire(new performance.Event('dragend'));
        }
        this._state = 'inactive';
    };
    Marker.prototype._addDragHandler = function _addDragHandler(e) {
        if (this._element.contains(e.originalEvent.target)) {
            e.preventDefault();
            this._positionDelta = e.point.sub(this._pos).add(this._offset);
            this._pointerdownPos = e.point;
            this._state = 'pending';
            this._map.on('mousemove', this._onMove);
            this._map.on('touchmove', this._onMove);
            this._map.once('mouseup', this._onUp);
            this._map.once('touchend', this._onUp);
        }
    };
    Marker.prototype.setDraggable = function setDraggable(shouldBeDraggable) {
        this._draggable = !!shouldBeDraggable;
        if (this._map) {
            if (shouldBeDraggable) {
                this._map.on('mousedown', this._addDragHandler);
                this._map.on('touchstart', this._addDragHandler);
            } else {
                this._map.off('mousedown', this._addDragHandler);
                this._map.off('touchstart', this._addDragHandler);
            }
        }
        return this;
    };
    Marker.prototype.isDraggable = function isDraggable() {
        return this._draggable;
    };
    Marker.prototype.setRotation = function setRotation(rotation) {
        this._rotation = rotation || 0;
        this._update();
        return this;
    };
    Marker.prototype.getRotation = function getRotation() {
        return this._rotation;
    };
    Marker.prototype.setRotationAlignment = function setRotationAlignment(alignment) {
        this._rotationAlignment = alignment || 'auto';
        this._update();
        return this;
    };
    Marker.prototype.getRotationAlignment = function getRotationAlignment() {
        return this._rotationAlignment;
    };
    Marker.prototype.setPitchAlignment = function setPitchAlignment(alignment) {
        this._pitchAlignment = alignment && alignment !== 'auto' ? alignment : this._rotationAlignment;
        this._update();
        return this;
    };
    Marker.prototype.getPitchAlignment = function getPitchAlignment() {
        return this._pitchAlignment;
    };
    return Marker;
}(performance.Evented);

var defaultOptions$3 = {
    positionOptions: {
        enableHighAccuracy: false,
        maximumAge: 0,
        timeout: 6000
    },
    fitBoundsOptions: { maxZoom: 15 },
    trackUserLocation: false,
    showAccuracyCircle: true,
    showUserLocation: true
};
var supportsGeolocation;
function checkGeolocationSupport(callback) {
    if (supportsGeolocation !== undefined) {
        callback(supportsGeolocation);
    } else if (performance.window.navigator.permissions !== undefined) {
        performance.window.navigator.permissions.query({ name: 'geolocation' }).then(function (p) {
            supportsGeolocation = p.state !== 'denied';
            callback(supportsGeolocation);
        });
    } else {
        supportsGeolocation = !!performance.window.navigator.geolocation;
        callback(supportsGeolocation);
    }
}
var numberOfWatches = 0;
var noTimeout = false;
var GeolocateControl = function (Evented) {
    function GeolocateControl(options) {
        Evented.call(this);
        this.options = performance.extend({}, defaultOptions$3, options);
        performance.bindAll([
            '_onSuccess',
            '_onError',
            '_onZoom',
            '_finish',
            '_setupUI',
            '_updateCamera',
            '_updateMarker'
        ], this);
    }
    if (Evented)
        GeolocateControl.__proto__ = Evented;
    GeolocateControl.prototype = Object.create(Evented && Evented.prototype);
    GeolocateControl.prototype.constructor = GeolocateControl;
    GeolocateControl.prototype.onAdd = function onAdd(map) {
        this._map = map;
        this._container = DOM.create('div', 'mapboxgl-ctrl mapboxgl-ctrl-group');
        checkGeolocationSupport(this._setupUI);
        return this._container;
    };
    GeolocateControl.prototype.onRemove = function onRemove() {
        if (this._geolocationWatchID !== undefined) {
            performance.window.navigator.geolocation.clearWatch(this._geolocationWatchID);
            this._geolocationWatchID = undefined;
        }
        if (this.options.showUserLocation && this._userLocationDotMarker) {
            this._userLocationDotMarker.remove();
        }
        if (this.options.showAccuracyCircle && this._accuracyCircleMarker) {
            this._accuracyCircleMarker.remove();
        }
        DOM.remove(this._container);
        this._map.off('zoom', this._onZoom);
        this._map = undefined;
        numberOfWatches = 0;
        noTimeout = false;
    };
    GeolocateControl.prototype._isOutOfMapMaxBounds = function _isOutOfMapMaxBounds(position) {
        var bounds = this._map.getMaxBounds();
        var coordinates = position.coords;
        return bounds && (coordinates.longitude < bounds.getWest() || coordinates.longitude > bounds.getEast() || coordinates.latitude < bounds.getSouth() || coordinates.latitude > bounds.getNorth());
    };
    GeolocateControl.prototype._setErrorState = function _setErrorState() {
        switch (this._watchState) {
        case 'WAITING_ACTIVE':
            this._watchState = 'ACTIVE_ERROR';
            this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-active');
            this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-active-error');
            break;
        case 'ACTIVE_LOCK':
            this._watchState = 'ACTIVE_ERROR';
            this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-active');
            this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-active-error');
            this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-waiting');
            break;
        case 'BACKGROUND':
            this._watchState = 'BACKGROUND_ERROR';
            this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-background');
            this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-background-error');
            this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-waiting');
            break;
        }
    };
    GeolocateControl.prototype._onSuccess = function _onSuccess(position) {
        if (!this._map) {
            return;
        }
        if (this._isOutOfMapMaxBounds(position)) {
            this._setErrorState();
            this.fire(new performance.Event('outofmaxbounds', position));
            this._updateMarker();
            this._finish();
            return;
        }
        if (this.options.trackUserLocation) {
            this._lastKnownPosition = position;
            switch (this._watchState) {
            case 'WAITING_ACTIVE':
            case 'ACTIVE_LOCK':
            case 'ACTIVE_ERROR':
                this._watchState = 'ACTIVE_LOCK';
                this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-waiting');
                this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-active-error');
                this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-active');
                break;
            case 'BACKGROUND':
            case 'BACKGROUND_ERROR':
                this._watchState = 'BACKGROUND';
                this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-waiting');
                this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-background-error');
                this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-background');
                break;
            }
        }
        if (this.options.showUserLocation && this._watchState !== 'OFF') {
            this._updateMarker(position);
        }
        if (!this.options.trackUserLocation || this._watchState === 'ACTIVE_LOCK') {
            this._updateCamera(position);
        }
        if (this.options.showUserLocation) {
            this._dotElement.classList.remove('mapboxgl-user-location-dot-stale');
        }
        this.fire(new performance.Event('geolocate', position));
        this._finish();
    };
    GeolocateControl.prototype._updateCamera = function _updateCamera(position) {
        var center = new performance.LngLat(position.coords.longitude, position.coords.latitude);
        var radius = position.coords.accuracy;
        var bearing = this._map.getBearing();
        var options = performance.extend({ bearing: bearing }, this.options.fitBoundsOptions);
        this._map.fitBounds(center.toBounds(radius), options, { geolocateSource: true });
    };
    GeolocateControl.prototype._updateMarker = function _updateMarker(position) {
        if (position) {
            var center = new performance.LngLat(position.coords.longitude, position.coords.latitude);
            this._accuracyCircleMarker.setLngLat(center).addTo(this._map);
            this._userLocationDotMarker.setLngLat(center).addTo(this._map);
            this._accuracy = position.coords.accuracy;
            if (this.options.showUserLocation && this.options.showAccuracyCircle) {
                this._updateCircleRadius();
            }
        } else {
            this._userLocationDotMarker.remove();
            this._accuracyCircleMarker.remove();
        }
    };
    GeolocateControl.prototype._updateCircleRadius = function _updateCircleRadius() {
        var y = this._map._container.clientHeight / 2;
        var a = this._map.unproject([
            0,
            y
        ]);
        var b = this._map.unproject([
            1,
            y
        ]);
        var metersPerPixel = a.distanceTo(b);
        var circleDiameter = Math.ceil(2 * this._accuracy / metersPerPixel);
        this._circleElement.style.width = circleDiameter + 'px';
        this._circleElement.style.height = circleDiameter + 'px';
    };
    GeolocateControl.prototype._onZoom = function _onZoom() {
        if (this.options.showUserLocation && this.options.showAccuracyCircle) {
            this._updateCircleRadius();
        }
    };
    GeolocateControl.prototype._onError = function _onError(error) {
        if (!this._map) {
            return;
        }
        if (this.options.trackUserLocation) {
            if (error.code === 1) {
                this._watchState = 'OFF';
                this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-waiting');
                this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-active');
                this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-active-error');
                this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-background');
                this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-background-error');
                this._geolocateButton.disabled = true;
                var title = this._map._getUIString('GeolocateControl.LocationNotAvailable');
                this._geolocateButton.title = title;
                this._geolocateButton.setAttribute('aria-label', title);
                if (this._geolocationWatchID !== undefined) {
                    this._clearWatch();
                }
            } else if (error.code === 3 && noTimeout) {
                return;
            } else {
                this._setErrorState();
            }
        }
        if (this._watchState !== 'OFF' && this.options.showUserLocation) {
            this._dotElement.classList.add('mapboxgl-user-location-dot-stale');
        }
        this.fire(new performance.Event('error', error));
        this._finish();
    };
    GeolocateControl.prototype._finish = function _finish() {
        if (this._timeoutId) {
            clearTimeout(this._timeoutId);
        }
        this._timeoutId = undefined;
    };
    GeolocateControl.prototype._setupUI = function _setupUI(supported) {
        var this$1 = this;
        this._container.addEventListener('contextmenu', function (e) {
            return e.preventDefault();
        });
        this._geolocateButton = DOM.create('button', 'mapboxgl-ctrl-geolocate', this._container);
        DOM.create('span', 'mapboxgl-ctrl-icon', this._geolocateButton).setAttribute('aria-hidden', true);
        this._geolocateButton.type = 'button';
        if (supported === false) {
            performance.warnOnce('Geolocation support is not available so the GeolocateControl will be disabled.');
            var title = this._map._getUIString('GeolocateControl.LocationNotAvailable');
            this._geolocateButton.disabled = true;
            this._geolocateButton.title = title;
            this._geolocateButton.setAttribute('aria-label', title);
        } else {
            var title$1 = this._map._getUIString('GeolocateControl.FindMyLocation');
            this._geolocateButton.title = title$1;
            this._geolocateButton.setAttribute('aria-label', title$1);
        }
        if (this.options.trackUserLocation) {
            this._geolocateButton.setAttribute('aria-pressed', 'false');
            this._watchState = 'OFF';
        }
        if (this.options.showUserLocation) {
            this._dotElement = DOM.create('div', 'mapboxgl-user-location-dot');
            this._userLocationDotMarker = new Marker(this._dotElement);
            this._circleElement = DOM.create('div', 'mapboxgl-user-location-accuracy-circle');
            this._accuracyCircleMarker = new Marker({
                element: this._circleElement,
                pitchAlignment: 'map'
            });
            if (this.options.trackUserLocation) {
                this._watchState = 'OFF';
            }
            this._map.on('zoom', this._onZoom);
        }
        this._geolocateButton.addEventListener('click', this.trigger.bind(this));
        this._setup = true;
        if (this.options.trackUserLocation) {
            this._map.on('movestart', function (event) {
                var fromResize = event.originalEvent && event.originalEvent.type === 'resize';
                if (!event.geolocateSource && this$1._watchState === 'ACTIVE_LOCK' && !fromResize) {
                    this$1._watchState = 'BACKGROUND';
                    this$1._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-background');
                    this$1._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-active');
                    this$1.fire(new performance.Event('trackuserlocationend'));
                }
            });
        }
    };
    GeolocateControl.prototype.trigger = function trigger() {
        if (!this._setup) {
            performance.warnOnce('Geolocate control triggered before added to a map');
            return false;
        }
        if (this.options.trackUserLocation) {
            switch (this._watchState) {
            case 'OFF':
                this._watchState = 'WAITING_ACTIVE';
                this.fire(new performance.Event('trackuserlocationstart'));
                break;
            case 'WAITING_ACTIVE':
            case 'ACTIVE_LOCK':
            case 'ACTIVE_ERROR':
            case 'BACKGROUND_ERROR':
                numberOfWatches--;
                noTimeout = false;
                this._watchState = 'OFF';
                this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-waiting');
                this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-active');
                this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-active-error');
                this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-background');
                this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-background-error');
                this.fire(new performance.Event('trackuserlocationend'));
                break;
            case 'BACKGROUND':
                this._watchState = 'ACTIVE_LOCK';
                this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-background');
                if (this._lastKnownPosition) {
                    this._updateCamera(this._lastKnownPosition);
                }
                this.fire(new performance.Event('trackuserlocationstart'));
                break;
            }
            switch (this._watchState) {
            case 'WAITING_ACTIVE':
                this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-waiting');
                this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-active');
                break;
            case 'ACTIVE_LOCK':
                this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-active');
                break;
            case 'ACTIVE_ERROR':
                this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-waiting');
                this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-active-error');
                break;
            case 'BACKGROUND':
                this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-background');
                break;
            case 'BACKGROUND_ERROR':
                this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-waiting');
                this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-background-error');
                break;
            }
            if (this._watchState === 'OFF' && this._geolocationWatchID !== undefined) {
                this._clearWatch();
            } else if (this._geolocationWatchID === undefined) {
                this._geolocateButton.classList.add('mapboxgl-ctrl-geolocate-waiting');
                this._geolocateButton.setAttribute('aria-pressed', 'true');
                numberOfWatches++;
                var positionOptions;
                if (numberOfWatches > 1) {
                    positionOptions = {
                        maximumAge: 600000,
                        timeout: 0
                    };
                    noTimeout = true;
                } else {
                    positionOptions = this.options.positionOptions;
                    noTimeout = false;
                }
                this._geolocationWatchID = performance.window.navigator.geolocation.watchPosition(this._onSuccess, this._onError, positionOptions);
            }
        } else {
            performance.window.navigator.geolocation.getCurrentPosition(this._onSuccess, this._onError, this.options.positionOptions);
            this._timeoutId = setTimeout(this._finish, 10000);
        }
        return true;
    };
    GeolocateControl.prototype._clearWatch = function _clearWatch() {
        performance.window.navigator.geolocation.clearWatch(this._geolocationWatchID);
        this._geolocationWatchID = undefined;
        this._geolocateButton.classList.remove('mapboxgl-ctrl-geolocate-waiting');
        this._geolocateButton.setAttribute('aria-pressed', 'false');
        if (this.options.showUserLocation) {
            this._updateMarker(null);
        }
    };
    return GeolocateControl;
}(performance.Evented);

var defaultOptions$4 = {
    maxWidth: 100,
    unit: 'metric'
};
var ScaleControl = function ScaleControl(options) {
    this.options = performance.extend({}, defaultOptions$4, options);
    performance.bindAll([
        '_onMove',
        'setUnit'
    ], this);
};
ScaleControl.prototype.getDefaultPosition = function getDefaultPosition() {
    return 'bottom-left';
};
ScaleControl.prototype._onMove = function _onMove() {
    updateScale(this._map, this._container, this.options);
};
ScaleControl.prototype.onAdd = function onAdd(map) {
    this._map = map;
    this._container = DOM.create('div', 'mapboxgl-ctrl mapboxgl-ctrl-scale', map.getContainer());
    this._map.on('move', this._onMove);
    this._onMove();
    return this._container;
};
ScaleControl.prototype.onRemove = function onRemove() {
    DOM.remove(this._container);
    this._map.off('move', this._onMove);
    this._map = undefined;
};
ScaleControl.prototype.setUnit = function setUnit(unit) {
    this.options.unit = unit;
    updateScale(this._map, this._container, this.options);
};
function updateScale(map, container, options) {
    var maxWidth = options && options.maxWidth || 100;
    var y = map._container.clientHeight / 2;
    var left = map.unproject([
        0,
        y
    ]);
    var right = map.unproject([
        maxWidth,
        y
    ]);
    var maxMeters = left.distanceTo(right);
    if (options && options.unit === 'imperial') {
        var maxFeet = 3.2808 * maxMeters;
        if (maxFeet > 5280) {
            var maxMiles = maxFeet / 5280;
            setScale(container, maxWidth, maxMiles, map._getUIString('ScaleControl.Miles'));
        } else {
            setScale(container, maxWidth, maxFeet, map._getUIString('ScaleControl.Feet'));
        }
    } else if (options && options.unit === 'nautical') {
        var maxNauticals = maxMeters / 1852;
        setScale(container, maxWidth, maxNauticals, map._getUIString('ScaleControl.NauticalMiles'));
    } else if (maxMeters >= 1000) {
        setScale(container, maxWidth, maxMeters / 1000, map._getUIString('ScaleControl.Kilometers'));
    } else {
        setScale(container, maxWidth, maxMeters, map._getUIString('ScaleControl.Meters'));
    }
}
function setScale(container, maxWidth, maxDistance, unit) {
    var distance = getRoundNum(maxDistance);
    var ratio = distance / maxDistance;
    container.style.width = maxWidth * ratio + 'px';
    container.innerHTML = distance + '&nbsp;' + unit;
}
function getDecimalRoundNum(d) {
    var multiplier = Math.pow(10, Math.ceil(-Math.log(d) / Math.LN10));
    return Math.round(d * multiplier) / multiplier;
}
function getRoundNum(num) {
    var pow10 = Math.pow(10, ('' + Math.floor(num)).length - 1);
    var d = num / pow10;
    d = d >= 10 ? 10 : d >= 5 ? 5 : d >= 3 ? 3 : d >= 2 ? 2 : d >= 1 ? 1 : getDecimalRoundNum(d);
    return pow10 * d;
}

var FullscreenControl = function FullscreenControl(options) {
    this._fullscreen = false;
    if (options && options.container) {
        if (options.container instanceof performance.window.HTMLElement) {
            this._container = options.container;
        } else {
            performance.warnOnce('Full screen control \'container\' must be a DOM element.');
        }
    }
    performance.bindAll([
        '_onClickFullscreen',
        '_changeIcon'
    ], this);
    if ('onfullscreenchange' in performance.window.document) {
        this._fullscreenchange = 'fullscreenchange';
    } else if ('onmozfullscreenchange' in performance.window.document) {
        this._fullscreenchange = 'mozfullscreenchange';
    } else if ('onwebkitfullscreenchange' in performance.window.document) {
        this._fullscreenchange = 'webkitfullscreenchange';
    } else if ('onmsfullscreenchange' in performance.window.document) {
        this._fullscreenchange = 'MSFullscreenChange';
    }
};
FullscreenControl.prototype.onAdd = function onAdd(map) {
    this._map = map;
    if (!this._container) {
        this._container = this._map.getContainer();
    }
    this._controlContainer = DOM.create('div', 'mapboxgl-ctrl mapboxgl-ctrl-group');
    if (this._checkFullscreenSupport()) {
        this._setupUI();
    } else {
        this._controlContainer.style.display = 'none';
        performance.warnOnce('This device does not support fullscreen mode.');
    }
    return this._controlContainer;
};
FullscreenControl.prototype.onRemove = function onRemove() {
    DOM.remove(this._controlContainer);
    this._map = null;
    performance.window.document.removeEventListener(this._fullscreenchange, this._changeIcon);
};
FullscreenControl.prototype._checkFullscreenSupport = function _checkFullscreenSupport() {
    return !!(performance.window.document.fullscreenEnabled || performance.window.document.mozFullScreenEnabled || performance.window.document.msFullscreenEnabled || performance.window.document.webkitFullscreenEnabled);
};
FullscreenControl.prototype._setupUI = function _setupUI() {
    var button = this._fullscreenButton = DOM.create('button', 'mapboxgl-ctrl-fullscreen', this._controlContainer);
    DOM.create('span', 'mapboxgl-ctrl-icon', button).setAttribute('aria-hidden', true);
    button.type = 'button';
    this._updateTitle();
    this._fullscreenButton.addEventListener('click', this._onClickFullscreen);
    performance.window.document.addEventListener(this._fullscreenchange, this._changeIcon);
};
FullscreenControl.prototype._updateTitle = function _updateTitle() {
    var title = this._getTitle();
    this._fullscreenButton.setAttribute('aria-label', title);
    this._fullscreenButton.title = title;
};
FullscreenControl.prototype._getTitle = function _getTitle() {
    return this._map._getUIString(this._isFullscreen() ? 'FullscreenControl.Exit' : 'FullscreenControl.Enter');
};
FullscreenControl.prototype._isFullscreen = function _isFullscreen() {
    return this._fullscreen;
};
FullscreenControl.prototype._changeIcon = function _changeIcon() {
    var fullscreenElement = performance.window.document.fullscreenElement || performance.window.document.mozFullScreenElement || performance.window.document.webkitFullscreenElement || performance.window.document.msFullscreenElement;
    if (fullscreenElement === this._container !== this._fullscreen) {
        this._fullscreen = !this._fullscreen;
        this._fullscreenButton.classList.toggle('mapboxgl-ctrl-shrink');
        this._fullscreenButton.classList.toggle('mapboxgl-ctrl-fullscreen');
        this._updateTitle();
    }
};
FullscreenControl.prototype._onClickFullscreen = function _onClickFullscreen() {
    if (this._isFullscreen()) {
        if (performance.window.document.exitFullscreen) {
            performance.window.document.exitFullscreen();
        } else if (performance.window.document.mozCancelFullScreen) {
            performance.window.document.mozCancelFullScreen();
        } else if (performance.window.document.msExitFullscreen) {
            performance.window.document.msExitFullscreen();
        } else if (performance.window.document.webkitCancelFullScreen) {
            performance.window.document.webkitCancelFullScreen();
        }
    } else if (this._container.requestFullscreen) {
        this._container.requestFullscreen();
    } else if (this._container.mozRequestFullScreen) {
        this._container.mozRequestFullScreen();
    } else if (this._container.msRequestFullscreen) {
        this._container.msRequestFullscreen();
    } else if (this._container.webkitRequestFullscreen) {
        this._container.webkitRequestFullscreen();
    }
};

var defaultOptions$5 = {
    closeButton: true,
    closeOnClick: true,
    focusAfterOpen: true,
    className: '',
    maxWidth: '240px'
};
var focusQuerySelector = [
    'a[href]',
    '[tabindex]:not([tabindex=\'-1\'])',
    '[contenteditable]:not([contenteditable=\'false\'])',
    'button:not([disabled])',
    'input:not([disabled])',
    'select:not([disabled])',
    'textarea:not([disabled])'
].join(', ');
var Popup = function (Evented) {
    function Popup(options) {
        Evented.call(this);
        this.options = performance.extend(Object.create(defaultOptions$5), options);
        performance.bindAll([
            '_update',
            '_onClose',
            'remove',
            '_onMouseMove',
            '_onMouseUp',
            '_onDrag'
        ], this);
    }
    if (Evented)
        Popup.__proto__ = Evented;
    Popup.prototype = Object.create(Evented && Evented.prototype);
    Popup.prototype.constructor = Popup;
    Popup.prototype.addTo = function addTo(map) {
        if (this._map) {
            this.remove();
        }
        this._map = map;
        if (this.options.closeOnClick) {
            this._map.on('click', this._onClose);
        }
        if (this.options.closeOnMove) {
            this._map.on('move', this._onClose);
        }
        this._map.on('remove', this.remove);
        this._update();
        this._focusFirstElement();
        if (this._trackPointer) {
            this._map.on('mousemove', this._onMouseMove);
            this._map.on('mouseup', this._onMouseUp);
            if (this._container) {
                this._container.classList.add('mapboxgl-popup-track-pointer');
            }
            this._map._canvasContainer.classList.add('mapboxgl-track-pointer');
        } else {
            this._map.on('move', this._update);
        }
        this.fire(new performance.Event('open'));
        return this;
    };
    Popup.prototype.isOpen = function isOpen() {
        return !!this._map;
    };
    Popup.prototype.remove = function remove() {
        if (this._content) {
            DOM.remove(this._content);
        }
        if (this._container) {
            DOM.remove(this._container);
            delete this._container;
        }
        if (this._map) {
            this._map.off('move', this._update);
            this._map.off('move', this._onClose);
            this._map.off('click', this._onClose);
            this._map.off('remove', this.remove);
            this._map.off('mousemove', this._onMouseMove);
            this._map.off('mouseup', this._onMouseUp);
            this._map.off('drag', this._onDrag);
            delete this._map;
        }
        this.fire(new performance.Event('close'));
        return this;
    };
    Popup.prototype.getLngLat = function getLngLat() {
        return this._lngLat;
    };
    Popup.prototype.setLngLat = function setLngLat(lnglat) {
        this._lngLat = performance.LngLat.convert(lnglat);
        this._pos = null;
        this._trackPointer = false;
        this._update();
        if (this._map) {
            this._map.on('move', this._update);
            this._map.off('mousemove', this._onMouseMove);
            if (this._container) {
                this._container.classList.remove('mapboxgl-popup-track-pointer');
            }
            this._map._canvasContainer.classList.remove('mapboxgl-track-pointer');
        }
        return this;
    };
    Popup.prototype.trackPointer = function trackPointer() {
        this._trackPointer = true;
        this._pos = null;
        this._update();
        if (this._map) {
            this._map.off('move', this._update);
            this._map.on('mousemove', this._onMouseMove);
            this._map.on('drag', this._onDrag);
            if (this._container) {
                this._container.classList.add('mapboxgl-popup-track-pointer');
            }
            this._map._canvasContainer.classList.add('mapboxgl-track-pointer');
        }
        return this;
    };
    Popup.prototype.getElement = function getElement() {
        return this._container;
    };
    Popup.prototype.setText = function setText(text) {
        return this.setDOMContent(performance.window.document.createTextNode(text));
    };
    Popup.prototype.setHTML = function setHTML(html) {
        var frag = performance.window.document.createDocumentFragment();
        var temp = performance.window.document.createElement('body');
        var child;
        temp.innerHTML = html;
        while (true) {
            child = temp.firstChild;
            if (!child) {
                break;
            }
            frag.appendChild(child);
        }
        return this.setDOMContent(frag);
    };
    Popup.prototype.getMaxWidth = function getMaxWidth() {
        return this._container && this._container.style.maxWidth;
    };
    Popup.prototype.setMaxWidth = function setMaxWidth(maxWidth) {
        this.options.maxWidth = maxWidth;
        this._update();
        return this;
    };
    Popup.prototype.setDOMContent = function setDOMContent(htmlNode) {
        if (this._content) {
            while (this._content.hasChildNodes()) {
                if (this._content.firstChild) {
                    this._content.removeChild(this._content.firstChild);
                }
            }
        } else {
            this._content = DOM.create('div', 'mapboxgl-popup-content', this._container);
        }
        this._content.appendChild(htmlNode);
        this._createCloseButton();
        this._update();
        this._focusFirstElement();
        return this;
    };
    Popup.prototype.addClassName = function addClassName(className) {
        if (this._container) {
            this._container.classList.add(className);
        }
    };
    Popup.prototype.removeClassName = function removeClassName(className) {
        if (this._container) {
            this._container.classList.remove(className);
        }
    };
    Popup.prototype.setOffset = function setOffset(offset) {
        this.options.offset = offset;
        this._update();
        return this;
    };
    Popup.prototype.toggleClassName = function toggleClassName(className) {
        if (this._container) {
            return this._container.classList.toggle(className);
        }
    };
    Popup.prototype._createCloseButton = function _createCloseButton() {
        if (this.options.closeButton) {
            this._closeButton = DOM.create('button', 'mapboxgl-popup-close-button', this._content);
            this._closeButton.type = 'button';
            this._closeButton.setAttribute('aria-label', 'Close popup');
            this._closeButton.innerHTML = '&#215;';
            this._closeButton.addEventListener('click', this._onClose);
        }
    };
    Popup.prototype._onMouseUp = function _onMouseUp(event) {
        this._update(event.point);
    };
    Popup.prototype._onMouseMove = function _onMouseMove(event) {
        this._update(event.point);
    };
    Popup.prototype._onDrag = function _onDrag(event) {
        this._update(event.point);
    };
    Popup.prototype._update = function _update(cursor) {
        var this$1 = this;
        var hasPosition = this._lngLat || this._trackPointer;
        if (!this._map || !hasPosition || !this._content) {
            return;
        }
        if (!this._container) {
            this._container = DOM.create('div', 'mapboxgl-popup', this._map.getContainer());
            this._tip = DOM.create('div', 'mapboxgl-popup-tip', this._container);
            this._container.appendChild(this._content);
            if (this.options.className) {
                this.options.className.split(' ').forEach(function (name) {
                    return this$1._container.classList.add(name);
                });
            }
            if (this._trackPointer) {
                this._container.classList.add('mapboxgl-popup-track-pointer');
            }
        }
        if (this.options.maxWidth && this._container.style.maxWidth !== this.options.maxWidth) {
            this._container.style.maxWidth = this.options.maxWidth;
        }
        if (this._map.transform.renderWorldCopies && !this._trackPointer) {
            this._lngLat = smartWrap(this._lngLat, this._pos, this._map.transform);
        }
        if (this._trackPointer && !cursor) {
            return;
        }
        var pos = this._pos = this._trackPointer && cursor ? cursor : this._map.project(this._lngLat);
        var anchor = this.options.anchor;
        var offset = normalizeOffset(this.options.offset);
        if (!anchor) {
            var width = this._container.offsetWidth;
            var height = this._container.offsetHeight;
            var anchorComponents;
            if (pos.y + offset.bottom.y < height) {
                anchorComponents = ['top'];
            } else if (pos.y > this._map.transform.height - height) {
                anchorComponents = ['bottom'];
            } else {
                anchorComponents = [];
            }
            if (pos.x < width / 2) {
                anchorComponents.push('left');
            } else if (pos.x > this._map.transform.width - width / 2) {
                anchorComponents.push('right');
            }
            if (anchorComponents.length === 0) {
                anchor = 'bottom';
            } else {
                anchor = anchorComponents.join('-');
            }
        }
        var offsetedPos = pos.add(offset[anchor]).round();
        DOM.setTransform(this._container, anchorTranslate[anchor] + ' translate(' + offsetedPos.x + 'px,' + offsetedPos.y + 'px)');
        applyAnchorClass(this._container, anchor, 'popup');
    };
    Popup.prototype._focusFirstElement = function _focusFirstElement() {
        if (!this.options.focusAfterOpen || !this._container) {
            return;
        }
        var firstFocusable = this._container.querySelector(focusQuerySelector);
        if (firstFocusable) {
            firstFocusable.focus();
        }
    };
    Popup.prototype._onClose = function _onClose() {
        this.remove();
    };
    return Popup;
}(performance.Evented);
function normalizeOffset(offset) {
    if (!offset) {
        return normalizeOffset(new performance.Point(0, 0));
    } else if (typeof offset === 'number') {
        var cornerOffset = Math.round(Math.sqrt(0.5 * Math.pow(offset, 2)));
        return {
            'center': new performance.Point(0, 0),
            'top': new performance.Point(0, offset),
            'top-left': new performance.Point(cornerOffset, cornerOffset),
            'top-right': new performance.Point(-cornerOffset, cornerOffset),
            'bottom': new performance.Point(0, -offset),
            'bottom-left': new performance.Point(cornerOffset, -cornerOffset),
            'bottom-right': new performance.Point(-cornerOffset, -cornerOffset),
            'left': new performance.Point(offset, 0),
            'right': new performance.Point(-offset, 0)
        };
    } else if (offset instanceof performance.Point || Array.isArray(offset)) {
        var convertedOffset = performance.Point.convert(offset);
        return {
            'center': convertedOffset,
            'top': convertedOffset,
            'top-left': convertedOffset,
            'top-right': convertedOffset,
            'bottom': convertedOffset,
            'bottom-left': convertedOffset,
            'bottom-right': convertedOffset,
            'left': convertedOffset,
            'right': convertedOffset
        };
    } else {
        return {
            'center': performance.Point.convert(offset['center'] || [
                0,
                0
            ]),
            'top': performance.Point.convert(offset['top'] || [
                0,
                0
            ]),
            'top-left': performance.Point.convert(offset['top-left'] || [
                0,
                0
            ]),
            'top-right': performance.Point.convert(offset['top-right'] || [
                0,
                0
            ]),
            'bottom': performance.Point.convert(offset['bottom'] || [
                0,
                0
            ]),
            'bottom-left': performance.Point.convert(offset['bottom-left'] || [
                0,
                0
            ]),
            'bottom-right': performance.Point.convert(offset['bottom-right'] || [
                0,
                0
            ]),
            'left': performance.Point.convert(offset['left'] || [
                0,
                0
            ]),
            'right': performance.Point.convert(offset['right'] || [
                0,
                0
            ])
        };
    }
}

var exported = {
    version: performance.version,
    supported: mapboxGlSupported,
    setRTLTextPlugin: performance.setRTLTextPlugin,
    getRTLTextPluginStatus: performance.getRTLTextPluginStatus,
    Map: Map,
    NavigationControl: NavigationControl,
    GeolocateControl: GeolocateControl,
    AttributionControl: AttributionControl,
    ScaleControl: ScaleControl,
    FullscreenControl: FullscreenControl,
    Popup: Popup,
    Marker: Marker,
    Style: Style,
    LngLat: performance.LngLat,
    LngLatBounds: performance.LngLatBounds,
    Point: performance.Point,
    MercatorCoordinate: performance.MercatorCoordinate,
    Evented: performance.Evented,
    config: performance.config,
    prewarm: prewarm,
    clearPrewarmedResources: clearPrewarmedResources,
    get accessToken() {
        return performance.config.ACCESS_TOKEN;
    },
    set accessToken(token) {
        performance.config.ACCESS_TOKEN = token;
    },
    get baseApiUrl() {
        return performance.config.API_URL;
    },
    set baseApiUrl(url) {
        performance.config.API_URL = url;
    },
    get workerCount() {
        return WorkerPool.workerCount;
    },
    set workerCount(count) {
        WorkerPool.workerCount = count;
    },
    get maxParallelImageRequests() {
        return performance.config.MAX_PARALLEL_IMAGE_REQUESTS;
    },
    set maxParallelImageRequests(numRequests) {
        performance.config.MAX_PARALLEL_IMAGE_REQUESTS = numRequests;
    },
    clearStorage: function clearStorage(callback) {
        performance.clearTileCache(callback);
    },
    workerUrl: ''
};

return exported;

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
